/* tslint:disable */
/* eslint-disable */
/**
 * DocsVision.WebClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientMergeMergeGroupModel
 */
export interface DocsVisionApprovalWebClientMergeMergeGroupModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientMergeMergeGroupModel
     */
    'versionedFileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientMergeMergeGroupModel
     */
    'stageVersionId'?: string;
    /**
     * 
     * @type {DocsVisionApprovalWebClientMergeVersionFileModel}
     * @memberof DocsVisionApprovalWebClientMergeMergeGroupModel
     */
    'stageVersionFileModel'?: DocsVisionApprovalWebClientMergeVersionFileModel;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientMergeVersionFileModel>}
     * @memberof DocsVisionApprovalWebClientMergeMergeGroupModel
     */
    'approverVersionFileModels'?: Array<DocsVisionApprovalWebClientMergeVersionFileModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientMergeVersionFileModel
 */
export interface DocsVisionApprovalWebClientMergeVersionFileModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientMergeVersionFileModel
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientMergeVersionFileModel
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsActualStageData
 */
export interface DocsVisionApprovalWebClientModelsActualStageData {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsActualStageData
     */
    'stageSemantics'?: DocsVisionApprovalWebClientModelsActualStageDataStageSemanticsEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsActualStageData
     */
    'currentStage'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsActualStageData
     */
    'pass'?: number;
}

export const DocsVisionApprovalWebClientModelsActualStageDataStageSemanticsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionApprovalWebClientModelsActualStageDataStageSemanticsEnum = typeof DocsVisionApprovalWebClientModelsActualStageDataStageSemanticsEnum[keyof typeof DocsVisionApprovalWebClientModelsActualStageDataStageSemanticsEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsAgreementListItemModel
 */
export interface DocsVisionApprovalWebClientModelsAgreementListItemModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListItemModel
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListItemModel
     */
    'employeeDisplayText'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListItemModel
     */
    'departmentName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListItemModel
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListItemModel
     */
    'decisionText'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsAgreementListModel
 */
export interface DocsVisionApprovalWebClientModelsAgreementListModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListModel
     */
    'documentNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListModel
     */
    'documentName'?: string;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsAgreementListItemModel>}
     * @memberof DocsVisionApprovalWebClientModelsAgreementListModel
     */
    'items'?: Array<DocsVisionApprovalWebClientModelsAgreementListItemModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsAgreementManagementEditModel
 */
export interface DocsVisionApprovalWebClientModelsAgreementManagementEditModel {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsAgreementManagementModel}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementEditModel
     */
    'agreementManagement'?: DocsVisionApprovalWebClientModelsAgreementManagementModel;
    /**
     * 
     * @type {Array<number>}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementEditModel
     */
    'availableAgreementOperations'?: Array<DocsVisionApprovalWebClientModelsAgreementManagementEditModelAvailableAgreementOperationsEnum>;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsStageModel>}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementEditModel
     */
    'stages'?: Array<DocsVisionApprovalWebClientModelsStageModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementEditModel
     */
    'canInterruptCurrentStages'?: boolean;
}

export const DocsVisionApprovalWebClientModelsAgreementManagementEditModelAvailableAgreementOperationsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DocsVisionApprovalWebClientModelsAgreementManagementEditModelAvailableAgreementOperationsEnum = typeof DocsVisionApprovalWebClientModelsAgreementManagementEditModelAvailableAgreementOperationsEnum[keyof typeof DocsVisionApprovalWebClientModelsAgreementManagementEditModelAvailableAgreementOperationsEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsAgreementManagementModel
 */
export interface DocsVisionApprovalWebClientModelsAgreementManagementModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementModel
     */
    'reconciliationCardId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementModel
     */
    'isMainFileExists'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementModel
     */
    'isNew'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementModel
     */
    'stateType'?: DocsVisionApprovalWebClientModelsAgreementManagementModelStateTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementModel
     */
    'reconciliationListHasRecords'?: boolean;
}

export const DocsVisionApprovalWebClientModelsAgreementManagementModelStateTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type DocsVisionApprovalWebClientModelsAgreementManagementModelStateTypeEnum = typeof DocsVisionApprovalWebClientModelsAgreementManagementModelStateTypeEnum[keyof typeof DocsVisionApprovalWebClientModelsAgreementManagementModelStateTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsAgreementManagementStartModel
 */
export interface DocsVisionApprovalWebClientModelsAgreementManagementStartModel {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsAgreementManagementModel}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementStartModel
     */
    'agreementManagement'?: DocsVisionApprovalWebClientModelsAgreementManagementModel;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsAgreementTemplateModel>}
     * @memberof DocsVisionApprovalWebClientModelsAgreementManagementStartModel
     */
    'templates'?: Array<DocsVisionApprovalWebClientModelsAgreementTemplateModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsAgreementTemplateModel
 */
export interface DocsVisionApprovalWebClientModelsAgreementTemplateModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementTemplateModel
     */
    'creationSettingId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementTemplateModel
     */
    'templateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsAgreementTemplateModel
     */
    'name'?: string;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsStageModel>}
     * @memberof DocsVisionApprovalWebClientModelsAgreementTemplateModel
     */
    'stages'?: Array<DocsVisionApprovalWebClientModelsStageModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsAgreementTemplateModel
     */
    'startNoFiles'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsAgreementTemplateModel
     */
    'startNoEdit'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsAgreementTemplateModel
     */
    'loaded'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel
 */
export interface DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel
     */
    'number'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel
     */
    'isCurrent'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsApprovalHistoryStageModel>}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel
     */
    'stages'?: Array<DocsVisionApprovalWebClientModelsApprovalHistoryStageModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel
     */
    'ownerCardId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalHistoryFileCommentModel
 */
export interface DocsVisionApprovalWebClientModelsApprovalHistoryFileCommentModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileCommentModel
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileCommentModel
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalHistoryFileModel
 */
export interface DocsVisionApprovalWebClientModelsApprovalHistoryFileModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileModel
     */
    'fileExtension'?: string;
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsApprovalHistoryFileVersionModel}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileModel
     */
    'currentVersion'?: DocsVisionApprovalWebClientModelsApprovalHistoryFileVersionModel;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalHistoryFileVersionModel
 */
export interface DocsVisionApprovalWebClientModelsApprovalHistoryFileVersionModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileVersionModel
     */
    'versionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryFileVersionModel
     */
    'fileId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
 */
export interface DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'employeeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'employeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'decisionDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'endDateActual'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'taskId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'comment'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'hasComment'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'decisionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'decision'?: DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelDecisionEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'stageDecision'?: DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelStageDecisionEnum;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsApprovalHistoryFileModel>}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'addedFileCardModels'?: Array<DocsVisionApprovalWebClientModelsApprovalHistoryFileModel>;
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsApprovalHistoryFileCommentModel}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel
     */
    'commentFileData'?: DocsVisionApprovalWebClientModelsApprovalHistoryFileCommentModel;
}

export const DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelDecisionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;

export type DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelDecisionEnum = typeof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelDecisionEnum[keyof typeof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelDecisionEnum];
export const DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelStageDecisionEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelStageDecisionEnum = typeof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelStageDecisionEnum[keyof typeof DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModelStageDecisionEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalHistoryStageModel
 */
export interface DocsVisionApprovalWebClientModelsApprovalHistoryStageModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageModel
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageModel
     */
    'approvalType'?: DocsVisionApprovalWebClientModelsApprovalHistoryStageModelApprovalTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageModel
     */
    'beginDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageModel
     */
    'pass'?: number;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel>}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryStageModel
     */
    'stageItems'?: Array<DocsVisionApprovalWebClientModelsApprovalHistoryStageItemModel>;
}

export const DocsVisionApprovalWebClientModelsApprovalHistoryStageModelApprovalTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionApprovalWebClientModelsApprovalHistoryStageModelApprovalTypeEnum = typeof DocsVisionApprovalWebClientModelsApprovalHistoryStageModelApprovalTypeEnum[keyof typeof DocsVisionApprovalWebClientModelsApprovalHistoryStageModelApprovalTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalHistoryViewModel
 */
export interface DocsVisionApprovalWebClientModelsApprovalHistoryViewModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryViewModel
     */
    'approvalReconcileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryViewModel
     */
    'approvalTaskCardId'?: string;
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryViewModel
     */
    'currentCycle'?: DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel>}
     * @memberof DocsVisionApprovalWebClientModelsApprovalHistoryViewModel
     */
    'cycles'?: Array<DocsVisionApprovalWebClientModelsApprovalHistoryCycleModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
 */
export interface DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'taskId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'completionOptionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'decisionId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'requestDigitalSignature'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'allowSimpleSign'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'decisionSemantics'?: DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDecisionSemanticsEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'labelId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo
     */
    'encodedLabelId'?: string;
}

export const DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDecisionSemanticsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;

export type DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDecisionSemanticsEnum = typeof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDecisionSemanticsEnum[keyof typeof DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDecisionSemanticsEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApproverEmployeeModel
 */
export interface DocsVisionApprovalWebClientModelsApproverEmployeeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'isCurrent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'position'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'isFavoritePerformer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'unitId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsApproverEmployeeModel
     */
    'dataType'?: DocsVisionApprovalWebClientModelsApproverEmployeeModelDataTypeEnum;
}

export const DocsVisionApprovalWebClientModelsApproverEmployeeModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionApprovalWebClientModelsApproverEmployeeModelDataTypeEnum = typeof DocsVisionApprovalWebClientModelsApproverEmployeeModelDataTypeEnum[keyof typeof DocsVisionApprovalWebClientModelsApproverEmployeeModelDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsApproverModel
 */
export interface DocsVisionApprovalWebClientModelsApproverModel {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsApproverEmployeeModel}
     * @memberof DocsVisionApprovalWebClientModelsApproverModel
     */
    'employee'?: DocsVisionApprovalWebClientModelsApproverEmployeeModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsApproverModel
     */
    'excluded'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues
 */
export interface DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues
     */
    'content'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModel>}
     * @memberof DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues
     */
    'currentPerformers'?: Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions
 */
export interface DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions
     */
    'taskId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions
     */
    'completionOptionId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsReconcilationCreationModel
 */
export interface DocsVisionApprovalWebClientModelsReconcilationCreationModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsReconcilationCreationModel
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsReconcilationCreationModel
     */
    'creationSettingId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsReconcilationCreationModel
     */
    'clearReconciliationList'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsStageChangeModel>}
     * @memberof DocsVisionApprovalWebClientModelsReconcilationCreationModel
     */
    'stages'?: Array<DocsVisionApprovalWebClientModelsStageChangeModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsReconcilationEditModel
 */
export interface DocsVisionApprovalWebClientModelsReconcilationEditModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsReconcilationEditModel
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsReconcilationEditModel
     */
    'reconcileCardId'?: string;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsStageChangeModel>}
     * @memberof DocsVisionApprovalWebClientModelsReconcilationEditModel
     */
    'stages'?: Array<DocsVisionApprovalWebClientModelsStageChangeModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsStageChangeModel
 */
export interface DocsVisionApprovalWebClientModelsStageChangeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'stageId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'excluded'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'duration'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'specificDuration'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'approvalType'?: DocsVisionApprovalWebClientModelsStageChangeModelApprovalTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'approversChanged'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsApproverModel>}
     * @memberof DocsVisionApprovalWebClientModelsStageChangeModel
     */
    'approvers'?: Array<DocsVisionApprovalWebClientModelsApproverModel>;
}

export const DocsVisionApprovalWebClientModelsStageChangeModelApprovalTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionApprovalWebClientModelsStageChangeModelApprovalTypeEnum = typeof DocsVisionApprovalWebClientModelsStageChangeModelApprovalTypeEnum[keyof typeof DocsVisionApprovalWebClientModelsStageChangeModelApprovalTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientModelsStageModel
 */
export interface DocsVisionApprovalWebClientModelsStageModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'stageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'allowEdit'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'duration'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'specificDuration'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'approvalType'?: DocsVisionApprovalWebClientModelsStageModelApprovalTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'hasBusinessProcess'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'excluded'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'orderSpecified'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'allowExcludeStage'?: boolean;
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsActualStageData}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'stageInstanceInfo'?: DocsVisionApprovalWebClientModelsActualStageData;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsApproverModel>}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'approvers'?: Array<DocsVisionApprovalWebClientModelsApproverModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'allowEditApprovalType'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientModelsStageModel
     */
    'templateId'?: string;
}

export const DocsVisionApprovalWebClientModelsStageModelApprovalTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionApprovalWebClientModelsStageModelApprovalTypeEnum = typeof DocsVisionApprovalWebClientModelsStageModelApprovalTypeEnum[keyof typeof DocsVisionApprovalWebClientModelsStageModelApprovalTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientSettingsArrow
 */
export interface DocsVisionApprovalWebClientSettingsArrow {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientSettingsArrow
     */
    'decisionSemantics'?: DocsVisionApprovalWebClientSettingsArrowDecisionSemanticsEnum;
    /**
     * 
     * @type {DocsVisionApprovalWebClientSettingsNodeReference}
     * @memberof DocsVisionApprovalWebClientSettingsArrow
     */
    'sourceNode'?: DocsVisionApprovalWebClientSettingsNodeReference;
    /**
     * 
     * @type {DocsVisionApprovalWebClientSettingsNodeReference}
     * @memberof DocsVisionApprovalWebClientSettingsArrow
     */
    'targetNode'?: DocsVisionApprovalWebClientSettingsNodeReference;
}

export const DocsVisionApprovalWebClientSettingsArrowDecisionSemanticsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;

export type DocsVisionApprovalWebClientSettingsArrowDecisionSemanticsEnum = typeof DocsVisionApprovalWebClientSettingsArrowDecisionSemanticsEnum[keyof typeof DocsVisionApprovalWebClientSettingsArrowDecisionSemanticsEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientSettingsNodeReference
 */
export interface DocsVisionApprovalWebClientSettingsNodeReference {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientSettingsNodeReference
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientSettingsNodeReference
     */
    'nodeType'?: DocsVisionApprovalWebClientSettingsNodeReferenceNodeTypeEnum;
}

export const DocsVisionApprovalWebClientSettingsNodeReferenceNodeTypeEnum = {
    NUMBER_0: 0
} as const;

export type DocsVisionApprovalWebClientSettingsNodeReferenceNodeTypeEnum = typeof DocsVisionApprovalWebClientSettingsNodeReferenceNodeTypeEnum[keyof typeof DocsVisionApprovalWebClientSettingsNodeReferenceNodeTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientSettingsSettingsGraph
 */
export interface DocsVisionApprovalWebClientSettingsSettingsGraph {
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientSettingsStageNode>}
     * @memberof DocsVisionApprovalWebClientSettingsSettingsGraph
     */
    'stageNodes'?: Array<DocsVisionApprovalWebClientSettingsStageNode>;
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientSettingsArrow>}
     * @memberof DocsVisionApprovalWebClientSettingsSettingsGraph
     */
    'arrows'?: Array<DocsVisionApprovalWebClientSettingsArrow>;
}
/**
 * 
 * @export
 * @interface DocsVisionApprovalWebClientSettingsStageNode
 */
export interface DocsVisionApprovalWebClientSettingsStageNode {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientSettingsStageNode
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionApprovalWebClientSettingsStageNode
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionApprovalWebClientSettingsStageNode
     */
    'first'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientSettingsStageNode
     */
    'taskSendingMode'?: DocsVisionApprovalWebClientSettingsStageNodeTaskSendingModeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientSettingsStageNode
     */
    'repeatMode'?: DocsVisionApprovalWebClientSettingsStageNodeRepeatModeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionApprovalWebClientSettingsStageNode
     */
    'startConditionType'?: DocsVisionApprovalWebClientSettingsStageNodeStartConditionTypeEnum;
}

export const DocsVisionApprovalWebClientSettingsStageNodeTaskSendingModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionApprovalWebClientSettingsStageNodeTaskSendingModeEnum = typeof DocsVisionApprovalWebClientSettingsStageNodeTaskSendingModeEnum[keyof typeof DocsVisionApprovalWebClientSettingsStageNodeTaskSendingModeEnum];
export const DocsVisionApprovalWebClientSettingsStageNodeRepeatModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionApprovalWebClientSettingsStageNodeRepeatModeEnum = typeof DocsVisionApprovalWebClientSettingsStageNodeRepeatModeEnum[keyof typeof DocsVisionApprovalWebClientSettingsStageNodeRepeatModeEnum];
export const DocsVisionApprovalWebClientSettingsStageNodeStartConditionTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionApprovalWebClientSettingsStageNodeStartConditionTypeEnum = typeof DocsVisionApprovalWebClientSettingsStageNodeStartConditionTypeEnum[keyof typeof DocsVisionApprovalWebClientSettingsStageNodeStartConditionTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewCell
 */
export interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewCell {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewCell
     */
    'columnId'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewCell
     */
    'value'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewColumn
 */
export interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewColumn {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewColumn
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewColumn
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModel
 */
export interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModel {
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewColumn>}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModel
     */
    'columns'?: Array<DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewColumn>;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow>}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModel
     */
    'rows'?: Array<DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow>;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRequestModel
 */
export interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRequestModel
     */
    'archiveCaseId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRequestModel
     */
    'descriptionColumnViewModeName'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRequestModel
     */
    'documentViewDescriptionColumnMethodKey'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow
 */
export interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow
     */
    'entityId'?: string;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewCell>}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow
     */
    'cells'?: Array<DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewCell>;
    /**
     * 
     * @type {DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRowExt}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRow
     */
    'ext'?: DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRowExt;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRowExt
 */
export interface DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRowExt {
    /**
     * 
     * @type {object}
     * @memberof DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewRowExt
     */
    'layoutDescription'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponse
 */
export interface DocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponse {
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsSearchItemModel>}
     * @memberof DocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponse
     */
    'items'?: Array<DocsVisionArchiveManagementWebClientModelsSearchItemModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponse
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest
 */
export interface DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest
     */
    'year'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
 */
export interface DocsVisionArchiveManagementWebClientModelsArchiveCaseItem {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'index'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'fullName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'dataType'?: DocsVisionArchiveManagementWebClientModelsArchiveCaseItemDataTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'hasChildren'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemData>}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'path'?: Array<DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemData>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseItem
     */
    'roleModelOperationType'?: DocsVisionArchiveManagementWebClientModelsArchiveCaseItemRoleModelOperationTypeEnum;
}

export const DocsVisionArchiveManagementWebClientModelsArchiveCaseItemDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionArchiveManagementWebClientModelsArchiveCaseItemDataTypeEnum = typeof DocsVisionArchiveManagementWebClientModelsArchiveCaseItemDataTypeEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsArchiveCaseItemDataTypeEnum];
export const DocsVisionArchiveManagementWebClientModelsArchiveCaseItemRoleModelOperationTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_16: 16,
    NUMBER_256: 256,
    NUMBER_279: 279
} as const;

export type DocsVisionArchiveManagementWebClientModelsArchiveCaseItemRoleModelOperationTypeEnum = typeof DocsVisionArchiveManagementWebClientModelsArchiveCaseItemRoleModelOperationTypeEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsArchiveCaseItemRoleModelOperationTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse
 */
export interface DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse {
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel>}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse
     */
    'yearNomenclatures'?: Array<DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel>;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsArchiveCaseItem>}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse
     */
    'items'?: Array<DocsVisionArchiveManagementWebClientModelsArchiveCaseItem>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse
     */
    'totalItemsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
 */
export interface DocsVisionArchiveManagementWebClientModelsArchiveCaseModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
     */
    'index'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
     */
    'fullName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCaseModel
     */
    'dataType'?: DocsVisionArchiveManagementWebClientModelsArchiveCaseModelDataTypeEnum;
}

export const DocsVisionArchiveManagementWebClientModelsArchiveCaseModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionArchiveManagementWebClientModelsArchiveCaseModelDataTypeEnum = typeof DocsVisionArchiveManagementWebClientModelsArchiveCaseModelDataTypeEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsArchiveCaseModelDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest
 */
export interface DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest
     */
    'unitNomenclatureId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsPagination}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest
     */
    'pagination'?: DocsVisionPlatformWebClientModelsPagination;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse
 */
export interface DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse {
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsArchiveCaseModel>}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse
     */
    'items'?: Array<DocsVisionArchiveManagementWebClientModelsArchiveCaseModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse
     */
    'totalItemsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel
 */
export interface DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel
     */
    'fromUnitNomenclatureRowId'?: string;
    /**
     * 
     * @type {DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel}
     * @memberof DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel
     */
    'fromYear'?: DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel
     */
    'toUnitNomenclatureRowId'?: string;
    /**
     * 
     * @type {DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel}
     * @memberof DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel
     */
    'toYear'?: DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest
 */
export interface DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest
     */
    'unitNomenclatureId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemData
 */
export interface DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemData {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemData
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemData
     */
    'dataType'?: DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemDataDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemData
     */
    'name'?: string;
}

export const DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemDataDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemDataDataTypeEnum = typeof DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemDataDataTypeEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsIArchiveCaseItemDataDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
 */
export interface DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'queryType'?: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryQueryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'searchText'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'cardId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsPagination}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'pagination'?: DocsVisionPlatformWebClientModelsPagination;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'year'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'excludeItems'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'itemTypes'?: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryItemTypesEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'childItemTypes'?: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryChildItemTypesEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'roleModelOperations'?: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryRoleModelOperationsEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery
     */
    'discreteAccessPermissions'?: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryDiscreteAccessPermissionsEnum;
}

export const DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryQueryTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryQueryTypeEnum = typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryQueryTypeEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryQueryTypeEnum];
export const DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryItemTypesEnum = typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryItemTypesEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryItemTypesEnum];
export const DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryChildItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryChildItemTypesEnum = typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryChildItemTypesEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryChildItemTypesEnum];
export const DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryRoleModelOperationsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_16: 16,
    NUMBER_256: 256,
    NUMBER_279: 279
} as const;

export type DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryRoleModelOperationsEnum = typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryRoleModelOperationsEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryRoleModelOperationsEnum];
export const DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryDiscreteAccessPermissionsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_38: 38,
    NUMBER_256: 256,
    NUMBER_319: 319,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983359: 983359,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryDiscreteAccessPermissionsEnum = typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryDiscreteAccessPermissionsEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQueryDiscreteAccessPermissionsEnum];

/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsSearchItemModel
 */
export interface DocsVisionArchiveManagementWebClientModelsSearchItemModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchItemModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchItemModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchItemModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchItemModel
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchItemModel
     */
    'index'?: string;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsSearchItemModel>}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchItemModel
     */
    'path'?: Array<DocsVisionArchiveManagementWebClientModelsSearchItemModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchItemModel
     */
    'dataType'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsSearchRequest
 */
export interface DocsVisionArchiveManagementWebClientModelsSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchRequest
     */
    'searchText'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchRequest
     */
    'searchMode'?: DocsVisionArchiveManagementWebClientModelsSearchRequestSearchModeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchRequest
     */
    'skipCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchRequest
     */
    'maxCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsSearchRequest
     */
    'year'?: number;
}

export const DocsVisionArchiveManagementWebClientModelsSearchRequestSearchModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionArchiveManagementWebClientModelsSearchRequestSearchModeEnum = typeof DocsVisionArchiveManagementWebClientModelsSearchRequestSearchModeEnum[keyof typeof DocsVisionArchiveManagementWebClientModelsSearchRequestSearchModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel
 */
export interface DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel
     */
    'index'?: string;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel>}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel
     */
    'children'?: Array<DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel
     */
    'childrenLoaded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel
     */
    'hasChildren'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest
 */
export interface DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest
     */
    'parentSectionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest
     */
    'levelOfSubsections'?: number;
    /**
     * 
     * @type {DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest
     */
    'year'?: DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse
 */
export interface DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse
     */
    'parentSectionId'?: string;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel>}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse
     */
    'availableYears'?: Array<DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel>;
    /**
     * 
     * @type {DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse
     */
    'year'?: DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel;
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel>}
     * @memberof DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse
     */
    'unitNomenclatures'?: Array<DocsVisionArchiveManagementWebClientModelsUnitNomenclatureModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel
 */
export interface DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest
 */
export interface DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest
     */
    'cardID'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
 */
export interface DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'applicantType'?: DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfoApplicantTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'inn'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'kpp'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'ogrn'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'snils'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo
     */
    'phone'?: string;
}

export const DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfoApplicantTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfoApplicantTypeEnum = typeof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfoApplicantTypeEnum[keyof typeof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfoApplicantTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationData
 */
export interface DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationData {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationData
     */
    'revocationType'?: DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationDataRevocationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationData
     */
    'revocationReason'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo}
     * @memberof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationData
     */
    'applicantInfo'?: DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationApplicantInfo;
}

export const DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationDataRevocationTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationDataRevocationTypeEnum = typeof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationDataRevocationTypeEnum[keyof typeof DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationDataRevocationTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource
 */
export interface DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource
     */
    'type'?: DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSourceTypeEnum;
}

export const DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSourceTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSourceTypeEnum = typeof DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSourceTypeEnum[keyof typeof DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSourceTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientBusinessCalendarCalendarDaySettings
 */
export interface DocsVisionBackOfficeWebClientBusinessCalendarCalendarDaySettings {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarCalendarDaySettings
     */
    'day'?: number;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientBusinessCalendarCalendarWorkTime}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarCalendarDaySettings
     */
    'workTime'?: DocsVisionBackOfficeWebClientBusinessCalendarCalendarWorkTime;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientBusinessCalendarCalendarWorkTime
 */
export interface DocsVisionBackOfficeWebClientBusinessCalendarCalendarWorkTime {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarCalendarWorkTime
     */
    'begin'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarCalendarWorkTime
     */
    'end'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientBusinessCalendarCalendarYearSettings
 */
export interface DocsVisionBackOfficeWebClientBusinessCalendarCalendarYearSettings {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarCalendarYearSettings
     */
    'year'?: number;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientBusinessCalendarCalendarDaySettings>}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarCalendarYearSettings
     */
    'days'?: Array<DocsVisionBackOfficeWebClientBusinessCalendarCalendarDaySettings>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
 */
export interface DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'performerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'performerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'isResponsible'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
 */
export interface DocsVisionBackOfficeWebClientCardKindCardKindInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'kindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'isDefault'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'notAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'notSelectable'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientCardKindCardKindInfoModel>}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'kinds'?: Array<DocsVisionBackOfficeWebClientCardKindCardKindInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientCardKindCardKindModel
 */
export interface DocsVisionBackOfficeWebClientCardKindCardKindModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'cardKindName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'cardKindFullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'cardKindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'loadingError'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientCommentsComment
 */
export interface DocsVisionBackOfficeWebClientCommentsComment {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsComment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsComment
     */
    'employeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsComment
     */
    'employeeDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsComment
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsComment
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
 */
export interface DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'dataSourceCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'dataSourceSectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'dataSourceRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'authorFieldAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'dateFieldAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'textFieldAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'commentEditOperation'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'editAnyCommentEditOperation'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel
     */
    'editOwnCommentEditOperation'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientCommentsCommentsModel
 */
export interface DocsVisionBackOfficeWebClientCommentsCommentsModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientCommentsComment>}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'comments'?: Array<DocsVisionBackOfficeWebClientCommentsComment>;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'dataSourceInfo'?: DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'allCommentsCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
 */
export interface DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'operationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'templateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'folderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'linkTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'cardKindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'location'?: DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModelLocationEnum;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel
     */
    'operationContext'?: object;
}

export const DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModelLocationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModelLocationEnum = typeof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModelLocationEnum[keyof typeof DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModelLocationEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
 */
export interface DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'fullName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'departmentType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDepartmentTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'dataType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDepartmentTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDepartmentTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDepartmentTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDepartmentTypeEnum];
export const DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDataTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModelDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
 */
export interface DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode>}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'items'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'totalResultsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'searchResultNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'matchedFieldName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'matchedFieldValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'matchedElementId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDepartmentDepartmentModel
 */
export interface DocsVisionBackOfficeWebClientDepartmentDepartmentModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'fullName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'departmentType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentModelDepartmentTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'dataType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentModelDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientDepartmentDepartmentModelDepartmentTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentModelDepartmentTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentModelDepartmentTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentModelDepartmentTypeEnum];
export const DocsVisionBackOfficeWebClientDepartmentDepartmentModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentModelDataTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentModelDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentModelDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
 */
export interface DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'inn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'notAvailable'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'departmentType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDepartmentTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'childrenLoaded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'hasChildren'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'hasEmployee'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode>}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'children'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode
     */
    'dataType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDepartmentTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDepartmentTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDepartmentTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDepartmentTypeEnum];
export const DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDataTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
 */
export interface DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'matched'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'matchedFieldName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'matchedFieldValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'inn'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'notAvailable'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'departmentType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDepartmentTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'childrenLoaded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'hasChildren'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'hasEmployee'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode>}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'children'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNode
     */
    'dataType'?: DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDepartmentTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDepartmentTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDepartmentTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDepartmentTypeEnum];
export const DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDataTypeEnum = typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDepartmentDepartmentTreeSearchResultNodeDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'parentId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'parentId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel>}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'items'?: Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'hasMore'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'items'?: Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'totalResultsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'searchResultNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'matchedElementId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'matchedFieldName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'matchedFieldValue'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'nodeType'?: DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNodeNodeTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'childrenLoaded'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'children'?: Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>;
}

export const DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNodeNodeTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNodeNodeTypeEnum = typeof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNodeNodeTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNodeNodeTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'type'?: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'hasChildren'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'parentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'description'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'data'?: object;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'dataType'?: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemDataTypeEnum;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem>}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'path'?: Array<DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem>;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsSearchInfo}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem
     */
    'searchInfo'?: DocsVisionPlatformWebClientModelsSearchInfo;
}

export const DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemTypeEnum = typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemTypeEnum];
export const DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemDataTypeEnum = typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItemDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem>}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'items'?: Array<DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerItem>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'directoryTimestamp'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'totalItemsCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery
 */
export interface DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery
     */
    'searchArea'?: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchAreaEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery
     */
    'searchItemsType'?: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchItemsTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery
     */
    'searchText'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery
     */
    'nodeId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsPagination}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery
     */
    'pagination'?: DocsVisionPlatformWebClientModelsPagination;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery
     */
    'needBuildPath'?: boolean;
}

export const DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchAreaEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchAreaEnum = typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchAreaEnum[keyof typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchAreaEnum];
export const DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchItemsTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchItemsTypeEnum = typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchItemsTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuerySearchItemsTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer
 */
export interface DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer
     */
    'tip'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer
     */
    'extendedTip'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer
     */
    'type'?: DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformerTypeEnum;
}

export const DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformerTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformerTypeEnum = typeof DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformerTypeEnum[keyof typeof DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformerTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientEmployeeEmployeeModel
 */
export interface DocsVisionBackOfficeWebClientEmployeeEmployeeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'isCurrent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'accountName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'sdid'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'isFavoritePerformer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'unitId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'status'?: DocsVisionBackOfficeWebClientEmployeeEmployeeModelStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'departmentName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModel
     */
    'dataType'?: DocsVisionBackOfficeWebClientEmployeeEmployeeModelDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientEmployeeEmployeeModelStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionBackOfficeWebClientEmployeeEmployeeModelStatusEnum = typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelStatusEnum[keyof typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelStatusEnum];
export const DocsVisionBackOfficeWebClientEmployeeEmployeeModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientEmployeeEmployeeModelDataTypeEnum = typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
 */
export interface DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'isCurrent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'accountName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'sdid'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'isFavoritePerformer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'unitId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'status'?: DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'departmentName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail
     */
    'dataType'?: DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailStatusEnum = typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailStatusEnum[keyof typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailStatusEnum];
export const DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailDataTypeEnum = typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmailDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel
 */
export interface DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel
     */
    'deputyID'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel
     */
    'permanentDeputy'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel
     */
    'signature'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel
 */
export interface DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel
     */
    'employeeId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel
     */
    'status'?: DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel
     */
    'inactiveStatus'?: DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelInactiveStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel
     */
    'endDate'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel>}
     * @memberof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel
     */
    'deputies'?: Array<DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeDeputyModel>;
}

export const DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelStatusEnum = typeof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelStatusEnum[keyof typeof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelStatusEnum];
export const DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelInactiveStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelInactiveStatusEnum = typeof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelInactiveStatusEnum[keyof typeof DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModelInactiveStatusEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
 */
export interface DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel>}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'comments'?: Array<DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'fileAuthor'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'fileAuthorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'fileCreationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'versionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'currentEmployee'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'currentEmployeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel
 */
export interface DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel
     */
    'authorId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientFileListVersionedFileModel
 */
export interface DocsVisionBackOfficeWebClientFileListVersionedFileModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileModel
     */
    'versionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileModel
     */
    'versionPath'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileModel
     */
    'versionNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileModel
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileModel
     */
    'creationDate'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel>}
     * @memberof DocsVisionBackOfficeWebClientFileListVersionedFileModel
     */
    'comments'?: Array<DocsVisionBackOfficeWebClientFileListVersionedFileCommentModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientHistoryHistoryEmployee
 */
export interface DocsVisionBackOfficeWebClientHistoryHistoryEmployee {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistoryEmployee
     */
    'displayName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientHistoryHistoryRecord
 */
export interface DocsVisionBackOfficeWebClientHistoryHistoryRecord {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistoryRecord
     */
    'logNewId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistoryRecord
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistoryRecord
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistoryRecord
     */
    'event'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientHistoryHistoryEmployee}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistoryRecord
     */
    'author'?: DocsVisionBackOfficeWebClientHistoryHistoryEmployee;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientHistoryHistorySearchResult
 */
export interface DocsVisionBackOfficeWebClientHistoryHistorySearchResult {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientHistoryHistoryRecord>}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'records'?: Array<DocsVisionBackOfficeWebClientHistoryHistoryRecord>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'cacheId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'renew'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientLinksLinkType
 */
export interface DocsVisionBackOfficeWebClientLinksLinkType {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientLinksLinkType
     */
    'linkTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientLinksLinkType
     */
    'displayName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientModelsOperationFieldInfo
 */
export interface DocsVisionBackOfficeWebClientModelsOperationFieldInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsOperationFieldInfo
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsOperationFieldInfo
     */
    'fieldAlias'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientModelsOperationFieldInfo
     */
    'fieldType'?: DocsVisionBackOfficeWebClientModelsOperationFieldInfoFieldTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientModelsOperationFieldInfo
     */
    'enumValue'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsOperationFieldInfo
     */
    'baseUniversalValue'?: string;
}

export const DocsVisionBackOfficeWebClientModelsOperationFieldInfoFieldTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_20: 20,
    NUMBER_21: 21
} as const;

export type DocsVisionBackOfficeWebClientModelsOperationFieldInfoFieldTypeEnum = typeof DocsVisionBackOfficeWebClientModelsOperationFieldInfoFieldTypeEnum[keyof typeof DocsVisionBackOfficeWebClientModelsOperationFieldInfoFieldTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
 */
export interface DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'dataSourceCardSection'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'extendedDataSource'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'employeeAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'groupAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'roleAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'unitAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'searchWordAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'positionAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'selectFromOrganization'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'selectFromGroup'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'groupAreaEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'roleAreaEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'unitAreaEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'searchWordAreaEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel
     */
    'positionAreaEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientModelsUniqueAttribute
 */
export interface DocsVisionBackOfficeWebClientModelsUniqueAttribute {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'fieldAlias'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'type'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'sectionName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'fieldDisplayName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientModelsUniqueAttributeCard
 */
export interface DocsVisionBackOfficeWebClientModelsUniqueAttributeCard {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'cardDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'authorDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'createDate'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientModelsUniqueAttributeValue>}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'attributes'?: Array<DocsVisionBackOfficeWebClientModelsUniqueAttributeValue>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientModelsUniqueAttributeValue
 */
export interface DocsVisionBackOfficeWebClientModelsUniqueAttributeValue {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeValue
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeValue
     */
    'sectionName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeValue
     */
    'type'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeValue
     */
    'fieldAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeValue
     */
    'fieldDisplayName'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributeValue
     */
    'value'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList
 */
export interface DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientModelsUniqueAttributeValue>}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList
     */
    'uniqueAttributeValues'?: Array<DocsVisionBackOfficeWebClientModelsUniqueAttributeValue>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList
     */
    'documentId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientNumeratorNumberInfo
 */
export interface DocsVisionBackOfficeWebClientNumeratorNumberInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel>}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'items'?: Array<DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'totalItemsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'resultType'?: DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponseResultTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'message'?: string;
}

export const DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponseResultTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponseResultTypeEnum = typeof DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponseResultTypeEnum[keyof typeof DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponseResultTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'mnemonics'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'principal'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'creationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'updateDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel
     */
    'groupId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel
     */
    'author'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel>}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel
     */
    'codes'?: Array<DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersGroupModel
     */
    'hasChildren'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel>}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'items'?: Array<DocsVisionBackOfficeWebClientPowersDirectoryModelsPowersCodeModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'totalItemsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest
     */
    'groupId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest
     */
    'expandedNodes'?: Array<string>;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsPagination}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest
     */
    'pagination'?: DocsVisionPlatformWebClientModelsPagination;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest
     */
    'targetGroupId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest
 */
export interface DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest
     */
    'searchText'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsPagination}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest
     */
    'pagination'?: DocsVisionPlatformWebClientModelsPagination;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest
     */
    'excludeItems'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest
     */
    'powerOfAttorneyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest
     */
    'signature'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'powerOfAttorneyUseStatus'?: DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponsePowerOfAttorneyUseStatusEnum;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModel>}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'powersOfAttorney'?: Array<DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'errorMessage'?: string;
}

export const DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponsePowerOfAttorneyUseStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponsePowerOfAttorneyUseStatusEnum = typeof DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponsePowerOfAttorneyUseStatusEnum[keyof typeof DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponsePowerOfAttorneyUseStatusEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'cardID'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'powerOfAttorneyID'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'powerOfAttorneyUserCardID'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'representativeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'principalName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'signerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'endDate'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'powers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'format'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'regTransferStatus'?: DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModelRegTransferStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'regTransferStatusDisplayName'?: string;
}

export const DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModelRegTransferStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModelRegTransferStatusEnum = typeof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModelRegTransferStatusEnum[keyof typeof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModelRegTransferStatusEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModel
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModel
     */
    'cardID'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModel
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModel
     */
    'regTransferStatus'?: DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModelRegTransferStatusEnum;
}

export const DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModelRegTransferStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModelRegTransferStatusEnum = typeof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModelRegTransferStatusEnum[keyof typeof DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyModelRegTransferStatusEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest
     */
    'powerOfAttorneyId'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationData}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest
     */
    'revocationData'?: DocsVisionBackOfficeObjectModelPowerOfAttorneyRevocationData;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest
 */
export interface DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest
     */
    'powerOfAttorneyId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest
     */
    'withChildrenPowerOfAttorney'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
 */
export interface DocsVisionBackOfficeWebClientSignatureAttachSignatureResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'signatureId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureCertificateInfoModel
 */
export interface DocsVisionBackOfficeWebClientSignatureCertificateInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateInfoModel
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateInfoModel
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateInfoModel
     */
    'expireDate'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest
 */
export interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequestItem>}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest
     */
    'certificates'?: Array<DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequestItem>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequestItem
 */
export interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequestItem {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequestItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequestItem
     */
    'certificateBase64'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
 */
export interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem>}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'certificates'?: Array<DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem
 */
export interface DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem
     */
    'certificateThumberprint'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponseItem
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureCreateSignDialogParams
 */
export interface DocsVisionBackOfficeWebClientSignatureCreateSignDialogParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureCreateSignDialogParams
     */
    'documentId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
 */
export interface DocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel>}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'signatures'?: Array<DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
 */
export interface DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientEmployeeEmployeeModel}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'author'?: DocsVisionBackOfficeWebClientEmployeeEmployeeModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'certificateSubject'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'creationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'labelDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'certificateThumbprint'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'isSimpleSign'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureDocumentSignatureModel
     */
    'hasSignedAttributeItem'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModel
 */
export interface DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModel
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModel
     */
    'details'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModel
     */
    'status'?: DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModelStatusEnum;
}

export const DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModelStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModelStatusEnum = typeof DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModelStatusEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModelStatusEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
 */
export interface DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'powerOfAttorneyCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'powerOfAttorneyTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'powerOfAttorneyNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'result'?: DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModelResultEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'messages'?: Array<string>;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModel}
     * @memberof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'externalPowerOfAttorneyInfo'?: DocsVisionBackOfficeWebClientSignatureExternalPowerOfAttorneyInfoModel;
}

export const DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModelResultEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModelResultEnum = typeof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModelResultEnum[keyof typeof DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModelResultEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignDataRequest
 */
export interface DocsVisionBackOfficeWebClientSignatureSignDataRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignDataRequest
     */
    'documentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignDataRequest
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignDataRequest
     */
    'labelId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignDataRequest
     */
    'isSimpleSign'?: boolean;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureData}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignDataRequest
     */
    'signatureData'?: DocsVisionBackOfficeWebClientSignatureSignatureData;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper
 */
export interface DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignDataRequest}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper
     */
    'request'?: DocsVisionBackOfficeWebClientSignatureSignDataRequest;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureData
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureData {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureData
     */
    'certificateThumbprint'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureData
     */
    'powerOfAttorneyID'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureItemData>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureData
     */
    'items'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureItemData>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureDetailsModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'signatureKind'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureFileDetails>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'documentFiles'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureFileDetails>;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'signatureDetails'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureFileDetails
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureFileDetails {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileDetails
     */
    'documentFileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileDetails
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileDetails
     */
    'versionId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileDetails
     */
    'isMain'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureFileInfo
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureFileInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileInfo
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileInfo
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileInfo
     */
    'versionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureFileInfo
     */
    'fileCardId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureInfoModel
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'expireDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'signatureType'?: DocsVisionBackOfficeWebClientSignatureSignatureInfoModelSignatureTypeEnum;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureCertificateInfoModel}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'certificate'?: DocsVisionBackOfficeWebClientSignatureCertificateInfoModel;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureTimestampInfoModel>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'timestamps'?: Array<DocsVisionBackOfficeWebClientSignatureTimestampInfoModel>;
}

export const DocsVisionBackOfficeWebClientSignatureSignatureInfoModelSignatureTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DocsVisionBackOfficeWebClientSignatureSignatureInfoModelSignatureTypeEnum = typeof DocsVisionBackOfficeWebClientSignatureSignatureInfoModelSignatureTypeEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureSignatureInfoModelSignatureTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureItemData
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureItemData {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemData
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemData
     */
    'fileVersionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemData
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemData
     */
    'itemType'?: DocsVisionBackOfficeWebClientSignatureSignatureItemDataItemTypeEnum;
}

export const DocsVisionBackOfficeWebClientSignatureSignatureItemDataItemTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientSignatureSignatureItemDataItemTypeEnum = typeof DocsVisionBackOfficeWebClientSignatureSignatureItemDataItemTypeEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureSignatureItemDataItemTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'fileVersionNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'fileHandleId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'certificateThumbprint'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'timestamp'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'isSignedWithCertificate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'errorMessage'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'verificationStatus'?: DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelVerificationStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'signatureItemType'?: DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelSignatureItemTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'partItems'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'kind'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'expireDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'canShowSignatureInfo'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'signaturePartId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel
     */
    'signatureId'?: string;
}

export const DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelVerificationStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelVerificationStatusEnum = typeof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelVerificationStatusEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelVerificationStatusEnum];
export const DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelSignatureItemTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelSignatureItemTypeEnum = typeof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelSignatureItemTypeEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModelSignatureItemTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureLabelModel
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureLabelModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureLabelModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureLabelModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureLabelModel
     */
    'encodedId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'externalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'signer'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'authority'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'validTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'friendlyName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'hasPinCode'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'source'?: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfoSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo
     */
    'thumberprint'?: string;
}

export const DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfoSourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfoSourceEnum = typeof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfoSourceEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfoSourceEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
     */
    'isSimple'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
     */
    'isUserDefault'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
     */
    'comment'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod
     */
    'certificateInfo'?: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'cloudAccountName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'showCloudCertificates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'accessTokenReceived'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'methods'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethod>;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'certificates'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSavedCertificateInfo>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureModel
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureLabelModel>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'labels'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureLabelModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'signFields'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'signAttachments'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'thumbprint'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'hideSelectCertificateDialog'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'simpleSignatureAllowed'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureFileInfo>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'files'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureFileInfo>;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'signatureMethods'?: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
 */
export interface DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'signatureStatus'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'validationState'?: DocsVisionBackOfficeWebClientSignatureSignatureVerificationModelValidationStateEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'signatureKind'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel>}
     * @memberof DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'signatureDetails'?: Array<DocsVisionBackOfficeWebClientSignatureSignatureItemVerificationModel>;
}

export const DocsVisionBackOfficeWebClientSignatureSignatureVerificationModelValidationStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionBackOfficeWebClientSignatureSignatureVerificationModelValidationStateEnum = typeof DocsVisionBackOfficeWebClientSignatureSignatureVerificationModelValidationStateEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureSignatureVerificationModelValidationStateEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientSignatureTimestampInfoModel
 */
export interface DocsVisionBackOfficeWebClientSignatureTimestampInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureTimestampInfoModel
     */
    'createDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureTimestampInfoModel
     */
    'expireDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientSignatureTimestampInfoModel
     */
    'issuer'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientSignatureTimestampInfoModel
     */
    'timestampType'?: DocsVisionBackOfficeWebClientSignatureTimestampInfoModelTimestampTypeEnum;
}

export const DocsVisionBackOfficeWebClientSignatureTimestampInfoModelTimestampTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionBackOfficeWebClientSignatureTimestampInfoModelTimestampTypeEnum = typeof DocsVisionBackOfficeWebClientSignatureTimestampInfoModelTimestampTypeEnum[keyof typeof DocsVisionBackOfficeWebClientSignatureTimestampInfoModelTimestampTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'accountFound'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'fullAccountName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery
     */
    'items'?: Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData>;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery
     */
    'context'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel
     */
    'groupId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel
     */
    'employeeIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel
     */
    'unitIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel
     */
    'positionIds'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel
     */
    'groupIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData
     */
    'dataType'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemDataDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemDataDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemDataDataTypeEnum = typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemDataDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemDataDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel
     */
    'staffId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel
     */
    'targetId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel
     */
    'directoryId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel
     */
    'directoryDataType'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModelDirectoryDataTypeEnum;
}

export const DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModelDirectoryDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModelDirectoryDataTypeEnum = typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModelDirectoryDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModelDirectoryDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery
     */
    'employeeId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery
     */
    'groupIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'errorMessage'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'deniedGroups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsIDirectoryItemData}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem
     */
    'data'?: DocsVisionPlatformWebClientModelsIDirectoryItemData;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem
     */
    'hasChildren'?: boolean;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsSearchInfo}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem
     */
    'searchInfo'?: DocsVisionPlatformWebClientModelsSearchInfo;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsIDirectoryItemData>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem
     */
    'path'?: Array<DocsVisionPlatformWebClientModelsIDirectoryItemData>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel
     */
    'staffId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel
     */
    'targetId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'dataType'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModelDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'name'?: string;
}

export const DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModelDataTypeEnum = typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModelDataTypeEnum[keyof typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModelDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'items'?: Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItem>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'totalItemsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'queryType'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryQueryTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'itemTypes'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryItemTypesEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'childItemTypes'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryChildItemTypesEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'searchText'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'parentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'parentType'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryParentTypeEnum;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsPagination}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'pagination'?: DocsVisionPlatformWebClientModelsPagination;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'context'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery
     */
    'excludeItems'?: Array<string>;
}

export const DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryQueryTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryQueryTypeEnum = typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryQueryTypeEnum[keyof typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryQueryTypeEnum];
export const DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryItemTypesEnum = typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryItemTypesEnum[keyof typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryItemTypesEnum];
export const DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryChildItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryChildItemTypesEnum = typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryChildItemTypesEnum[keyof typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryChildItemTypesEnum];
export const DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryParentTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryParentTypeEnum = typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryParentTypeEnum[keyof typeof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryParentTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext
     */
    'cardKindId'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext
     */
    'binding'?: DocsVisionBackOfficeWebClientModelsStaffItemsDataSourceModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQueryContext
     */
    'favoritesCustomKey'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest
     */
    'employeesToSet'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest
     */
    'employeesAsGroupsSource'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
 */
export interface DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'errorMessage'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel>}
     * @memberof DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'groups'?: Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientStateStateModel
 */
export interface DocsVisionBackOfficeWebClientStateStateModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStateStateModel
     */
    'stateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStateStateModel
     */
    'caption'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientStateStateModel
     */
    'builtInStateId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
 */
export interface DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'performer'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsDirectoryItemData;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'isResponsible'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'order'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo
     */
    'taskDistribution'?: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfoTaskDistributionEnum;
}

export const DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfoTaskDistributionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfoTaskDistributionEnum = typeof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfoTaskDistributionEnum[keyof typeof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfoTaskDistributionEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel
 */
export interface DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel
     */
    'totalStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel
     */
    'totalEndDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel
     */
    'totalDuration'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel
     */
    'defaultCalendarId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel
     */
    'executionType'?: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModelExecutionTypeEnum;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo>}
     * @memberof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel
     */
    'intervals'?: Array<DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo>;
}

export const DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModelExecutionTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModelExecutionTypeEnum = typeof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModelExecutionTypeEnum[keyof typeof DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModelExecutionTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTaskTreeEdge
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTaskTreeEdge {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTaskTreeEdge
     */
    'fromNode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTaskTreeEdge
     */
    'toNode'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
     */
    'taskListId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
     */
    'cardIds'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
     */
    'startLevel'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
     */
    'loadFullTree'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
     */
    'loadChildren'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
     */
    'kindIds'?: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions
     */
    'columns'?: Array<DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptionsColumnsEnum>;
}

export const DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptionsColumnsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13
} as const;

export type DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptionsColumnsEnum = typeof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptionsColumnsEnum[keyof typeof DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptionsColumnsEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTasksTableModel
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTasksTableModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientTasksTreeTasksTableRow>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableModel
     */
    'rows'?: Array<DocsVisionBackOfficeWebClientTasksTreeTasksTableRow>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableModel
     */
    'canShowFullTree'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTasksTableRow {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'cardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'level'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'parentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'stateCategory'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'executionType'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'childrenIds'?: Array<string>;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientTasksTreeTasksTableRow>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'children'?: Array<DocsVisionBackOfficeWebClientTasksTreeTasksTableRow>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'gender'?: DocsVisionBackOfficeWebClientTasksTreeTasksTableRowGenderEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'indicators'?: Array<DocsVisionBackOfficeWebClientTasksTreeTasksTableRowIndicatorsEnum>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTableRow
     */
    'attributes'?: { [key: string]: object; };
}

export const DocsVisionBackOfficeWebClientTasksTreeTasksTableRowGenderEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionBackOfficeWebClientTasksTreeTasksTableRowGenderEnum = typeof DocsVisionBackOfficeWebClientTasksTreeTasksTableRowGenderEnum[keyof typeof DocsVisionBackOfficeWebClientTasksTreeTasksTableRowGenderEnum];
export const DocsVisionBackOfficeWebClientTasksTreeTasksTableRowIndicatorsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionBackOfficeWebClientTasksTreeTasksTableRowIndicatorsEnum = typeof DocsVisionBackOfficeWebClientTasksTreeTasksTableRowIndicatorsEnum[keyof typeof DocsVisionBackOfficeWebClientTasksTreeTasksTableRowIndicatorsEnum];

/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTasksTreeModel
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTasksTreeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTreeModel
     */
    'parentCardId'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTreeModel
     */
    'nodes'?: Array<DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel>;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientTasksTreeTaskTreeEdge>}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTasksTreeModel
     */
    'edges'?: Array<DocsVisionBackOfficeWebClientTasksTreeTaskTreeEdge>;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel
     */
    'creationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel
     */
    'stateDisplayName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel
     */
    'isOverdue'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel
     */
    'noAccess'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel
     */
    'canDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTreeNodeHintModel
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTreeNodeHintModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHintModel
     */
    'stateDisplayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeHintModel
     */
    'stateType'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel
 */
export interface DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel
     */
    'nodeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel
     */
    'parentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel
     */
    'kindId'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientTasksTreeTreeNodeHintModel}
     * @memberof DocsVisionBackOfficeWebClientTasksTreeTreeNodeModel
     */
    'hint'?: DocsVisionBackOfficeWebClientTasksTreeTreeNodeHintModel;
}
/**
 * 
 * @export
 * @interface DocsVisionControllersLayoutControllerModelsGetPartRequestModel
 */
export interface DocsVisionControllersLayoutControllerModelsGetPartRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'controlName'?: string;
    /**
     * Include in response control itself, or only its children.
     * @type {boolean}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'loadOnlyChildren'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'cardId'?: string;
    /**
     * Gets or sets layout selection mode (view, edit, create...)
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsParamModel>}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'layoutParams'?: Array<DocsVisionLayoutWebClientModelsParamModel>;
    /**
     * Gets or sets whether return empty layout if no any layouts was found
     * @type {boolean}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'useEmptyLayoutAsDefault'?: boolean;
    /**
     * Layouts, where current layout loading.
     * @type {Array<string>}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModel
     */
    'parentLayoutIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
 */
export interface DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx {
    /**
     * Control names
     * @type {Array<string>}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'controlNames'?: Array<string>;
    /**
     * Load async extended data sources
     * @type {boolean}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'loadAsyncExtendedDataSources'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'cardId'?: string;
    /**
     * Gets or sets layout selection mode (view, edit, create...)
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsParamModel>}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'layoutParams'?: Array<DocsVisionLayoutWebClientModelsParamModel>;
    /**
     * Gets or sets whether return empty layout if no any layouts was found
     * @type {boolean}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'useEmptyLayoutAsDefault'?: boolean;
    /**
     * Layouts, where current layout loading.
     * @type {Array<string>}
     * @memberof DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx
     */
    'parentLayoutIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionControllersLayoutControllerModelsGetRequestModel
 */
export interface DocsVisionControllersLayoutControllerModelsGetRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetRequestModel
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetRequestModel
     */
    'cardId'?: string;
    /**
     * Gets or sets layout selection mode (view, edit, create...)
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsGetRequestModel
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsParamModel>}
     * @memberof DocsVisionControllersLayoutControllerModelsGetRequestModel
     */
    'layoutParams'?: Array<DocsVisionLayoutWebClientModelsParamModel>;
    /**
     * Gets or sets whether return empty layout if no any layouts was found
     * @type {boolean}
     * @memberof DocsVisionControllersLayoutControllerModelsGetRequestModel
     */
    'useEmptyLayoutAsDefault'?: boolean;
    /**
     * Layouts, where current layout loading.
     * @type {Array<string>}
     * @memberof DocsVisionControllersLayoutControllerModelsGetRequestModel
     */
    'parentLayoutIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionControllersLayoutControllerModelsSaveRequestModel
 */
export interface DocsVisionControllersLayoutControllerModelsSaveRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsSaveRequestModel
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsSaveRequestModel
     */
    'cardId'?: string;
    /**
     * Gets or sets layout selection mode (view, edit, create...)
     * @type {string}
     * @memberof DocsVisionControllersLayoutControllerModelsSaveRequestModel
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsParamModel>}
     * @memberof DocsVisionControllersLayoutControllerModelsSaveRequestModel
     */
    'layoutParams'?: Array<DocsVisionLayoutWebClientModelsParamModel>;
    /**
     * Gets or sets control data
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest>}
     * @memberof DocsVisionControllersLayoutControllerModelsSaveRequestModel
     */
    'bindings'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest>;
    /**
     * Gets or sets control data
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionControllersLayoutControllerModelsSaveRequestModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * Model filling contract agreement card from on contract decision.
 * @export
 * @interface DocsVisionDocumentManagementContractAgreementFillDatesModel
 */
export interface DocsVisionDocumentManagementContractAgreementFillDatesModel {
    /**
     * Date of contract agreement
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractAgreementFillDatesModel
     */
    'reconciliationDate'?: string;
    /**
     * Date of contract signing
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractAgreementFillDatesModel
     */
    'signingDate'?: string;
    /**
     * Contract card id
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractAgreementFillDatesModel
     */
    'contractId'?: string;
    /**
     * Semantic of decision
     * @type {number}
     * @memberof DocsVisionDocumentManagementContractAgreementFillDatesModel
     */
    'decisionSemantics'?: DocsVisionDocumentManagementContractAgreementFillDatesModelDecisionSemanticsEnum;
}

export const DocsVisionDocumentManagementContractAgreementFillDatesModelDecisionSemanticsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;

export type DocsVisionDocumentManagementContractAgreementFillDatesModelDecisionSemanticsEnum = typeof DocsVisionDocumentManagementContractAgreementFillDatesModelDecisionSemanticsEnum[keyof typeof DocsVisionDocumentManagementContractAgreementFillDatesModelDecisionSemanticsEnum];

/**
 * Model for modal window to add new card
 * @export
 * @interface DocsVisionDocumentManagementContractDatesModel
 */
export interface DocsVisionDocumentManagementContractDatesModel {
    /**
     * Date of contract begin
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractDatesModel
     */
    'dateFrom'?: string;
    /**
     * Date of contract end
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractDatesModel
     */
    'dateTo'?: string;
    /**
     * Contract card
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractDatesModel
     */
    'cardId'?: string;
}
/**
 * Model filling contract date.
 * @export
 * @interface DocsVisionDocumentManagementContractFillDateModel
 */
export interface DocsVisionDocumentManagementContractFillDateModel {
    /**
     * Date of contract
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractFillDateModel
     */
    'dateOfContract'?: string;
    /**
     * Contract card id
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractFillDateModel
     */
    'contractId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionDocumentManagementContractFillSumInRubModel
 */
export interface DocsVisionDocumentManagementContractFillSumInRubModel {
    /**
     * Sum in rub
     * @type {number}
     * @memberof DocsVisionDocumentManagementContractFillSumInRubModel
     */
    'sumInRub'?: number;
    /**
     * Contract card id
     * @type {string}
     * @memberof DocsVisionDocumentManagementContractFillSumInRubModel
     */
    'contractId'?: string;
}
/**
 * Model for modal window to add new card
 * @export
 * @interface DocsVisionDocumentManagementContractInfoModel
 */
export interface DocsVisionDocumentManagementContractInfoModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDepartmentDepartmentModel}
     * @memberof DocsVisionDocumentManagementContractInfoModel
     */
    'partnerOrganization'?: DocsVisionBackOfficeWebClientDepartmentDepartmentModel;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsEmployeeDataModel}
     * @memberof DocsVisionDocumentManagementContractInfoModel
     */
    'partnerContactPerson'?: DocsVisionLayoutWebClientModelsEmployeeDataModel;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDepartmentDepartmentModel}
     * @memberof DocsVisionDocumentManagementContractInfoModel
     */
    'organization'?: DocsVisionBackOfficeWebClientDepartmentDepartmentModel;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientEmployeeEmployeeModel}
     * @memberof DocsVisionDocumentManagementContractInfoModel
     */
    'responsible'?: DocsVisionBackOfficeWebClientEmployeeEmployeeModel;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiEntitiesDocumentRecipientData
 */
export interface DocsVisionEdiEntitiesDocumentRecipientData {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiEntitiesDocumentRecipientData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiEntitiesDocumentRecipientData
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiEntitiesSignatureValidation
 */
export interface DocsVisionEdiEntitiesSignatureValidation {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiEntitiesSignatureValidation
     */
    'isValid'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiEntitiesSignatureValidation
     */
    'isCertificateValid'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiEntitiesSignatureValidation
     */
    'signerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiEntitiesSignatureValidation
     */
    'validationError'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionBoolResult
 */
export interface DocsVisionEdiWebClientServerExtensionBoolResult {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionBoolResult
     */
    'result'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionBoolResult
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo
 */
export interface DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo
     */
    'versionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo
     */
    'versionRowId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo
     */
    'signed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo
     */
    'fileContentType'?: DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfoFileContentTypeEnum;
}

export const DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfoFileContentTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfoFileContentTypeEnum = typeof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfoFileContentTypeEnum[keyof typeof DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfoFileContentTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
 */
export interface DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'documentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'documentTimestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'documentDigest'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'isIncoming'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'recipientSpecified'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionEdiEntitiesDocumentRecipientData>}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'recepients'?: Array<DocsVisionEdiEntitiesDocumentRecipientData>;
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo>}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'files'?: Array<DocsVisionEdiWebClientServerExtensionEdiDocumentFileInfo>;
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo>}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo
     */
    'linkedCards'?: Array<DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo>;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest
 */
export interface DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest
     */
    'documentId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionEdiPrintRequest
 */
export interface DocsVisionEdiWebClientServerExtensionEdiPrintRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiPrintRequest
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiPrintRequest
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiPrintRequest
     */
    'xsltAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionEdiPrintRequest
     */
    'xslt'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionFileSyncRequest
 */
export interface DocsVisionEdiWebClientServerExtensionFileSyncRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFileSyncRequest
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFileSyncRequest
     */
    'fileId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionFileToSign
 */
export interface DocsVisionEdiWebClientServerExtensionFileToSign {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFileToSign
     */
    'messageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFileToSign
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFileToSign
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFileToSign
     */
    'signature'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFileToSign
     */
    'powerOfAttorneyId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionFilesResult
 */
export interface DocsVisionEdiWebClientServerExtensionFilesResult {
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionFileToSign>}
     * @memberof DocsVisionEdiWebClientServerExtensionFilesResult
     */
    'files'?: Array<DocsVisionEdiWebClientServerExtensionFileToSign>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionFilesResult
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionInput
 */
export interface DocsVisionEdiWebClientServerExtensionInput {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionInput
     */
    'docId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionInput
     */
    'departmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionInput
     */
    'boxId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionInput
     */
    'certificate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionInput
     */
    'comment'?: string;
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionFileToSign>}
     * @memberof DocsVisionEdiWebClientServerExtensionInput
     */
    'signatures'?: Array<DocsVisionEdiWebClientServerExtensionFileToSign>;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionItemResult
 */
export interface DocsVisionEdiWebClientServerExtensionItemResult {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionItemResult
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionItemResult
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModel
 */
export interface DocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModel
     */
    'parentId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
 */
export interface DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'hasSomeMessages'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'signatureReplyAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'revocationReplyAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'revocationRequestAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'correctionRequestAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'receiptReplyAvailable'?: boolean;
    /**
     * 
     * @type {DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'status'?: DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel
     */
    'messageState'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel
 */
export interface DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel
     */
    'statusText'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel
     */
    'hasValidFormalizedDocument'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel
     */
    'documentSent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel
     */
    'hasSellerSignature'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel
     */
    'hasBuyerReply'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStatusModel
     */
    'hasBuyerSignature'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureRecordInfo
 */
export interface DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureRecordInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureRecordInfo
     */
    'messageCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureRecordInfo
     */
    'logItemId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus
 */
export interface DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus
     */
    'messageCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus
     */
    'logItemId'?: string;
    /**
     * 
     * @type {DocsVisionEdiEntitiesSignatureValidation}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus
     */
    'signatureValidation'?: DocsVisionEdiEntitiesSignatureValidation;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus
     */
    'signatureStatusSymbol'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest
 */
export interface DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest
     */
    'documentCardId'?: string;
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureRecordInfo>}
     * @memberof DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest
     */
    'records'?: Array<DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureRecordInfo>;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest
 */
export interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest
     */
    'powerOfAttroneyCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest
     */
    'departmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest
     */
    'boxId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest
     */
    'registrationMode'?: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequestRegistrationModeEnum;
}

export const DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequestRegistrationModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequestRegistrationModeEnum = typeof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequestRegistrationModeEnum[keyof typeof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequestRegistrationModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus
 */
export interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus
     */
    'userCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus
     */
    'powerOfAttroneyCardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus
     */
    'registrationState'?: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRegistrationStateEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus
     */
    'registrationStateDisplayName'?: string;
}

export const DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRegistrationStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5
} as const;

export type DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRegistrationStateEnum = typeof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRegistrationStateEnum[keyof typeof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRegistrationStateEnum];

/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest
 */
export interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest
     */
    'userCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest
     */
    'powerOfAttroneyCardId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest
 */
export interface DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest
     */
    'userCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest
     */
    'powerOfAttroneyCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest
     */
    'departmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest
     */
    'boxId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsAddCommentRequestModel
 */
export interface DocsVisionLayoutWebClientModelsAddCommentRequestModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel}
     * @memberof DocsVisionLayoutWebClientModelsAddCommentRequestModel
     */
    'dataSourceInfo'?: DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAddCommentRequestModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAddCommentRequestModel
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsAddUrlLinkParams
 */
export interface DocsVisionLayoutWebClientModelsAddUrlLinkParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'allowedLinkTypes'?: Array<string>;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'bindingInfo'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'linkTypeId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'showFilesForLinksTypesIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'fileKindId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAddUrlLinkParams
     */
    'operationId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsAllowedCardKind
 */
export interface DocsVisionLayoutWebClientModelsAllowedCardKind {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAllowedCardKind
     */
    'kindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsAllowedCardKind
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsAllowedCardKind
     */
    'withDescendants'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsCardInfoModel
 */
export interface DocsVisionLayoutWebClientModelsCardInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'typeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'kindId'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStateStateModel}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'state'?: DocsVisionBackOfficeWebClientStateStateModel;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsCreateAsLinkParams}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'createAsLink'?: DocsVisionLayoutWebClientModelsCreateAsLinkParams;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'parentCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'createInFolder'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'createInCurrentFolderForbidden'?: boolean;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLockInfoViewModel}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'lockInfo'?: DocsVisionLayoutWebClientModelsLockInfoViewModel;
    /**
     * 
     * @type {DocsVisionWebClientModelsRelatedCreatorCardInfo}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'relatedCreatorCardInfo'?: DocsVisionWebClientModelsRelatedCreatorCardInfo;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'isArchived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'disabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'reason'?: DocsVisionLayoutWebClientModelsCardInfoModelReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCardInfoModel
     */
    'createDate'?: string;
}

export const DocsVisionLayoutWebClientModelsCardInfoModelReasonEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsCardInfoModelReasonEnum = typeof DocsVisionLayoutWebClientModelsCardInfoModelReasonEnum[keyof typeof DocsVisionLayoutWebClientModelsCardInfoModelReasonEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsCardLayoutParams
 */
export interface DocsVisionLayoutWebClientModelsCardLayoutParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCardLayoutParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCardLayoutParams
     */
    'addToRecent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCardLayoutParams
     */
    'addCardLogMessage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCardLayoutParams
     */
    'markAsRead'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsCardLayoutParams
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsChangeStateDataModel
 */
export interface DocsVisionLayoutWebClientModelsChangeStateDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModel
     */
    'operationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModel
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModel
     */
    'comment'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientModelsOperationFieldInfo}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModel
     */
    'fieldInfo'?: DocsVisionBackOfficeWebClientModelsOperationFieldInfo;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
 */
export interface DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams {
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
     */
    'operationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
     */
    'comment'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
     */
    'timestamp'?: number;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientModelsOperationFieldInfo}
     * @memberof DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams
     */
    'fieldInfo'?: DocsVisionBackOfficeWebClientModelsOperationFieldInfo;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsCheckResult
 */
export interface DocsVisionLayoutWebClientModelsCheckResult {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCheckResult
     */
    'passed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCheckResult
     */
    'failReason'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsChildTaskCommentModel
 */
export interface DocsVisionLayoutWebClientModelsChildTaskCommentModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChildTaskCommentModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChildTaskCommentModel
     */
    'taskName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChildTaskCommentModel
     */
    'stateDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChildTaskCommentModel
     */
    'comment'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsCommonFileModel}
     * @memberof DocsVisionLayoutWebClientModelsChildTaskCommentModel
     */
    'commentFile'?: DocsVisionLayoutWebClientModelsCommonFileModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsChildTaskCommentModel
     */
    'performerDisplayName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsCommentsRequestModel
 */
export interface DocsVisionLayoutWebClientModelsCommentsRequestModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel}
     * @memberof DocsVisionLayoutWebClientModelsCommentsRequestModel
     */
    'dataSourceInfo'?: DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsCommentsRequestModel
     */
    'maxCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsCommonFileModel
 */
export interface DocsVisionLayoutWebClientModelsCommonFileModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCommonFileModel
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCommonFileModel
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCommonFileModel
     */
    'webDavLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCommonFileModel
     */
    'webDavReadonlyLink'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCommonFileModel
     */
    'filePreviewAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCommonFileModel
     */
    'isLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCommonFileModel
     */
    'loadingErrorMessage'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsCreateAsLinkParams
 */
export interface DocsVisionLayoutWebClientModelsCreateAsLinkParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCreateAsLinkParams
     */
    'sourceCardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsCreateAsLinkParams
     */
    'sourceCardTimestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCreateAsLinkParams
     */
    'linkTypeId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionLayoutWebClientModelsCreateAsLinkParams
     */
    'linksBinding'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCreateAsLinkParams
     */
    'saveHardLink'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsCreateAsLinkParams
     */
    'isReport'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsCreateAsLinkParams
     */
    'editOperation'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDataGridControlParams
 */
export interface DocsVisionLayoutWebClientModelsDataGridControlParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDataGridControlParams
     */
    'pluginName'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsDataGridControlParams
     */
    'parameters'?: Array<DocsVisionLayoutWebClientModelsParamModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDataGridControlParams
     */
    'sourceId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDelegateRecord
 */
export interface DocsVisionLayoutWebClientModelsDelegateRecord {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDelegateRecord
     */
    'event'?: DocsVisionLayoutWebClientModelsDelegateRecordEventEnum;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientEmployeeEmployeeModel}
     * @memberof DocsVisionLayoutWebClientModelsDelegateRecord
     */
    'initiator'?: DocsVisionBackOfficeWebClientEmployeeEmployeeModel;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModel>}
     * @memberof DocsVisionLayoutWebClientModelsDelegateRecord
     */
    'performers'?: Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDelegateRecord
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDelegateRecord
     */
    'comment'?: string;
}

export const DocsVisionLayoutWebClientModelsDelegateRecordEventEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionLayoutWebClientModelsDelegateRecordEventEnum = typeof DocsVisionLayoutWebClientModelsDelegateRecordEventEnum[keyof typeof DocsVisionLayoutWebClientModelsDelegateRecordEventEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDelegateRecordsResponse
 */
export interface DocsVisionLayoutWebClientModelsDelegateRecordsResponse {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer>}
     * @memberof DocsVisionLayoutWebClientModelsDelegateRecordsResponse
     */
    'startPerformers'?: Array<DocsVisionBackOfficeWebClientDisplayPerformersDisplayPerformersPerformer>;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsDelegateRecord>}
     * @memberof DocsVisionLayoutWebClientModelsDelegateRecordsResponse
     */
    'records'?: Array<DocsVisionLayoutWebClientModelsDelegateRecord>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDeleteCommentRequestModel
 */
export interface DocsVisionLayoutWebClientModelsDeleteCommentRequestModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel}
     * @memberof DocsVisionLayoutWebClientModelsDeleteCommentRequestModel
     */
    'dataSourceInfo'?: DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDeleteCommentRequestModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDeleteCommentRequestModel
     */
    'commentId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery
 */
export interface DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery
     */
    'searchQuery'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery
     */
    'source'?: DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuerySourceEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery
     */
    'itemTypes'?: DocsVisionLayoutWebClientModelsDepartmentFindInTreeQueryItemTypesEnum;
}

export const DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuerySourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuerySourceEnum = typeof DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuerySourceEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuerySourceEnum];
export const DocsVisionLayoutWebClientModelsDepartmentFindInTreeQueryItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentFindInTreeQueryItemTypesEnum = typeof DocsVisionLayoutWebClientModelsDepartmentFindInTreeQueryItemTypesEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentFindInTreeQueryItemTypesEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentFlatDigest
 */
export interface DocsVisionLayoutWebClientModelsDepartmentFlatDigest {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentFlatDigest
     */
    'data'?: DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentFlatDigest
     */
    'hasChildren'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery
 */
export interface DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery
     */
    'departmentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery
     */
    'source'?: DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuerySourceEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery
     */
    'itemTypes'?: DocsVisionLayoutWebClientModelsDepartmentLoadFlatQueryItemTypesEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery
     */
    'maxCount'?: number;
}

export const DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuerySourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuerySourceEnum = typeof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuerySourceEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuerySourceEnum];
export const DocsVisionLayoutWebClientModelsDepartmentLoadFlatQueryItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentLoadFlatQueryItemTypesEnum = typeof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQueryItemTypesEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentLoadFlatQueryItemTypesEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentLoadFlatResponse
 */
export interface DocsVisionLayoutWebClientModelsDepartmentLoadFlatResponse {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsDepartmentFlatDigest>}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatResponse
     */
    'items'?: Array<DocsVisionLayoutWebClientModelsDepartmentFlatDigest>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatResponse
     */
    'totalItemsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadFlatResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery
 */
export interface DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery
     */
    'parentNodeId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery
     */
    'treeLevelDown'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery
     */
    'source'?: DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuerySourceEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery
     */
    'itemTypes'?: DocsVisionLayoutWebClientModelsDepartmentLoadTreeQueryItemTypesEnum;
}

export const DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuerySourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuerySourceEnum = typeof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuerySourceEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuerySourceEnum];
export const DocsVisionLayoutWebClientModelsDepartmentLoadTreeQueryItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentLoadTreeQueryItemTypesEnum = typeof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQueryItemTypesEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentLoadTreeQueryItemTypesEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem
 */
export interface DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsPartnerSearchInfo}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem
     */
    'searchInfo'?: DocsVisionLayoutWebClientModelsPartnerSearchInfo;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem
     */
    'path'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem
     */
    'data'?: DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem
     */
    'hasChildren'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery
 */
export interface DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery
     */
    'source'?: DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuerySourceEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery
     */
    'itemTypes'?: DocsVisionLayoutWebClientModelsDepartmentSearchFlatQueryItemTypesEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery
     */
    'searchText'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery
     */
    'departmentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery
     */
    'maxCount'?: number;
}

export const DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuerySourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuerySourceEnum = typeof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuerySourceEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuerySourceEnum];
export const DocsVisionLayoutWebClientModelsDepartmentSearchFlatQueryItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentSearchFlatQueryItemTypesEnum = typeof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQueryItemTypesEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentSearchFlatQueryItemTypesEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentSearchFlatResponse
 */
export interface DocsVisionLayoutWebClientModelsDepartmentSearchFlatResponse {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem>}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatResponse
     */
    'items'?: Array<DocsVisionLayoutWebClientModelsDepartmentSearchFlatItem>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchFlatResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDepartmentSearchQuery
 */
export interface DocsVisionLayoutWebClientModelsDepartmentSearchQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchQuery
     */
    'searchText'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchQuery
     */
    'source'?: DocsVisionLayoutWebClientModelsDepartmentSearchQuerySourceEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchQuery
     */
    'itemTypes'?: DocsVisionLayoutWebClientModelsDepartmentSearchQueryItemTypesEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchQuery
     */
    'skipCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDepartmentSearchQuery
     */
    'maxCount'?: number;
}

export const DocsVisionLayoutWebClientModelsDepartmentSearchQuerySourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentSearchQuerySourceEnum = typeof DocsVisionLayoutWebClientModelsDepartmentSearchQuerySourceEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentSearchQuerySourceEnum];
export const DocsVisionLayoutWebClientModelsDepartmentSearchQueryItemTypesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsDepartmentSearchQueryItemTypesEnum = typeof DocsVisionLayoutWebClientModelsDepartmentSearchQueryItemTypesEnum[keyof typeof DocsVisionLayoutWebClientModelsDepartmentSearchQueryItemTypesEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery
 */
export interface DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery
     */
    'rootNodeId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery
     */
    'searchArea'?: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuerySearchAreaEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery
     */
    'currentNodeId'?: string;
}

export const DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuerySearchAreaEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuerySearchAreaEnum = typeof DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuerySearchAreaEnum[keyof typeof DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuerySearchAreaEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery
 */
export interface DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery
     */
    'searchText'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery
     */
    'searchArea'?: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuerySearchAreaEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery
     */
    'rootNodeId'?: string;
}

export const DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuerySearchAreaEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuerySearchAreaEnum = typeof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuerySearchAreaEnum[keyof typeof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuerySearchAreaEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery
 */
export interface DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery
     */
    'searchArea'?: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchAreaEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery
     */
    'rootNodeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery
     */
    'searchQuery'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery
     */
    'searchResultNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery
     */
    'searchMode'?: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchModeEnum;
}

export const DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchAreaEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchAreaEnum = typeof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchAreaEnum[keyof typeof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchAreaEnum];
export const DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchModeEnum = typeof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchModeEnum[keyof typeof DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuerySearchModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsEmployeeDataModel
 */
export interface DocsVisionLayoutWebClientModelsEmployeeDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'isCurrent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'fieldPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'unitId'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'pathInDirectory'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'dataType'?: DocsVisionLayoutWebClientModelsEmployeeDataModelDataTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsEmployeeDataModel
     */
    'status'?: DocsVisionLayoutWebClientModelsEmployeeDataModelStatusEnum;
}

export const DocsVisionLayoutWebClientModelsEmployeeDataModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionLayoutWebClientModelsEmployeeDataModelDataTypeEnum = typeof DocsVisionLayoutWebClientModelsEmployeeDataModelDataTypeEnum[keyof typeof DocsVisionLayoutWebClientModelsEmployeeDataModelDataTypeEnum];
export const DocsVisionLayoutWebClientModelsEmployeeDataModelStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionLayoutWebClientModelsEmployeeDataModelStatusEnum = typeof DocsVisionLayoutWebClientModelsEmployeeDataModelStatusEnum[keyof typeof DocsVisionLayoutWebClientModelsEmployeeDataModelStatusEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsFileListDataModel
 */
export interface DocsVisionLayoutWebClientModelsFileListDataModel {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsLayoutFileModel>}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModel
     */
    'files'?: Array<DocsVisionLayoutWebClientModelsLayoutFileModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModel
     */
    'hasAnySignature'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModel
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsFileListDataModelBase
 */
export interface DocsVisionLayoutWebClientModelsFileListDataModelBase {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModelBase
     */
    'timestamp'?: number;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsLayoutFileModel>}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModelBase
     */
    'files'?: Array<DocsVisionLayoutWebClientModelsLayoutFileModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModelBase
     */
    'hasAnySignature'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsFileListDataModelBase
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsFileListVersionsDataModel
 */
export interface DocsVisionLayoutWebClientModelsFileListVersionsDataModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientFileListVersionedFileModel>}
     * @memberof DocsVisionLayoutWebClientModelsFileListVersionsDataModel
     */
    'versions'?: Array<DocsVisionBackOfficeWebClientFileListVersionedFileModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsFolderDataModel
 */
export interface DocsVisionLayoutWebClientModelsFolderDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsFolderDataModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsFolderDataModel
     */
    'typeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsFolderDataModel
     */
    'viewId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsFolderDataModel
     */
    'highlightingUnread'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsFolderInfoModel
 */
export interface DocsVisionLayoutWebClientModelsFolderInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsFolderInfoModel
     */
    'name'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderTypeInfo}
     * @memberof DocsVisionLayoutWebClientModelsFolderInfoModel
     */
    'typeInfo'?: DocsVisionPlatformWebClientModelsFolderTypeInfo;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewInfo}
     * @memberof DocsVisionLayoutWebClientModelsFolderInfoModel
     */
    'viewInfo'?: DocsVisionPlatformWebClientModelsFolderViewInfo;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsFolderInfoModel
     */
    'highlightingUnread'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsFolderInfoModel
     */
    'canEditFolder'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsFolderInfoModel
     */
    'canCreateSubfolder'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest
 */
export interface DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest
     */
    'transformationAlias'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest
     */
    'taskKindIds'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest
     */
    'includeTasksAllLevels'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsGetFilesQueryOptions
 */
export interface DocsVisionLayoutWebClientModelsGetFilesQueryOptions {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsGetFilesQueryOptions
     */
    'skipCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsGetFilesQueryOptions
     */
    'maxCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsHistorySearchQuery
 */
export interface DocsVisionLayoutWebClientModelsHistorySearchQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'employeeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'eventSearch'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'operationsToHide'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'cacheId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'maxCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsHistorySearchQuery
     */
    'editOperation'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutCardCreateParams
 */
export interface DocsVisionLayoutWebClientModelsLayoutCardCreateParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'kindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'folderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'templateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'parentCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsCreateAsLinkParams}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'createAsLink'?: DocsVisionLayoutWebClientModelsCreateAsLinkParams;
    /**
     * 
     * @type {DocsVisionWebClientModelsRelatedCreatorCardInfo}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'relatedCreatorCardInfo'?: DocsVisionWebClientModelsRelatedCreatorCardInfo;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'sourceLayoutMode'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardCreateParams
     */
    'customContext'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutCardViewModel
 */
export interface DocsVisionLayoutWebClientModelsLayoutCardViewModel {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsCardInfoModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardViewModel
     */
    'cardInfo'?: DocsVisionLayoutWebClientModelsCardInfoModel;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardViewModel
     */
    'layoutModel'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgs
 */
export interface DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgs {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgs
     */
    'deviceType'?: DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgsDeviceTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgs
     */
    'parentLayoutIds'?: Array<string>;
}

export const DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgsDeviceTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgsDeviceTypeEnum = typeof DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgsDeviceTypeEnum[keyof typeof DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgsDeviceTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutFileModel
 */
export interface DocsVisionLayoutWebClientModelsLayoutFileModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'fileId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'isLocked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'isFilePreviewSupported'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'isESExportAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'fileExtension'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientFileListVersionedFileModel>}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'childVersions'?: Array<DocsVisionBackOfficeWebClientFileListVersionedFileModel>;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientFileListVersionedFileModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'currentVersion'?: DocsVisionBackOfficeWebClientFileListVersionedFileModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'hasFileSignature'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'hasFileCertificatedSignature'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'isMain'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'webDavLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'webDavReadonlyLink'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'versionsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLayoutFileModel
     */
    'size'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutKindModel
 */
export interface DocsVisionLayoutWebClientModelsLayoutKindModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutKindModel
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutKindModel
     */
    'kindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutKindModel
     */
    'name'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsLayoutKindModel>}
     * @memberof DocsVisionLayoutWebClientModelsLayoutKindModel
     */
    'kinds'?: Array<DocsVisionLayoutWebClientModelsLayoutKindModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutKindModel
     */
    'notAvailable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutKindModel
     */
    'layoutAvailable'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
 */
export interface DocsVisionLayoutWebClientModelsLayoutLinkCreateParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'sourceCardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'sourceCardTimestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'linkTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'destinationCardId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'linksBinding'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'saveHardLink'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'isReport'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'isFile'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'editOperation'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkCreateParams
     */
    'preventDuplicates'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModel
 */
export interface DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModel {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModel
     */
    'linkDescriptionMode'?: DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModelLinkDescriptionModeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModel
     */
    'text'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLayoutCardViewModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModel
     */
    'layout'?: DocsVisionLayoutWebClientModelsLayoutCardViewModel;
}

export const DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModelLinkDescriptionModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModelLinkDescriptionModeEnum = typeof DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModelLinkDescriptionModeEnum[keyof typeof DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModelLinkDescriptionModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutLinkModel
 */
export interface DocsVisionLayoutWebClientModelsLayoutLinkModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'linkId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'linkTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'linkTypeName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'kind'?: DocsVisionLayoutWebClientModelsLayoutLinkModelKindEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'isDocument'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'cardKindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'fileVersionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'creationDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'authorDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'canDelete'?: boolean;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutLinkModel
     */
    'linkDescription'?: DocsVisionLayoutWebClientModelsLayoutLinkDescriptionModel;
}

export const DocsVisionLayoutWebClientModelsLayoutLinkModelKindEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsLayoutLinkModelKindEnum = typeof DocsVisionLayoutWebClientModelsLayoutLinkModelKindEnum[keyof typeof DocsVisionLayoutWebClientModelsLayoutLinkModelKindEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutPartParams
 */
export interface DocsVisionLayoutWebClientModelsLayoutPartParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutPartParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutPartParams
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutPartParams
     */
    'rootControlName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLayoutPartParams
     */
    'includeRootControl'?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DocsVisionLayoutWebClientModelsLayoutPartParams
     */
    'contextData'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutRowCreateParams
 */
export interface DocsVisionLayoutWebClientModelsLayoutRowCreateParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowCreateParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowCreateParams
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowCreateParams
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowCreateParams
     */
    'parentRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowCreateParams
     */
    'parentTreeRowId'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowCreateParams
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowCreateParams
     */
    'customContext'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutRowViewModel
 */
export interface DocsVisionLayoutWebClientModelsLayoutRowViewModel {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsRowInfoModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowViewModel
     */
    'rowInfo'?: DocsVisionLayoutWebClientModelsRowInfoModel;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutRowViewModel
     */
    'layoutModel'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
 */
export interface DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'allowedLinkTypes'?: Array<string>;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'bindingInfo'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'linkId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'fileKindId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'showFilesForLinksTypesIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'newDescription'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLayoutViewModel
 */
export interface DocsVisionLayoutWebClientModelsLayoutViewModel {
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel}
     * @memberof DocsVisionLayoutWebClientModelsLayoutViewModel
     */
    'layoutModel'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLinksDataModel
 */
export interface DocsVisionLayoutWebClientModelsLinksDataModel {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsLayoutLinkModel>}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'links'?: Array<DocsVisionLayoutWebClientModelsLayoutLinkModel>;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'bindingInfo'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'allowedLinkCardTypes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'allowedLinkTypes'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'linksLoaded'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'totalLinksCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'descriptionColumnViewMode'?: DocsVisionLayoutWebClientModelsLinksDataModelDescriptionColumnViewModeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLinksDataModel
     */
    'descriptionColumnMethodKey'?: string;
}

export const DocsVisionLayoutWebClientModelsLinksDataModelDescriptionColumnViewModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsLinksDataModelDescriptionColumnViewModeEnum = typeof DocsVisionLayoutWebClientModelsLinksDataModelDescriptionColumnViewModeEnum[keyof typeof DocsVisionLayoutWebClientModelsLinksDataModelDescriptionColumnViewModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsLockInfoViewModel
 */
export interface DocsVisionLayoutWebClientModelsLockInfoViewModel {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsLockInfoViewModel
     */
    'isLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsLockInfoViewModel
     */
    'accountName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsMainMenuItemSetting
 */
export interface DocsVisionLayoutWebClientModelsMainMenuItemSetting {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsMainMenuItemSetting
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsMainMenuItemSetting
     */
    'hidden'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsMainMenuSettings
 */
export interface DocsVisionLayoutWebClientModelsMainMenuSettings {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsMainMenuItemSetting>}
     * @memberof DocsVisionLayoutWebClientModelsMainMenuSettings
     */
    'items'?: Array<DocsVisionLayoutWebClientModelsMainMenuItemSetting>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsParamModel
 */
export interface DocsVisionLayoutWebClientModelsParamModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsParamModel
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsParamModel
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerDirectoryItem
 */
export interface DocsVisionLayoutWebClientModelsPartnerDirectoryItem {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectoryItem
     */
    'itemType'?: DocsVisionLayoutWebClientModelsPartnerDirectoryItemItemTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectoryItem
     */
    'data'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectoryItem
     */
    'hasChildren'?: boolean;
}

export const DocsVisionLayoutWebClientModelsPartnerDirectoryItemItemTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsPartnerDirectoryItemItemTypeEnum = typeof DocsVisionLayoutWebClientModelsPartnerDirectoryItemItemTypeEnum[keyof typeof DocsVisionLayoutWebClientModelsPartnerDirectoryItemItemTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem
 */
export interface DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsPartnerSearchInfo}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem
     */
    'searchInfo'?: DocsVisionLayoutWebClientModelsPartnerSearchInfo;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem
     */
    'path'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem
     */
    'itemType'?: DocsVisionLayoutWebClientModelsPartnerDirectorySearchItemItemTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem
     */
    'data'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem
     */
    'hasChildren'?: boolean;
}

export const DocsVisionLayoutWebClientModelsPartnerDirectorySearchItemItemTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsPartnerDirectorySearchItemItemTypeEnum = typeof DocsVisionLayoutWebClientModelsPartnerDirectorySearchItemItemTypeEnum[keyof typeof DocsVisionLayoutWebClientModelsPartnerDirectorySearchItemItemTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerLoadQuery
 */
export interface DocsVisionLayoutWebClientModelsPartnerLoadQuery {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerLoadQuery
     */
    'searchMode'?: DocsVisionLayoutWebClientModelsPartnerLoadQuerySearchModeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsPartnerLoadQuery
     */
    'departmentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerLoadQuery
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerLoadQuery
     */
    'skipDepartments'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerLoadQuery
     */
    'maxCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerLoadQuery
     */
    'refreshToken'?: number;
}

export const DocsVisionLayoutWebClientModelsPartnerLoadQuerySearchModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsPartnerLoadQuerySearchModeEnum = typeof DocsVisionLayoutWebClientModelsPartnerLoadQuerySearchModeEnum[keyof typeof DocsVisionLayoutWebClientModelsPartnerLoadQuerySearchModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery
 */
export interface DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery
     */
    'searchMode'?: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuerySearchModeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery
     */
    'searchText'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery
     */
    'departmentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery
     */
    'skipDepartments'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery
     */
    'maxCount'?: number;
}

export const DocsVisionLayoutWebClientModelsPartnerQuickSearchQuerySearchModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsPartnerQuickSearchQuerySearchModeEnum = typeof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuerySearchModeEnum[keyof typeof DocsVisionLayoutWebClientModelsPartnerQuickSearchQuerySearchModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerQuickSearchResponse
 */
export interface DocsVisionLayoutWebClientModelsPartnerQuickSearchResponse {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsPartnerDirectoryItem>}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchResponse
     */
    'items'?: Array<DocsVisionLayoutWebClientModelsPartnerDirectoryItem>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsPartnerQuickSearchResponse
     */
    'hasMore'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerSearchInfo
 */
export interface DocsVisionLayoutWebClientModelsPartnerSearchInfo {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsPartnerSearchInfo
     */
    'matched'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsPartnerSearchInfo
     */
    'matchedFieldName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsPartnerSearchInfo
     */
    'matchedFieldValue'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerSearchResponse
 */
export interface DocsVisionLayoutWebClientModelsPartnerSearchResponse {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem>}
     * @memberof DocsVisionLayoutWebClientModelsPartnerSearchResponse
     */
    'items'?: Array<DocsVisionLayoutWebClientModelsPartnerDirectorySearchItem>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsPartnerSearchResponse
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerSearchResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsPartnerTreeLoadResponse
 */
export interface DocsVisionLayoutWebClientModelsPartnerTreeLoadResponse {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsPartnerDirectoryItem>}
     * @memberof DocsVisionLayoutWebClientModelsPartnerTreeLoadResponse
     */
    'items'?: Array<DocsVisionLayoutWebClientModelsPartnerDirectoryItem>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerTreeLoadResponse
     */
    'totalItemsCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsPartnerTreeLoadResponse
     */
    'directoryTimestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsQuotesCardQuotes
 */
export interface DocsVisionLayoutWebClientModelsQuotesCardQuotes {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsQuotesCardQuotes
     */
    'cardId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsQuotesCardQuotes
     */
    'hasMore'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsQuotesFileQuotes>}
     * @memberof DocsVisionLayoutWebClientModelsQuotesCardQuotes
     */
    'files'?: Array<DocsVisionLayoutWebClientModelsQuotesFileQuotes>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsQuotesFileQuotes
 */
export interface DocsVisionLayoutWebClientModelsQuotesFileQuotes {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsQuotesFileQuotes
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsQuotesFileQuotes
     */
    'ownerCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsQuotesFileQuotes
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsQuotesFileQuotes
     */
    'fileExtension'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsQuotesFileQuotes
     */
    'link'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsQuotesQuote>}
     * @memberof DocsVisionLayoutWebClientModelsQuotesFileQuotes
     */
    'quotes'?: Array<DocsVisionLayoutWebClientModelsQuotesQuote>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsQuotesFileQuotes
     */
    'hasMore'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsQuotesQuote
 */
export interface DocsVisionLayoutWebClientModelsQuotesQuote {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsQuotesQuotePart>}
     * @memberof DocsVisionLayoutWebClientModelsQuotesQuote
     */
    'parts'?: Array<DocsVisionLayoutWebClientModelsQuotesQuotePart>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsQuotesQuotePart
 */
export interface DocsVisionLayoutWebClientModelsQuotesQuotePart {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsQuotesQuotePart
     */
    'text'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsQuotesQuotePart
     */
    'isMarked'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsRestoreCommentModel
 */
export interface DocsVisionLayoutWebClientModelsRestoreCommentModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel}
     * @memberof DocsVisionLayoutWebClientModelsRestoreCommentModel
     */
    'dataSourceInfo'?: DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRestoreCommentModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRestoreCommentModel
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRestoreCommentModel
     */
    'employeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRestoreCommentModel
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsRowInfoModel
 */
export interface DocsVisionLayoutWebClientModelsRowInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'parentRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'parentTreeRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLockInfoViewModel}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'lockInfo'?: DocsVisionLayoutWebClientModelsLockInfoViewModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'disabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'reason'?: DocsVisionLayoutWebClientModelsRowInfoModelReasonEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowInfoModel
     */
    'createDate'?: string;
}

export const DocsVisionLayoutWebClientModelsRowInfoModelReasonEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsRowInfoModelReasonEnum = typeof DocsVisionLayoutWebClientModelsRowInfoModelReasonEnum[keyof typeof DocsVisionLayoutWebClientModelsRowInfoModelReasonEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsRowLayoutParams
 */
export interface DocsVisionLayoutWebClientModelsRowLayoutParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutParams
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutParams
     */
    'rowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutParams
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutParams
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsRowLayoutPartParams
 */
export interface DocsVisionLayoutWebClientModelsRowLayoutPartParams {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutPartParams
     */
    'rootControlName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutPartParams
     */
    'includeRootControl'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutPartParams
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutPartParams
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutPartParams
     */
    'rowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutPartParams
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsRowLayoutPartParams
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsSaveControlDataModel
 */
export interface DocsVisionLayoutWebClientModelsSaveControlDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'layoutAction'?: DocsVisionLayoutWebClientModelsSaveControlDataModelLayoutActionEnum;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest>}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'bindings'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest>;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsCreateAsLinkParams}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'createAsLink'?: DocsVisionLayoutWebClientModelsCreateAsLinkParams;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'createInFolder'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'parentCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientModelsRelatedCreatorCardInfo}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'relatedCreatorCardInfo'?: DocsVisionWebClientModelsRelatedCreatorCardInfo;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'completeCreation'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionLayoutWebClientModelsSaveControlDataModel
     */
    'customContext'?: object;
}

export const DocsVisionLayoutWebClientModelsSaveControlDataModelLayoutActionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsSaveControlDataModelLayoutActionEnum = typeof DocsVisionLayoutWebClientModelsSaveControlDataModelLayoutActionEnum[keyof typeof DocsVisionLayoutWebClientModelsSaveControlDataModelLayoutActionEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsSaveRowControlDataModel
 */
export interface DocsVisionLayoutWebClientModelsSaveRowControlDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'rowId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'layoutAction'?: DocsVisionLayoutWebClientModelsSaveRowControlDataModelLayoutActionEnum;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest>}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'bindings'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest>;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'completeCreation'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionLayoutWebClientModelsSaveRowControlDataModel
     */
    'customContext'?: object;
}

export const DocsVisionLayoutWebClientModelsSaveRowControlDataModelLayoutActionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionLayoutWebClientModelsSaveRowControlDataModelLayoutActionEnum = typeof DocsVisionLayoutWebClientModelsSaveRowControlDataModelLayoutActionEnum[keyof typeof DocsVisionLayoutWebClientModelsSaveRowControlDataModelLayoutActionEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsSignatureRequest
 */
export interface DocsVisionLayoutWebClientModelsSignatureRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSignatureRequest
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSignatureRequest
     */
    'signatureId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsSignatureRequest
     */
    'signaturePartId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsTableDataCellModel
 */
export interface DocsVisionLayoutWebClientModelsTableDataCellModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTableDataCellModel
     */
    'columnId'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionLayoutWebClientModelsTableDataCellModel
     */
    'value'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsTableDataColumnModel
 */
export interface DocsVisionLayoutWebClientModelsTableDataColumnModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTableDataColumnModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTableDataColumnModel
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsTableDataColumnModel
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsTableDataColumnModel
     */
    'order'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsTableDataColumnModel
     */
    'type'?: DocsVisionLayoutWebClientModelsTableDataColumnModelTypeEnum;
}

export const DocsVisionLayoutWebClientModelsTableDataColumnModelTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionLayoutWebClientModelsTableDataColumnModelTypeEnum = typeof DocsVisionLayoutWebClientModelsTableDataColumnModelTypeEnum[keyof typeof DocsVisionLayoutWebClientModelsTableDataColumnModelTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsTableDataRowModel
 */
export interface DocsVisionLayoutWebClientModelsTableDataRowModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTableDataRowModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTableDataRowModel
     */
    'entityId'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsTableDataCellModel>}
     * @memberof DocsVisionLayoutWebClientModelsTableDataRowModel
     */
    'cells'?: Array<DocsVisionLayoutWebClientModelsTableDataCellModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsTableDataTableModel
 */
export interface DocsVisionLayoutWebClientModelsTableDataTableModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTableDataTableModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTableDataTableModel
     */
    'sourceId'?: string;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsTableDataColumnModel>}
     * @memberof DocsVisionLayoutWebClientModelsTableDataTableModel
     */
    'columns'?: Array<DocsVisionLayoutWebClientModelsTableDataColumnModel>;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsTableDataRowModel>}
     * @memberof DocsVisionLayoutWebClientModelsTableDataTableModel
     */
    'rows'?: Array<DocsVisionLayoutWebClientModelsTableDataRowModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsTaskDataModel
 */
export interface DocsVisionLayoutWebClientModelsTaskDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'kindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'taskName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'viewRouteName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'isGroupTask'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'stateDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'stateClassName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'stateType'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'performerDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'endDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTaskDataModel
     */
    'endDateActual'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsTasksDataModel
 */
export interface DocsVisionLayoutWebClientModelsTasksDataModel {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsTaskDataModel>}
     * @memberof DocsVisionLayoutWebClientModelsTasksDataModel
     */
    'tasks'?: Array<DocsVisionLayoutWebClientModelsTaskDataModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionLayoutWebClientModelsTasksDataModel
     */
    'tasksLoaded'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTasksDataModel
     */
    'taskID'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTasksDataModel
     */
    'taskListId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsTasksDataModel
     */
    'taskKindName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionLayoutWebClientModelsTasksDataModel
     */
    'availableKinds'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsTasksDataModel
     */
    'totalTasksCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsUpdateCommentRequestModel
 */
export interface DocsVisionLayoutWebClientModelsUpdateCommentRequestModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel}
     * @memberof DocsVisionLayoutWebClientModelsUpdateCommentRequestModel
     */
    'dataSourceInfo'?: DocsVisionBackOfficeWebClientCommentsCommentsDataSourceInfoModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsUpdateCommentRequestModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsUpdateCommentRequestModel
     */
    'commentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsUpdateCommentRequestModel
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel
 */
export interface DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel
     */
    'commentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel
     */
    'versionId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel
 */
export interface DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel
     */
    'commentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel
     */
    'versionId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformDataMetadataCardModelCardObject
 */
export interface DocsVisionPlatformDataMetadataCardModelCardObject {
    /**
     * 
     * @type {DocsVisionPlatformDataMetadataCardModelCardObject}
     * @memberof DocsVisionPlatformDataMetadataCardModelCardObject
     */
    'parent'?: DocsVisionPlatformDataMetadataCardModelCardObject;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DocsVisionPlatformDataMetadataCardModelCardObject
     */
    'userData'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformDataMetadataCardModelFieldEnumValue
 */
export interface DocsVisionPlatformDataMetadataCardModelFieldEnumValue {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformDataMetadataCardModelFieldEnumValue
     */
    'name'?: string;
    /**
     * 
     * @type {DocsVisionPlatformDataMetadataCardModelLocalizedString}
     * @memberof DocsVisionPlatformDataMetadataCardModelFieldEnumValue
     */
    'displayName'?: DocsVisionPlatformDataMetadataCardModelLocalizedString;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformDataMetadataCardModelFieldEnumValue
     */
    'value'?: number;
    /**
     * 
     * @type {DocsVisionPlatformDataMetadataCardModelCardObject}
     * @memberof DocsVisionPlatformDataMetadataCardModelFieldEnumValue
     */
    'parent'?: DocsVisionPlatformDataMetadataCardModelCardObject;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DocsVisionPlatformDataMetadataCardModelFieldEnumValue
     */
    'userData'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformDataMetadataCardModelLocalizedString
 */
export interface DocsVisionPlatformDataMetadataCardModelLocalizedString {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DocsVisionPlatformDataMetadataCardModelLocalizedString
     */
    'localizations'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel
 */
export interface DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel
     */
    'cardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsBindingInfo
 */
export interface DocsVisionPlatformWebClientModelsBindingInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsBindingInfo
     */
    'fieldAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsBindingInfo
     */
    'dataSourceResolverId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsBindingInfo
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsBindingInfo
     */
    'propertyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsBindingInfo
     */
    'editOperation'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsCardPresentation
 */
export interface DocsVisionPlatformWebClientModelsCardPresentation {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCardPresentation
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCardPresentation
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCardPresentation
     */
    'typeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCardPresentation
     */
    'kindId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCardPresentation
     */
    'presentationType'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionPlatformWebClientModelsCardPresentation
     */
    'additionalInfo'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsClientLogMessage
 */
export interface DocsVisionPlatformWebClientModelsClientLogMessage {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsClientLogMessage
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsClientLogMessage
     */
    'level'?: DocsVisionPlatformWebClientModelsClientLogMessageLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsClientLogMessage
     */
    'stackTrace'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsClientLogMessage
     */
    'time'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsClientLogMessage
     */
    'employeeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsClientLogMessage
     */
    'currentRoute'?: string;
}

export const DocsVisionPlatformWebClientModelsClientLogMessageLevelEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionPlatformWebClientModelsClientLogMessageLevelEnum = typeof DocsVisionPlatformWebClientModelsClientLogMessageLevelEnum[keyof typeof DocsVisionPlatformWebClientModelsClientLogMessageLevelEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsCommonResponse
 */
export interface DocsVisionPlatformWebClientModelsCommonResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsCommonResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsDiagramRow
 */
export interface DocsVisionPlatformWebClientModelsDiagramRow {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsDiagramRow
     */
    'instanceId'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionPlatformWebClientModelsDiagramRow
     */
    'columnPrimary'?: object;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionPlatformWebClientModelsDiagramRow
     */
    'columnSecondary'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsDigestRow
 */
export interface DocsVisionPlatformWebClientModelsDigestRow {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsDigestRow
     */
    'instanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsDigestRow
     */
    'cardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsDigestRow
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsDigestRow
     */
    'wasRead'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsDigestRow
     */
    'creationDateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsDigestRow
     */
    'changeDateTime'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFileFileCardCommentModel
 */
export interface DocsVisionPlatformWebClientModelsFileFileCardCommentModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardCommentModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardCommentModel
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardCommentModel
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardCommentModel
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardCommentModel
     */
    'authorId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFileFileCardModel
 */
export interface DocsVisionPlatformWebClientModelsFileFileCardModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'fileExtension'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'fileId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'isLocked'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFileFileCardVersionModel>}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'childVersions'?: Array<DocsVisionPlatformWebClientModelsFileFileCardVersionModel>;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFileFileCardVersionModel}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'currentVersion'?: DocsVisionPlatformWebClientModelsFileFileCardVersionModel;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'versionsCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'webDavLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'webDavReadonlyLink'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardModel
     */
    'isFilePreviewSupported'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFileFileCardVersionModel
 */
export interface DocsVisionPlatformWebClientModelsFileFileCardVersionModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardVersionModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardVersionModel
     */
    'versionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardVersionModel
     */
    'versionPath'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardVersionModel
     */
    'versionNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardVersionModel
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardVersionModel
     */
    'creationDate'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFileFileCardCommentModel>}
     * @memberof DocsVisionPlatformWebClientModelsFileFileCardVersionModel
     */
    'comments'?: Array<DocsVisionPlatformWebClientModelsFileFileCardCommentModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderIdentityModel
 */
export interface DocsVisionPlatformWebClientModelsFolderIdentityModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderIdentityModel
     */
    'folderId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderIdentityModel
     */
    'systemFolder'?: DocsVisionPlatformWebClientModelsFolderIdentityModelSystemFolderEnum;
}

export const DocsVisionPlatformWebClientModelsFolderIdentityModelSystemFolderEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionPlatformWebClientModelsFolderIdentityModelSystemFolderEnum = typeof DocsVisionPlatformWebClientModelsFolderIdentityModelSystemFolderEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderIdentityModelSystemFolderEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderTypeInfo
 */
export interface DocsVisionPlatformWebClientModelsFolderTypeInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderTypeInfo
     */
    'folderTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderTypeInfo
     */
    'parentFolderTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderTypeInfo
     */
    'defaultViewId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderTypeInfo
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderTypeInfo
     */
    'highlightUnreadCards'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderTypeInfo>}
     * @memberof DocsVisionPlatformWebClientModelsFolderTypeInfo
     */
    'children'?: Array<DocsVisionPlatformWebClientModelsFolderTypeInfo>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem
 */
export interface DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem
     */
    'aggregationAlias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem
     */
    'stringValue'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewAggregateRangeValues}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem
     */
    'rangeValues'?: DocsVisionPlatformWebClientModelsFolderViewAggregateRangeValues;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewAggregateRangeValues
 */
export interface DocsVisionPlatformWebClientModelsFolderViewAggregateRangeValues {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewAggregateRangeValues
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewAggregateRangeValues
     */
    'to'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewDistinctDiagramValuesModel
 */
export interface DocsVisionPlatformWebClientModelsFolderViewDistinctDiagramValuesModel {
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewDistinctDiagramValuesModel
     */
    'columns'?: Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn>;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewDistinctDiagramValuesModel
     */
    'distinctValues'?: Array<DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel
 */
export interface DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel
     */
    'pageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel
     */
    'currentPage'?: number;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel
     */
    'distinctValues'?: Array<DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn
 */
export interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn
     */
    'width'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn
     */
    'visible'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn
     */
    'order'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
 */
export interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData {
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'columns'?: Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn>;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'listColumns'?: Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsColumn>;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'filters'?: Array<DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem>;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'grouping'?: Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'viewMode'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataViewModeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'searchText'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'searchContextOption'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataSearchContextOptionEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'sortedColumnName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'isDescending'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'disableSorting'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'aggregates'?: Array<DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'useDefaultGrouping'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDevice>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'tablePresentationForDevice'?: Array<DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDevice>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData
     */
    'columnWidthMode'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataColumnWidthModeEnum;
}

export const DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataViewModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataViewModeEnum = typeof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataViewModeEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataViewModeEnum];
export const DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataSearchContextOptionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataSearchContextOptionEnum = typeof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataSearchContextOptionEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataSearchContextOptionEnum];
export const DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataColumnWidthModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataColumnWidthModeEnum = typeof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataColumnWidthModeEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsDataColumnWidthModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsFolderData
 */
export interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsFolderData {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsFolderData
     */
    'viewId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn
 */
export interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn
     */
    'level'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn
     */
    'isDescending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn
     */
    'activeValue'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn
 */
export interface DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn
     */
    'isFilteringAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn
     */
    'columnDisplayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn
     */
    'level'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn
     */
    'isDescending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupDiagramColumn
     */
    'activeValue'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewInfo
 */
export interface DocsVisionPlatformWebClientModelsFolderViewInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewInfo
     */
    'viewId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewInfo
     */
    'isDefaultFolderView'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem
 */
export interface DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem
     */
    'values'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem
     */
    'operation'?: DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemOperationEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItem
     */
    'mode'?: DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemModeEnum;
}

export const DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemOperationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemOperationEnum = typeof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemOperationEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemOperationEnum];
export const DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemModeEnum = typeof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemModeEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderViewQueryFilterItemModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
 */
export interface DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'gridUserSettings'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'folderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'viewId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'saveGridUserSettings'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'folderRefreshTimeout'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'forceVirtualFolderSearch'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'searchId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'refreshView'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'oldStoreId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'locationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest
     */
    'baseCursorId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewSearchParameter
 */
export interface DocsVisionPlatformWebClientModelsFolderViewSearchParameter {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewSearchParameter
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewSearchParameter
     */
    'value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewSearchParameter
     */
    'enabled'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDevice
 */
export interface DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDevice {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDevice
     */
    'tablePresentation'?: DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceTablePresentationEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDevice
     */
    'deviceType'?: DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceDeviceTypeEnum;
}

export const DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceTablePresentationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceTablePresentationEnum = typeof DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceTablePresentationEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceTablePresentationEnum];
export const DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceDeviceTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceDeviceTypeEnum = typeof DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceDeviceTypeEnum[keyof typeof DocsVisionPlatformWebClientModelsFolderViewTablePresentationForDeviceDeviceTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
 */
export interface DocsVisionPlatformWebClientModelsFolderViewViewColumnModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
     */
    'columnName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
     */
    'dateFormat'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
     */
    'system'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
     */
    'caption'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewColumnModel
     */
    'displayAsHTML'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
 */
export interface DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue {
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue>}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
     */
    'children'?: Array<DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
     */
    'columnName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
     */
    'isDescending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
     */
    'value'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
     */
    'rawValue'?: object;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
     */
    'count'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDiagramDistinctValue
     */
    'isLastLevel'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue
 */
export interface DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue
     */
    'columnName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue
     */
    'isDescending'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue
     */
    'value'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue
     */
    'rawValue'?: object;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue
     */
    'count'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFolderViewViewDistinctValue
     */
    'isLastLevel'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFoldersFolderNode
 */
export interface DocsVisionPlatformWebClientModelsFoldersFolderNode {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'additionalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'type'?: DocsVisionPlatformWebClientModelsFoldersFolderNodeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'defaultStyle'?: DocsVisionPlatformWebClientModelsFoldersFolderNodeDefaultStyleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'hasUnloadedSubfolders'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'defaultViewId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'searchId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'targetFolderId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'refreshTimeout'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'showUnreadCounter'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'pagedSecurity'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFoldersFolderNode>}
     * @memberof DocsVisionPlatformWebClientModelsFoldersFolderNode
     */
    'folders'?: Array<DocsVisionPlatformWebClientModelsFoldersFolderNode>;
}

export const DocsVisionPlatformWebClientModelsFoldersFolderNodeTypeEnum = {
    NUMBER_1: 1,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16
} as const;

export type DocsVisionPlatformWebClientModelsFoldersFolderNodeTypeEnum = typeof DocsVisionPlatformWebClientModelsFoldersFolderNodeTypeEnum[keyof typeof DocsVisionPlatformWebClientModelsFoldersFolderNodeTypeEnum];
export const DocsVisionPlatformWebClientModelsFoldersFolderNodeDefaultStyleEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8
} as const;

export type DocsVisionPlatformWebClientModelsFoldersFolderNodeDefaultStyleEnum = typeof DocsVisionPlatformWebClientModelsFoldersFolderNodeDefaultStyleEnum[keyof typeof DocsVisionPlatformWebClientModelsFoldersFolderNodeDefaultStyleEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest
 */
export interface DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest
     */
    'sourceFolderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest
     */
    'destinationFolderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest
     */
    'cardId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsFoldersSelectFolderNode
 */
export interface DocsVisionPlatformWebClientModelsFoldersSelectFolderNode {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsFoldersSelectFolderNode
     */
    'folderId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsFoldersSelectFolderNode
     */
    'withChildren'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'data'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientCardKindCardKindModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'data'?: Array<DocsVisionBackOfficeWebClientCardKindCardKindModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'data'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'data'?: Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsEmployeeDataModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'data'?: Array<DocsVisionLayoutWebClientModelsEmployeeDataModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsAgreementListModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'data'?: DocsVisionApprovalWebClientModelsAgreementListModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsAgreementManagementEditModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'data'?: DocsVisionApprovalWebClientModelsAgreementManagementEditModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsAgreementManagementStartModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'data'?: DocsVisionApprovalWebClientModelsAgreementManagementStartModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsApprovalHistoryViewModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'data'?: DocsVisionApprovalWebClientModelsApprovalHistoryViewModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'data'?: DocsVisionApprovalWebClientModelsApprovalTaskDecisionInfo;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient {
    /**
     * 
     * @type {DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'data'?: DocsVisionApprovalWebClientModelsChildTaskCreateDefaultValues;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient {
    /**
     * 
     * @type {DocsVisionApprovalWebClientSettingsSettingsGraph}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'data'?: DocsVisionApprovalWebClientSettingsSettingsGraph;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientSettingsSettingsGraphDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension {
    /**
     * 
     * @type {DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'data'?: DocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension {
    /**
     * 
     * @type {DocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'data'?: DocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient {
    /**
     * 
     * @type {DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'data'?: DocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCaseLoadResponseDocsVisionArchiveManagementWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient {
    /**
     * 
     * @type {DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'data'?: DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient {
    /**
     * 
     * @type {DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'data'?: DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCardKindCardKindModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'data'?: DocsVisionBackOfficeWebClientCardKindCardKindModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCommentsCommentsModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'data'?: DocsVisionBackOfficeWebClientCommentsCommentsModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'data'?: DocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDepartmentDepartmentModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'data'?: DocsVisionBackOfficeWebClientDepartmentDepartmentModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'data'?: DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'data'?: DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'data'?: DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'data'?: DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'data'?: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'data'?: DocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientHistoryHistorySearchResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'data'?: DocsVisionBackOfficeWebClientHistoryHistorySearchResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientNumeratorNumberInfo}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'data'?: DocsVisionBackOfficeWebClientNumeratorNumberInfo;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'data'?: DocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'data'?: DocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'data'?: DocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'data'?: DocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'data'?: DocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'data'?: DocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'data'?: DocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureAttachSignatureResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureAttachSignatureResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'data'?: DocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureDetailsModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureSignatureDetailsModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureInfoModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureSignatureInfoModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureSignatureModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'data'?: DocsVisionBackOfficeWebClientSignatureSignatureVerificationModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'data'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'data'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'data'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult {
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'data'?: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionDocumentManagementContractDatesModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'data'?: DocsVisionDocumentManagementContractDatesModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionDocumentManagementContractInfoModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'data'?: DocsVisionDocumentManagementContractInfoModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension {
    /**
     * 
     * @type {DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'data'?: DocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension {
    /**
     * 
     * @type {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'data'?: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatus;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsCheckResult}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsCheckResult;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsDelegateRecordsResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsDelegateRecordsResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsDepartmentLoadFlatResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsDepartmentLoadFlatResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsDepartmentSearchFlatResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsDepartmentSearchFlatResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsEmployeeDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsEmployeeDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsFileListDataModelBase}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsFileListDataModelBase;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsFileListDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsFileListDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsFileListVersionsDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsFileListVersionsDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsFolderDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsFolderDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsFolderInfoModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsFolderInfoModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLayoutCardViewModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsLayoutCardViewModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsMainMenuSettings}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsMainMenuSettings;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsPartnerQuickSearchResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsPartnerQuickSearchResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsPartnerSearchResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsPartnerSearchResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsPartnerTreeLoadResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsPartnerTreeLoadResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsQuotesCardQuotes}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsQuotesCardQuotes;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsQuotesFileQuotes}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsQuotesFileQuotes;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsRestoreCommentModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsRestoreCommentModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsTableDataTableModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsTableDataTableModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsTasksDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'data'?: DocsVisionLayoutWebClientModelsTasksDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFileFileCardModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'data'?: DocsVisionPlatformWebClientModelsFileFileCardModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFoldersFolderNode}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'data'?: DocsVisionPlatformWebClientModelsFoldersFolderNode;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'data'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentTreeNode>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'data'?: DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel {
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'data'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientModelsBarcodeSearchResponseModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientModelsBarcodeSearchResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsBarcodeSearchResponseModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientModelsDocumentFilesResponseModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientModelsDocumentFilesResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientModelsEmployeeStatusModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientModelsEmployeeStatusModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientModelsIsHasFileCertificateSignatureModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientModelsIsHasFileCertificateSignatureModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientModelsStaffInfoResponseModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientModelsStaffInfoResponseModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient {
    /**
     * 
     * @type {DocsVisionWebClientServicesSignatureKindSelectionModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'data'?: DocsVisionWebClientServicesSignatureKindSelectionModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsCardDataAccessRuleModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'data'?: Array<DocsVisionWebClientWebApiModelsCardDataAccessRuleModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsCardDataModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'data'?: Array<DocsVisionWebClientWebApiModelsCardDataModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataCollectionModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsCardDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsCardDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardDataModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsCardLibraryModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'data'?: Array<DocsVisionWebClientWebApiModelsCardLibraryModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryCollectionModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsCardLibraryModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsCardLibraryModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardLibraryModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsCardTypeModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'data'?: Array<DocsVisionWebClientWebApiModelsCardTypeModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeCollectionModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsCardTypeModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsCardTypeModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsCardTypeModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsFileDataAccessRuleModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'data'?: Array<DocsVisionWebClientWebApiModelsFileDataAccessRuleModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataAccessRulesModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsFileDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsFileDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFileDataModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsFolderModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'data'?: Array<DocsVisionWebClientWebApiModelsFolderModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderCollectionModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsFolderModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsFolderModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsFolderModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsInfoRowCollectionModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsInfoRowCollectionModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsInfoRowCollectionModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsProcessModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsProcessModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsProcessModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsRowDataModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'data'?: Array<DocsVisionWebClientWebApiModelsRowDataModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataCollectionModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsRowDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsRowDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowDataModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsRowFieldModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsRowFieldModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsRowFieldModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsSectionDataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsSectionDataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionDataModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModelsSectionMetadataModel}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'data'?: DocsVisionWebClientWebApiModelsSectionMetadataModel;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientWebApiModelsSectionMetadataModelDocsVisionWebClientWebApi
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'data'?: DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjectsDataEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjects
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}

export const DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjectsDataEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjectsDataEnum = typeof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjectsDataEnum[keyof typeof DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWorkflowObjectsProcessStateEnumDocsVisionWorkflowObjectsDataEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29 {
    /**
     * 
     * @type {PowersOfAttorneyServerExtensionModelsRequestRevocationResponse}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'data'?: PowersOfAttorneyServerExtensionModelsRequestRevocationResponse;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'data'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemBoolean
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'data'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'data'?: Array<DocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientModelsUniqueAttribute>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'data'?: Array<DocsVisionBackOfficeWebClientModelsUniqueAttribute>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientModelsUniqueAttributeCard>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'data'?: Array<DocsVisionBackOfficeWebClientModelsUniqueAttributeCard>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient {
    /**
     * 
     * @type {Array<DocsVisionApprovalWebClientModelsStageModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'data'?: Array<DocsVisionApprovalWebClientModelsStageModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient {
    /**
     * 
     * @type {Array<DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'data'?: Array<DocsVisionArchiveManagementWebClientModelsYearNomenclatureModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientCardKindCardKindInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'data'?: Array<DocsVisionBackOfficeWebClientCardKindCardKindInfoModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'data'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientLinksLinkType>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'data'?: Array<DocsVisionBackOfficeWebClientLinksLinkType>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel {
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'data'?: Array<DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension {
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'data'?: Array<DocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension {
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'data'?: Array<DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatus>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient {
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsLayoutKindModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'data'?: Array<DocsVisionLayoutWebClientModelsLayoutKindModel>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient {
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderTypeInfo>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'data'?: Array<DocsVisionPlatformWebClientModelsFolderTypeInfo>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient {
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFoldersFolderNode>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'data'?: Array<DocsVisionPlatformWebClientModelsFoldersFolderNode>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'data'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject {
    /**
     * 
     * @type {object}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'data'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
 */
export interface DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'data'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'success'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'timestamp'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'timestampCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'timestampRowId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'serverName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'time'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionPlatformWebClientModelsGenericCommonResponseSystemString
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsIDirectoryItemData
 */
export interface DocsVisionPlatformWebClientModelsIDirectoryItemData {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsIDirectoryItemData
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsIDirectoryItemData
     */
    'dataType'?: DocsVisionPlatformWebClientModelsIDirectoryItemDataDataTypeEnum;
}

export const DocsVisionPlatformWebClientModelsIDirectoryItemDataDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionPlatformWebClientModelsIDirectoryItemDataDataTypeEnum = typeof DocsVisionPlatformWebClientModelsIDirectoryItemDataDataTypeEnum[keyof typeof DocsVisionPlatformWebClientModelsIDirectoryItemDataDataTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsLogInfo
 */
export interface DocsVisionPlatformWebClientModelsLogInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsLogInfo
     */
    'operationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsLogInfo
     */
    'cardId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsOperationModel
 */
export interface DocsVisionPlatformWebClientModelsOperationModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsOperationModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsOperationModel
     */
    'builtInId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsOperationModel
     */
    'caption'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsOperationModel
     */
    'available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsOperationModel
     */
    'alias'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsPagination
 */
export interface DocsVisionPlatformWebClientModelsPagination {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsPagination
     */
    'skip'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsPagination
     */
    'maxCount'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSearchInfo
 */
export interface DocsVisionPlatformWebClientModelsSearchInfo {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSearchInfo
     */
    'matched'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchInfo
     */
    'matchedFieldName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchInfo
     */
    'matchedFieldValue'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSearchRequestModel
 */
export interface DocsVisionPlatformWebClientModelsSearchRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModel
     */
    'searchQueryId'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModel
     */
    'parameters'?: Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModel
     */
    'usePaging'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModel
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModel
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModel
     */
    'instanceId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModel
     */
    'allowedCardTypes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
 */
export interface DocsVisionPlatformWebClientModelsSearchRequestModelDiagram {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'viewId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'columnPrimary'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'columnSecondary'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'searchQueryId'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'parameters'?: Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'usePaging'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'instanceId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionPlatformWebClientModelsSearchRequestModelDiagram
     */
    'allowedCardTypes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSearchResponseModel
 */
export interface DocsVisionPlatformWebClientModelsSearchResponseModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchResponseModel
     */
    'instanceId'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsDigestRow>}
     * @memberof DocsVisionPlatformWebClientModelsSearchResponseModel
     */
    'cards'?: Array<DocsVisionPlatformWebClientModelsDigestRow>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSearchResponseModelDiagram
 */
export interface DocsVisionPlatformWebClientModelsSearchResponseModelDiagram {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSearchResponseModelDiagram
     */
    'instanceId'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsDiagramRow>}
     * @memberof DocsVisionPlatformWebClientModelsSearchResponseModelDiagram
     */
    'cards'?: Array<DocsVisionPlatformWebClientModelsDiagramRow>;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSecurityAccessControlEntry
 */
export interface DocsVisionPlatformWebClientModelsSecurityAccessControlEntry {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsSecurityAccessControlTrustee}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlEntry
     */
    'trustee'?: DocsVisionPlatformWebClientModelsSecurityAccessControlTrustee;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlEntry
     */
    'operationsMask'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlEntry
     */
    'accessQualifier'?: DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAccessQualifierEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlEntry
     */
    'inherited'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlEntry
     */
    'aceFlags'?: DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAceFlagsEnum;
}

export const DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAccessQualifierEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAccessQualifierEnum = typeof DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAccessQualifierEnum[keyof typeof DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAccessQualifierEnum];
export const DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAceFlagsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_64: 64,
    NUMBER_128: 128,
    NUMBER_192: 192
} as const;

export type DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAceFlagsEnum = typeof DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAceFlagsEnum[keyof typeof DocsVisionPlatformWebClientModelsSecurityAccessControlEntryAceFlagsEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSecurityAccessControlTrustee
 */
export interface DocsVisionPlatformWebClientModelsSecurityAccessControlTrustee {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsIDirectoryItemData}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlTrustee
     */
    'directoryItem'?: DocsVisionPlatformWebClientModelsIDirectoryItemData;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlTrustee
     */
    'securityIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessControlTrustee
     */
    'accountName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfo
 */
export interface DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfo
     */
    'displayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfo
     */
    'flag'?: DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfoFlagEnum;
}

export const DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfoFlagEnum = {
    NUMBER_0: 0,
    NUMBER_38: 38,
    NUMBER_65536: 65536,
    NUMBER_131097: 131097,
    NUMBER_917504: 917504,
    NUMBER_983359: 983359
} as const;

export type DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfoFlagEnum = typeof DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfoFlagEnum[keyof typeof DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfoFlagEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSecurityAccessMaskScheme
 */
export interface DocsVisionPlatformWebClientModelsSecurityAccessMaskScheme {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessMaskScheme
     */
    'type'?: DocsVisionPlatformWebClientModelsSecurityAccessMaskSchemeTypeEnum;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfo>}
     * @memberof DocsVisionPlatformWebClientModelsSecurityAccessMaskScheme
     */
    'flags'?: Array<DocsVisionPlatformWebClientModelsSecurityAccessMaskFlagInfo>;
}

export const DocsVisionPlatformWebClientModelsSecurityAccessMaskSchemeTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionPlatformWebClientModelsSecurityAccessMaskSchemeTypeEnum = typeof DocsVisionPlatformWebClientModelsSecurityAccessMaskSchemeTypeEnum[keyof typeof DocsVisionPlatformWebClientModelsSecurityAccessMaskSchemeTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions
 */
export interface DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsSecuritySecurityTarget}
     * @memberof DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions
     */
    'target'?: DocsVisionPlatformWebClientModelsSecuritySecurityTarget;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions
     */
    'enableInheritance'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions
     */
    'preserveInheritedRules'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor
 */
export interface DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsSecuritySecurityTarget}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor
     */
    'target'?: DocsVisionPlatformWebClientModelsSecuritySecurityTarget;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsSecurityAccessMaskScheme}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor
     */
    'accessMaskScheme'?: DocsVisionPlatformWebClientModelsSecurityAccessMaskScheme;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsSecurityAccessControlEntry>}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor
     */
    'accessList'?: Array<DocsVisionPlatformWebClientModelsSecurityAccessControlEntry>;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor
     */
    'inheritanceEnabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor
     */
    'editAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor
     */
    'viewAllowed'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionPlatformWebClientModelsSecuritySecurityTarget
 */
export interface DocsVisionPlatformWebClientModelsSecuritySecurityTarget {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityTarget
     */
    'type'?: DocsVisionPlatformWebClientModelsSecuritySecurityTargetTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityTarget
     */
    'subtype'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityTarget
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityTarget
     */
    'parentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityTarget
     */
    'securityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityTarget
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionPlatformWebClientModelsSecuritySecurityTarget
     */
    'objectType'?: DocsVisionPlatformWebClientModelsSecuritySecurityTargetObjectTypeEnum;
}

export const DocsVisionPlatformWebClientModelsSecuritySecurityTargetTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionPlatformWebClientModelsSecuritySecurityTargetTypeEnum = typeof DocsVisionPlatformWebClientModelsSecuritySecurityTargetTypeEnum[keyof typeof DocsVisionPlatformWebClientModelsSecuritySecurityTargetTypeEnum];
export const DocsVisionPlatformWebClientModelsSecuritySecurityTargetObjectTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DocsVisionPlatformWebClientModelsSecuritySecurityTargetObjectTypeEnum = typeof DocsVisionPlatformWebClientModelsSecuritySecurityTargetObjectTypeEnum[keyof typeof DocsVisionPlatformWebClientModelsSecuritySecurityTargetObjectTypeEnum];

/**
 * Request for GenerateNumber action
 * @export
 * @interface DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest
 */
export interface DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest {
    /**
     * Document card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest
     */
    'cardId'?: string;
    /**
     * Save the number to card or not
     * @type {boolean}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest
     */
    'save'?: boolean;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsBindingInfo}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest
     */
    'info'?: DocsVisionPlatformWebClientModelsBindingInfo;
    /**
     * Id of the rule, that should be used to generate number
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest
     */
    'generationRuleId'?: string;
}
/**
 * Request for ReleaseNumber action
 * @export
 * @interface DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest
 */
export interface DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest
     */
    'cardId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsBindingInfo}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest
     */
    'info'?: DocsVisionPlatformWebClientModelsBindingInfo;
    /**
     * Document number identifier
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest
     */
    'numberId'?: string;
}
/**
 * Request for SendForAcquaintance action
 * @export
 * @interface DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest
 */
export interface DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest
     */
    'cardId'?: string;
    /**
     * Employees that should acquaintance document
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest
     */
    'employeeIds'?: Array<string>;
    /**
     * Departments and organizations that should acquaintance document
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest
     */
    'departmentIds'?: Array<string>;
    /**
     * Groups that should acquaintance document
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest
     */
    'groupIds'?: Array<string>;
    /**
     * Roles that should acquaintance document
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest
     */
    'roleIds'?: Array<string>;
    /**
     * Acquaintance end date
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest
     */
    'endDate'?: string;
}
/**
 * Common request model for working with files
 * @export
 * @interface DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest
 */
export interface DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest {
    /**
     * Owner card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest
     */
    'ownerCardId'?: string;
    /**
     * File card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest
     */
    'fileCardId'?: string;
    /**
     * Timestamp
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest
     */
    'timestamp'?: number;
}
/**
 * Request model for GetComments route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest
 */
export interface DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest {
    /**
     * File card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest
     */
    'fileCardId'?: string;
    /**
     * Version id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest
     */
    'versionId'?: string;
    /**
     * Task or document card, that owns file.
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest
     */
    'ownerCardId'?: string;
}
/**
 * Request model for GetFiles route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest
 */
export interface DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest
     */
    'cardId'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsGetFilesQueryOptions}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest
     */
    'options'?: DocsVisionLayoutWebClientModelsGetFilesQueryOptions;
}
/**
 * Request model for GetVersions route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest
 */
export interface DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest
     */
    'cardId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest
 */
export interface DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest
     */
    'documentFileId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest
     */
    'isMain'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest
     */
    'fileName'?: string;
}
/**
 * Request model for CheckFolderForAvailableCardKind route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest
 */
export interface DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest {
    /**
     * Folder id, where card going to be placed
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest
     */
    'folderId'?: string;
    /**
     * Card id to check
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest
     */
    'cardId'?: string;
}
/**
 * Request model for DetachUserFolders route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest
 */
export interface DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest {
    /**
     * Folders ids to detach
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest
     */
    'folderIds'?: Array<string>;
}
/**
 * Request model for GetFolderInfo route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest
 */
export interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest {
    /**
     * Folder id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest
     */
    'folderId'?: string;
    /**
     * How many levels of subfolders to return with model
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest
     */
    'loadSubfoldersLevel'?: number;
}
/**
 * Request model for GetFolderInfoWithParents route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest
 */
export interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest {
    /**
     * Folder id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest
     */
    'folderId'?: string;
}
/**
 * Request model for GetFolders route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest
 */
export interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest {
    /**
     * folders list
     * @type {Array<DocsVisionPlatformWebClientModelsFoldersSelectFolderNode>}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest
     */
    'selectFolderNodes'?: Array<DocsVisionPlatformWebClientModelsFoldersSelectFolderNode>;
}
/**
 * Request model for GetUserFoldersTreeData route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest
 */
export interface DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest {
    /**
     * Folder id. If value provided, action will return subfolders for specified folder.
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest
     */
    'folderId'?: string;
}
/**
 * Request model for SetFolderSettings route
 * @export
 * @interface DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest
 */
export interface DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest {
    /**
     * Gets or sets folder identifier
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest
     */
    'folderId'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsFolderDataModel}
     * @memberof DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest
     */
    'folderData'?: DocsVisionLayoutWebClientModelsFolderDataModel;
}
/**
 * Request model for CheckReadMainFileAvailable route
 * @export
 * @interface DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest
 */
export interface DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest
     */
    'cardId'?: string;
}
/**
 * Request model for DeleteFile route
 * @export
 * @interface DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
 */
export interface DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'showFilesForLinksTypesIds'?: Array<string>;
    /**
     * Document (that containts file with FileCardId) card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'documentCardId'?: string;
    /**
     * File card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'fileCardId'?: string;
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'cardId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'info'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * Allowed link types
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'allowedLinkTypes'?: Array<string>;
    /**
     * Link id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'linkId'?: string;
    /**
     * Kind id for file cards
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'fileKindId'?: string;
    /**
     * Card timestamp
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest
     */
    'timestamp'?: number;
}
/**
 * Request model for DeleteLink route
 * @export
 * @interface DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
 */
export interface DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
     */
    'showFilesForLinksTypesIds'?: Array<string>;
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
     */
    'cardId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
     */
    'info'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * Allowed link types
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
     */
    'allowedLinkTypes'?: Array<string>;
    /**
     * Link id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
     */
    'linkId'?: string;
    /**
     * Kind id for file cards
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
     */
    'fileKindId'?: string;
    /**
     * Card timestamp
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest
     */
    'timestamp'?: number;
}
/**
 * Request model for GetLinks route
 * @export
 * @interface DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
 */
export interface DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
     */
    'cardId'?: string;
    /**
     * Kind id for file cards
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
     */
    'fileKindId'?: string;
    /**
     * Show files for following links types
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
     */
    'showFilesForLinksTypesIds'?: Array<string>;
    /**
     * Allowed link types
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
     */
    'allowedLinkTypes'?: Array<string>;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
     */
    'bindingInfo'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * Column view mode
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
     */
    'columnViewMode'?: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequestColumnViewModeEnum;
    /**
     * Column view extension
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest
     */
    'columnViewExtensionName'?: string;
}

export const DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequestColumnViewModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequestColumnViewModeEnum = typeof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequestColumnViewModeEnum[keyof typeof DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequestColumnViewModeEnum];

/**
 * File card model with certificate info
 * @export
 * @interface DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
 */
export interface DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo {
    /**
     * Certificate\'s friendly name
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'friendlyName'?: string;
    /**
     * Certificate\'s issuer
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'issuer'?: string;
    /**
     * Certificate\'s subject
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'subject'?: string;
    /**
     * Certificate valid from
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'notBefore'?: string;
    /**
     * Certificate valid until
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'notAfter'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'fileExtension'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'fileId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'isLocked'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFileFileCardVersionModel>}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'childVersions'?: Array<DocsVisionPlatformWebClientModelsFileFileCardVersionModel>;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFileFileCardVersionModel}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'currentVersion'?: DocsVisionPlatformWebClientModelsFileFileCardVersionModel;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'versionsCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'webDavLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'webDavReadonlyLink'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo
     */
    'isFilePreviewSupported'?: boolean;
}
/**
 * Model, that keeps response data about departments list
 * @export
 * @interface DocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponse
 */
export interface DocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponse {
    /**
     * List of department items
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponse
     */
    'items'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentModel>;
    /**
     * If there are more items (for pagination)
     * @type {boolean}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponse
     */
    'hasMore'?: boolean;
}
/**
 * Request model for Find action
 * @export
 * @interface DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
 */
export interface DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest {
    /**
     * Search term
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
     */
    'term'?: string;
    /**
     * Some unique id, describing place in UI, where value selection performed
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
     */
    'kindId'?: string;
    /**
     * How many records request should return
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
     */
    'maxCount'?: number;
    /**
     * How many records client already has from previous requests
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
     */
    'skip'?: number;
    /**
     * Restricts results to specified unit when is not null.
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
     */
    'unitId'?: string;
    /**
     * List of id of employees, that should be filtered from result list.
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
     */
    'skipEmployees'?: Array<string>;
    /**
     * Filter mode
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest
     */
    'filterMode'?: DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequestFilterModeEnum;
}

export const DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequestFilterModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequestFilterModeEnum = typeof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequestFilterModeEnum[keyof typeof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequestFilterModeEnum];

/**
 * Response model for Find action
 * @export
 * @interface DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponse
 */
export interface DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponse {
    /**
     * Search result
     * @type {Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModel>}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponse
     */
    'employees'?: Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModel>;
    /**
     * Pagination logic
     * @type {boolean}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponse
     */
    'hasMore'?: boolean;
}
/**
 * Get departments info request model
 * @export
 * @interface DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel
 */
export interface DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel {
    /**
     * Gets or sets department ids
     * @type {Array<string>}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel
     */
    'departmentIds'?: Array<string>;
    /**
     * Gets or sets source
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel
     */
    'source'?: DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModelSourceEnum;
}

export const DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModelSourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModelSourceEnum = typeof DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModelSourceEnum[keyof typeof DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModelSourceEnum];

/**
 * Request model for Find action
 * @export
 * @interface DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest
 */
export interface DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest
     */
    'departmentId'?: string;
    /**
     * Staff or partner department
     * @type {number}
     * @memberof DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest
     */
    'source'?: DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequestSourceEnum;
}

export const DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequestSourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequestSourceEnum = typeof DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequestSourceEnum[keyof typeof DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequestSourceEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelBindingMetadata
 */
export interface DocsVisionWebClientLibraryObjectModelBindingMetadata {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingMetadata
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingMetadata
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelBindingResult
 */
export interface DocsVisionWebClientLibraryObjectModelBindingResult {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'name'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelBindingMetadata>}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'metadata'?: Array<DocsVisionWebClientLibraryObjectModelBindingMetadata>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'values'?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'value'?: object;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'editOperation'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'extendedDataSourceCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'extendedDataSourceSectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelBindingResult
     */
    'extendedDataSourceRowId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo
 */
export interface DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo
     */
    'dataSourceResolverId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo
     */
    'sectionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo
     */
    'fieldAlias'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest
 */
export interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest
     */
    'controlName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest
     */
    'controlTypeName'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelBindingResult>}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelBindingsWriteRequest
     */
    'bindingResults'?: Array<DocsVisionWebClientLibraryObjectModelBindingResult>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel
 */
export interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel
     */
    'controlTypeName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel
     */
    'isAsync'?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel
     */
    'properties'?: { [key: string]: object; };
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel>}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel
     */
    'children'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelILayoutViewModel
 */
export interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelILayoutViewModel {
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelILayoutViewModel
     */
    'layoutModel'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
 */
export interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel {
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'type'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'action'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelActionEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'layoutMode'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'deviceType'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelDeviceTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'localeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'instanceId'?: string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsOperationModel>}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'operations'?: Array<DocsVisionPlatformWebClientModelsOperationModel>;
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
}

export const DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelTypeEnum = typeof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelTypeEnum[keyof typeof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelTypeEnum];
export const DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelActionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelActionEnum = typeof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelActionEnum[keyof typeof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelActionEnum];
export const DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelDeviceTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelDeviceTypeEnum = typeof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelDeviceTypeEnum[keyof typeof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModelDeviceTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel
 */
export interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel {
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel
     */
    'layoutInfo'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutInfoModel;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel
     */
    'extendedDataSourceInfos'?: Array<DocsVisionPlatformWebClientExtendedDataSourcesExtendedDataSourceInfoModel>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel
     */
    'controlTypeName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel
     */
    'isAsync'?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel
     */
    'properties'?: { [key: string]: object; };
    /**
     * 
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel>}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModel
     */
    'children'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelControlModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel
 */
export interface DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel
     */
    'value'?: string;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsAddTaskCommentsRequestModel
 */
export interface DocsVisionWebClientModelsAddTaskCommentsRequestModel {
    /**
     * Id of the task card.
     * @type {string}
     * @memberof DocsVisionWebClientModelsAddTaskCommentsRequestModel
     */
    'taskId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionWebClientModelsAddTaskCommentsRequestModel
     */
    'commentBinding'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionWebClientModelsAddTaskCommentsRequestModel
     */
    'commentFileBinding'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * Comment text to add
     * @type {string}
     * @memberof DocsVisionWebClientModelsAddTaskCommentsRequestModel
     */
    'comment'?: string;
    /**
     * Comment file to add.
     * @type {string}
     * @memberof DocsVisionWebClientModelsAddTaskCommentsRequestModel
     */
    'commentFileId'?: string;
}
/**
 * Represents a model for BarcodeSearchButtonController.Search
 * @export
 * @interface DocsVisionWebClientModelsBarcodeSearchRequestModel
 */
export interface DocsVisionWebClientModelsBarcodeSearchRequestModel {
    /**
     * String value of Barcode
     * @type {string}
     * @memberof DocsVisionWebClientModelsBarcodeSearchRequestModel
     */
    'barcode'?: string;
}
/**
 * Request for getting cardid by barcode
 * @export
 * @interface DocsVisionWebClientModelsBarcodeSearchResponseModel
 */
export interface DocsVisionWebClientModelsBarcodeSearchResponseModel {
    /**
     * Card id to get info
     * @type {string}
     * @memberof DocsVisionWebClientModelsBarcodeSearchResponseModel
     */
    'cardId'?: string;
}
/**
 * Represents a model for BusinessCalendarController.GetDuration
 * @export
 * @interface DocsVisionWebClientModelsCalendarDurationRequestModel
 */
export interface DocsVisionWebClientModelsCalendarDurationRequestModel {
    /**
     * What calendar use to calculate value
     * @type {Array<DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource>}
     * @memberof DocsVisionWebClientModelsCalendarDurationRequestModel
     */
    'calendarSources'?: Array<DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource>;
    /**
     * Date of the start of the period
     * @type {string}
     * @memberof DocsVisionWebClientModelsCalendarDurationRequestModel
     */
    'startDate'?: string;
    /**
     * Date of the end of the period
     * @type {string}
     * @memberof DocsVisionWebClientModelsCalendarDurationRequestModel
     */
    'endDate'?: string;
}
/**
 * Represents a model for BusinessCalendarController.GetDuration
 * @export
 * @interface DocsVisionWebClientModelsCalendarEndDateRequestModel
 */
export interface DocsVisionWebClientModelsCalendarEndDateRequestModel {
    /**
     * What calendar use to calculate value
     * @type {Array<DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource>}
     * @memberof DocsVisionWebClientModelsCalendarEndDateRequestModel
     */
    'calendarSources'?: Array<DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource>;
    /**
     * Date of the start of the period
     * @type {string}
     * @memberof DocsVisionWebClientModelsCalendarEndDateRequestModel
     */
    'startDate'?: string;
    /**
     * Duration of the period
     * @type {number}
     * @memberof DocsVisionWebClientModelsCalendarEndDateRequestModel
     */
    'duration'?: number;
}
/**
 * Represents a model for BusinessCalendarController/GetWorkTimeSettings
 * @export
 * @interface DocsVisionWebClientModelsCalendarRequestModel
 */
export interface DocsVisionWebClientModelsCalendarRequestModel {
    /**
     * Restrict result with specified year only
     * @type {number}
     * @memberof DocsVisionWebClientModelsCalendarRequestModel
     */
    'year'?: number;
    /**
     * Restrict result with specified day only
     * @type {number}
     * @memberof DocsVisionWebClientModelsCalendarRequestModel
     */
    'day'?: number;
}
/**
 * Represents a model for BusinessCalendarController.GetDuration
 * @export
 * @interface DocsVisionWebClientModelsCalendarStartDateRequestModel
 */
export interface DocsVisionWebClientModelsCalendarStartDateRequestModel {
    /**
     * What calendar use to calculate value
     * @type {Array<DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource>}
     * @memberof DocsVisionWebClientModelsCalendarStartDateRequestModel
     */
    'calendarSources'?: Array<DocsVisionBackOfficeWebClientBusinessCalendarBusinessCalendarSource>;
    /**
     * Date of the end of the period
     * @type {string}
     * @memberof DocsVisionWebClientModelsCalendarStartDateRequestModel
     */
    'endDate'?: string;
    /**
     * Duration of the period
     * @type {number}
     * @memberof DocsVisionWebClientModelsCalendarStartDateRequestModel
     */
    'duration'?: number;
}
/**
 * Request model for card list
 * @export
 * @interface DocsVisionWebClientModelsCardListRequestModel
 */
export interface DocsVisionWebClientModelsCardListRequestModel {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest}
     * @memberof DocsVisionWebClientModelsCardListRequestModel
     */
    'folderViewRequest'?: DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest;
    /**
     * Search params
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>}
     * @memberof DocsVisionWebClientModelsCardListRequestModel
     */
    'parameters'?: Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>;
    /**
     * Instance id
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListRequestModel
     */
    'instanceId'?: string;
    /**
     * Device type
     * @type {number}
     * @memberof DocsVisionWebClientModelsCardListRequestModel
     */
    'deviceType'?: DocsVisionWebClientModelsCardListRequestModelDeviceTypeEnum;
    /**
     * Need use old grid.
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsCardListRequestModel
     */
    'useOldGrid'?: boolean;
    /**
     * For case, when several folders are loading (dashboard widgets)
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsCardListRequestModel
     */
    'skipCursorSaving'?: boolean;
}

export const DocsVisionWebClientModelsCardListRequestModelDeviceTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientModelsCardListRequestModelDeviceTypeEnum = typeof DocsVisionWebClientModelsCardListRequestModelDeviceTypeEnum[keyof typeof DocsVisionWebClientModelsCardListRequestModelDeviceTypeEnum];

/**
 * Defines data used to build card list view in WebClient
 * @export
 * @interface DocsVisionWebClientModelsCardListViewModel
 */
export interface DocsVisionWebClientModelsCardListViewModel {
    /**
     * Card list header text
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'headerText'?: string;
    /**
     * Card list parent header text
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'parentHeaderText'?: string;
    /**
     * Current view name
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'currentViewName'?: string;
    /**
     * Default folder view style
     * @type {number}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'defaultStyle'?: DocsVisionWebClientModelsCardListViewModelDefaultStyleEnum;
    /**
     * Url for DefaultStyle.FolderURL, when folder displayed as web page.
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'folderUrl'?: string;
    /**
     * 
     * @type {DocsVisionWebClientModelsGridGridViewModel}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'gridModel'?: DocsVisionWebClientModelsGridGridViewModel;
    /**
     * Are some batch operations available for the folder.
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'hasBatchOperations'?: boolean;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLayoutViewModel}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'gridLayout'?: DocsVisionLayoutWebClientModelsLayoutViewModel;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLayoutViewModel}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'searchParametersLayout'?: DocsVisionLayoutWebClientModelsLayoutViewModel;
    /**
     * Current session id.
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'fullTextSearchSessionId'?: string;
    /**
     * Gets or sets folder identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'folderId'?: string;
    /**
     * Gets or sets view identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'viewId'?: string;
    /**
     * Gets or sets search identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'searchId'?: string;
    /**
     * Gets or sets instanceId
     * @type {string}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'instanceId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData}
     * @memberof DocsVisionWebClientModelsCardListViewModel
     */
    'gridUserSettings'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData;
}

export const DocsVisionWebClientModelsCardListViewModelDefaultStyleEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_15: 15
} as const;

export type DocsVisionWebClientModelsCardListViewModelDefaultStyleEnum = typeof DocsVisionWebClientModelsCardListViewModelDefaultStyleEnum[keyof typeof DocsVisionWebClientModelsCardListViewModelDefaultStyleEnum];

/**
 * Set certificate request
 * @export
 * @interface DocsVisionWebClientModelsCertificateSetCertificateRequest
 */
export interface DocsVisionWebClientModelsCertificateSetCertificateRequest {
    /**
     * Certificate\'s name
     * @type {string}
     * @memberof DocsVisionWebClientModelsCertificateSetCertificateRequest
     */
    'name'?: string;
    /**
     * Certificate\'s content
     * @type {string}
     * @memberof DocsVisionWebClientModelsCertificateSetCertificateRequest
     */
    'content'?: string;
    /**
     * Certificate user id
     * @type {string}
     * @memberof DocsVisionWebClientModelsCertificateSetCertificateRequest
     */
    'employeeId'?: string;
}
/**
 * Describes a check access rights request model
 * @export
 * @interface DocsVisionWebClientModelsCheckAccessRightsRequestModel
 */
export interface DocsVisionWebClientModelsCheckAccessRightsRequestModel {
    /**
     * Gets or sets secure object type
     * @type {number}
     * @memberof DocsVisionWebClientModelsCheckAccessRightsRequestModel
     */
    'secureObjectType'?: DocsVisionWebClientModelsCheckAccessRightsRequestModelSecureObjectTypeEnum;
    /**
     * Gets or sets card data rights
     * @type {number}
     * @memberof DocsVisionWebClientModelsCheckAccessRightsRequestModel
     */
    'cardDataRights'?: DocsVisionWebClientModelsCheckAccessRightsRequestModelCardDataRightsEnum;
    /**
     * Gets or sets object id
     * @type {string}
     * @memberof DocsVisionWebClientModelsCheckAccessRightsRequestModel
     */
    'objectId'?: string;
    /**
     * Gets or sets parent id
     * @type {string}
     * @memberof DocsVisionWebClientModelsCheckAccessRightsRequestModel
     */
    'parentId'?: string;
}

export const DocsVisionWebClientModelsCheckAccessRightsRequestModelSecureObjectTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DocsVisionWebClientModelsCheckAccessRightsRequestModelSecureObjectTypeEnum = typeof DocsVisionWebClientModelsCheckAccessRightsRequestModelSecureObjectTypeEnum[keyof typeof DocsVisionWebClientModelsCheckAccessRightsRequestModelSecureObjectTypeEnum];
export const DocsVisionWebClientModelsCheckAccessRightsRequestModelCardDataRightsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_38: 38,
    NUMBER_256: 256,
    NUMBER_319: 319,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983359: 983359,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionWebClientModelsCheckAccessRightsRequestModelCardDataRightsEnum = typeof DocsVisionWebClientModelsCheckAccessRightsRequestModelCardDataRightsEnum[keyof typeof DocsVisionWebClientModelsCheckAccessRightsRequestModelCardDataRightsEnum];

/**
 * Request, which contains collection of entities by list of guids
 * @export
 * @interface DocsVisionWebClientModelsCollectionRequestModel
 */
export interface DocsVisionWebClientModelsCollectionRequestModel {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsCollectionRequestModel
     */
    'collection'?: Array<string>;
}
/**
 * Request, which contains collection of entities
 * @export
 * @interface DocsVisionWebClientModelsCollectionRequestModelOfSystemString
 */
export interface DocsVisionWebClientModelsCollectionRequestModelOfSystemString {
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsCollectionRequestModelOfSystemString
     */
    'collection'?: Array<string>;
}
/**
 * CompletionOptionRequestModel
 * @export
 * @interface DocsVisionWebClientModelsCompletionOptionRequestModel
 */
export interface DocsVisionWebClientModelsCompletionOptionRequestModel {
    /**
     * Gets or sets completion option identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsCompletionOptionRequestModel
     */
    'id'?: string;
    /**
     * Gets or sets value indicated whether has report filed in completion option
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsCompletionOptionRequestModel
     */
    'hasReportFieldInCompletionOption'?: boolean;
    /**
     * Gets attributes collection
     * @type {Array<DocsVisionWebClientModelsCompletionParameterRequestModel>}
     * @memberof DocsVisionWebClientModelsCompletionOptionRequestModel
     */
    'parameters'?: Array<DocsVisionWebClientModelsCompletionParameterRequestModel>;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientModelsOperationFieldInfo}
     * @memberof DocsVisionWebClientModelsCompletionOptionRequestModel
     */
    'fieldInfo'?: DocsVisionBackOfficeWebClientModelsOperationFieldInfo;
}
/**
 * CompletionParameterRequestModel
 * @export
 * @interface DocsVisionWebClientModelsCompletionParameterRequestModel
 */
export interface DocsVisionWebClientModelsCompletionParameterRequestModel {
    /**
     * Gets or sets field name
     * @type {string}
     * @memberof DocsVisionWebClientModelsCompletionParameterRequestModel
     */
    'name'?: string;
    /**
     * Gets or sets value
     * @type {string}
     * @memberof DocsVisionWebClientModelsCompletionParameterRequestModel
     */
    'value'?: string;
    /**
     * Gets or sets id
     * @type {string}
     * @memberof DocsVisionWebClientModelsCompletionParameterRequestModel
     */
    'id'?: string;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsCreateChildTasksRequestModel
 */
export interface DocsVisionWebClientModelsCreateChildTasksRequestModel {
    /**
     * Id of the task card.
     * @type {string}
     * @memberof DocsVisionWebClientModelsCreateChildTasksRequestModel
     */
    'taskId'?: string;
    /**
     * Id of the kind id.
     * @type {string}
     * @memberof DocsVisionWebClientModelsCreateChildTasksRequestModel
     */
    'kindId'?: string;
    /**
     * Child tasks name
     * @type {string}
     * @memberof DocsVisionWebClientModelsCreateChildTasksRequestModel
     */
    'name'?: string;
    /**
     * Child tasks description
     * @type {string}
     * @memberof DocsVisionWebClientModelsCreateChildTasksRequestModel
     */
    'description'?: string;
    /**
     * Time to execute
     * @type {string}
     * @memberof DocsVisionWebClientModelsCreateChildTasksRequestModel
     */
    'executionDate'?: string;
    /**
     * Staff employees to become performers of the created tasks. One task per performer will be created.
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsCreateChildTasksRequestModel
     */
    'performers'?: Array<string>;
}
/**
 * Request model for LayoutFolder\\CreateSubfolderRequest route
 * @export
 * @interface DocsVisionWebClientModelsCreateSubfolderRequestModel
 */
export interface DocsVisionWebClientModelsCreateSubfolderRequestModel {
    /**
     * Gets or sets parent folder identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsCreateSubfolderRequestModel
     */
    'parentFolderId'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsFolderDataModel}
     * @memberof DocsVisionWebClientModelsCreateSubfolderRequestModel
     */
    'folderData'?: DocsVisionLayoutWebClientModelsFolderDataModel;
}
/**
 * Represents delete card request model
 * @export
 * @interface DocsVisionWebClientModelsDeleteCardRequestModel
 */
export interface DocsVisionWebClientModelsDeleteCardRequestModel {
    /**
     * Gets or sets card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsDeleteCardRequestModel
     */
    'cardId'?: string;
    /**
     * Gets or sets whether delete the card permanently
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsDeleteCardRequestModel
     */
    'permanent'?: boolean;
    /**
     * Gets or sets parent card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsDeleteCardRequestModel
     */
    'parentCardId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientModelsRelatedCreatorCardInfo}
     * @memberof DocsVisionWebClientModelsDeleteCardRequestModel
     */
    'relatedCreatorCardInfo'?: DocsVisionWebClientModelsRelatedCreatorCardInfo;
    /**
     * Card is new
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsDeleteCardRequestModel
     */
    'isNew'?: boolean;
}
/**
 * Model with row identity.
 * @export
 * @interface DocsVisionWebClientModelsDeleteRowModel
 */
export interface DocsVisionWebClientModelsDeleteRowModel {
    /**
     * Card, where row located
     * @type {string}
     * @memberof DocsVisionWebClientModelsDeleteRowModel
     */
    'cardId'?: string;
    /**
     * Section of the row
     * @type {string}
     * @memberof DocsVisionWebClientModelsDeleteRowModel
     */
    'sectionId'?: string;
    /**
     * Row id
     * @type {string}
     * @memberof DocsVisionWebClientModelsDeleteRowModel
     */
    'rowId'?: string;
    /**
     * Parent row id for receiving it timestamp.
     * @type {string}
     * @memberof DocsVisionWebClientModelsDeleteRowModel
     */
    'parentRowId'?: string;
    /**
     * Parent row section id for receiving it timestamp.
     * @type {string}
     * @memberof DocsVisionWebClientModelsDeleteRowModel
     */
    'parentRowSectionId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsDeleteRowModel
     */
    'isCreationCancel'?: boolean;
}
/**
 * Represents a model for DisableCardController/DisableCardEx
 * @export
 * @interface DocsVisionWebClientModelsDisableCardExRequestModel
 */
export interface DocsVisionWebClientModelsDisableCardExRequestModel {
    /**
     * Disabled card ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsDisableCardExRequestModel
     */
    'cardId'?: string;
    /**
     * Disabled card reasons
     * @type {number}
     * @memberof DocsVisionWebClientModelsDisableCardExRequestModel
     */
    'reason'?: DocsVisionWebClientModelsDisableCardExRequestModelReasonEnum;
}

export const DocsVisionWebClientModelsDisableCardExRequestModelReasonEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientModelsDisableCardExRequestModelReasonEnum = typeof DocsVisionWebClientModelsDisableCardExRequestModelReasonEnum[keyof typeof DocsVisionWebClientModelsDisableCardExRequestModelReasonEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
 */
export interface DocsVisionWebClientModelsDistinctValuesDiagramRequestModel {
    /**
     * Gets or sets Folder ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
     */
    'folderId'?: string;
    /**
     * Gets or sets View ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
     */
    'viewId'?: string;
    /**
     * Gets or sets Diagram type
     * @type {number}
     * @memberof DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
     */
    'diagramType'?: DocsVisionWebClientModelsDistinctValuesDiagramRequestModelDiagramTypeEnum;
    /**
     * Gets or sets
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>}
     * @memberof DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
     */
    'grouping'?: Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>;
    /**
     * Gets or sets Cursor ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
     */
    'cursorId'?: string;
    /**
     * Gets or sets page number
     * @type {number}
     * @memberof DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
     */
    'pageNumber'?: number;
    /**
     * Gets or sets page size
     * @type {number}
     * @memberof DocsVisionWebClientModelsDistinctValuesDiagramRequestModel
     */
    'pageSize'?: number;
}

export const DocsVisionWebClientModelsDistinctValuesDiagramRequestModelDiagramTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionWebClientModelsDistinctValuesDiagramRequestModelDiagramTypeEnum = typeof DocsVisionWebClientModelsDistinctValuesDiagramRequestModelDiagramTypeEnum[keyof typeof DocsVisionWebClientModelsDistinctValuesDiagramRequestModelDiagramTypeEnum];

/**
 * Request model for distinct values
 * @export
 * @interface DocsVisionWebClientModelsDistinctValuesRequestModel
 */
export interface DocsVisionWebClientModelsDistinctValuesRequestModel {
    /**
     * Gets or sets
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>}
     * @memberof DocsVisionWebClientModelsDistinctValuesRequestModel
     */
    'grouping'?: Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>;
    /**
     * Gets or sets Cursor ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsDistinctValuesRequestModel
     */
    'cursorId'?: string;
    /**
     * Gets or sets page number
     * @type {number}
     * @memberof DocsVisionWebClientModelsDistinctValuesRequestModel
     */
    'pageNumber'?: number;
    /**
     * Gets or sets page size
     * @type {number}
     * @memberof DocsVisionWebClientModelsDistinctValuesRequestModel
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsDocumentFilesResponseModel
 */
export interface DocsVisionWebClientModelsDocumentFilesResponseModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsDocumentFilesResponseModel
     */
    'fileName'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsDowloadFilesOperationFileInfoModel>}
     * @memberof DocsVisionWebClientModelsDocumentFilesResponseModel
     */
    'files'?: Array<DocsVisionWebClientModelsDowloadFilesOperationFileInfoModel>;
}
/**
 * Upload
 * @export
 * @interface DocsVisionWebClientModelsDocumentSignaturePartInfo
 */
export interface DocsVisionWebClientModelsDocumentSignaturePartInfo {
    /**
     * What upload to DSS
     * @type {number}
     * @memberof DocsVisionWebClientModelsDocumentSignaturePartInfo
     */
    'partType'?: DocsVisionWebClientModelsDocumentSignaturePartInfoPartTypeEnum;
    /**
     * FileManager file id to upload
     * @type {string}
     * @memberof DocsVisionWebClientModelsDocumentSignaturePartInfo
     */
    'fileId'?: string;
}

export const DocsVisionWebClientModelsDocumentSignaturePartInfoPartTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionWebClientModelsDocumentSignaturePartInfoPartTypeEnum = typeof DocsVisionWebClientModelsDocumentSignaturePartInfoPartTypeEnum[keyof typeof DocsVisionWebClientModelsDocumentSignaturePartInfoPartTypeEnum];

/**
 * Dowload files operation file info model
 * @export
 * @interface DocsVisionWebClientModelsDowloadFilesOperationFileInfoModel
 */
export interface DocsVisionWebClientModelsDowloadFilesOperationFileInfoModel {
    /**
     * File id
     * @type {string}
     * @memberof DocsVisionWebClientModelsDowloadFilesOperationFileInfoModel
     */
    'fileId'?: string;
    /**
     * File name
     * @type {string}
     * @memberof DocsVisionWebClientModelsDowloadFilesOperationFileInfoModel
     */
    'fileName'?: string;
    /**
     * is main
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsDowloadFilesOperationFileInfoModel
     */
    'isMain'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsDssRequestBody
 */
export interface DocsVisionWebClientModelsDssRequestBody {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsDssRequestBody
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsDssRequestBody
     */
    'authorization'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsDssRequestBody
     */
    'body'?: string;
}
/**
 * Request parameters for card edit layout loading
 * @export
 * @interface DocsVisionWebClientModelsEditCardLayoutRequest
 */
export interface DocsVisionWebClientModelsEditCardLayoutRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientModelsEditCardLayoutRequest
     */
    'cardId'?: string;
    /**
     * Layout mode
     * @type {string}
     * @memberof DocsVisionWebClientModelsEditCardLayoutRequest
     */
    'layoutMode'?: string;
    /**
     * Layout params
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionWebClientModelsEditCardLayoutRequest
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
}
/**
 * Request model for employee list
 * @export
 * @interface DocsVisionWebClientModelsEmployeeListRequestModel
 */
export interface DocsVisionWebClientModelsEmployeeListRequestModel {
    /**
     * Instance id
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeListRequestModel
     */
    'instanceId'?: string;
    /**
     * Device type
     * @type {number}
     * @memberof DocsVisionWebClientModelsEmployeeListRequestModel
     */
    'deviceType'?: DocsVisionWebClientModelsEmployeeListRequestModelDeviceTypeEnum;
    /**
     * Hierarchy type
     * @type {number}
     * @memberof DocsVisionWebClientModelsEmployeeListRequestModel
     */
    'hierarchyType'?: DocsVisionWebClientModelsEmployeeListRequestModelHierarchyTypeEnum;
    /**
     * Hierarchy item id
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeListRequestModel
     */
    'hierarchyItemID'?: string;
    /**
     * Gets or sets use sub-items
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsEmployeeListRequestModel
     */
    'withChildren'?: boolean;
    /**
     * Gets or sets page number
     * @type {number}
     * @memberof DocsVisionWebClientModelsEmployeeListRequestModel
     */
    'pageNumber'?: number;
    /**
     * Page size
     * @type {number}
     * @memberof DocsVisionWebClientModelsEmployeeListRequestModel
     */
    'pageSize'?: number;
}

export const DocsVisionWebClientModelsEmployeeListRequestModelDeviceTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientModelsEmployeeListRequestModelDeviceTypeEnum = typeof DocsVisionWebClientModelsEmployeeListRequestModelDeviceTypeEnum[keyof typeof DocsVisionWebClientModelsEmployeeListRequestModelDeviceTypeEnum];
export const DocsVisionWebClientModelsEmployeeListRequestModelHierarchyTypeEnum = {
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_16: 16
} as const;

export type DocsVisionWebClientModelsEmployeeListRequestModelHierarchyTypeEnum = typeof DocsVisionWebClientModelsEmployeeListRequestModelHierarchyTypeEnum[keyof typeof DocsVisionWebClientModelsEmployeeListRequestModelHierarchyTypeEnum];

/**
 * Employee model for {DocsVision.Controllers.EmployeeController}
 * @export
 * @interface DocsVisionWebClientModelsEmployeeStatusModel
 */
export interface DocsVisionWebClientModelsEmployeeStatusModel {
    /**
     * Return true whether user participate in Security Group for aggregates
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'isAggregationUser'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'isCurrent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'fieldPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'unitId'?: string;
    /**
     * 
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'pathInDirectory'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'dataType'?: DocsVisionWebClientModelsEmployeeStatusModelDataTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsEmployeeStatusModel
     */
    'status'?: DocsVisionWebClientModelsEmployeeStatusModelStatusEnum;
}

export const DocsVisionWebClientModelsEmployeeStatusModelDataTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_63: 63,
    NUMBER_64: 64,
    NUMBER_115: 115,
    NUMBER_127: 127
} as const;

export type DocsVisionWebClientModelsEmployeeStatusModelDataTypeEnum = typeof DocsVisionWebClientModelsEmployeeStatusModelDataTypeEnum[keyof typeof DocsVisionWebClientModelsEmployeeStatusModelDataTypeEnum];
export const DocsVisionWebClientModelsEmployeeStatusModelStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionWebClientModelsEmployeeStatusModelStatusEnum = typeof DocsVisionWebClientModelsEmployeeStatusModelStatusEnum[keyof typeof DocsVisionWebClientModelsEmployeeStatusModelStatusEnum];

/**
 * Represents a model for DisableCardController/EnableCard.
 * @export
 * @interface DocsVisionWebClientModelsEnableCardRequestModel
 */
export interface DocsVisionWebClientModelsEnableCardRequestModel {
    /**
     * Gets or sets enabled card identifier.
     * @type {string}
     * @memberof DocsVisionWebClientModelsEnableCardRequestModel
     */
    'cardId'?: string;
}
/**
 * {DocsVision.WebClient.Controllers.FilePickerController}
 * @export
 * @interface DocsVisionWebClientModelsFilePickerGetFileRequestModel
 */
export interface DocsVisionWebClientModelsFilePickerGetFileRequestModel {
    /**
     * Should load file versions
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsFilePickerGetFileRequestModel
     */
    'loadVersions'?: boolean;
    /**
     * FileCard id
     * @type {string}
     * @memberof DocsVisionWebClientModelsFilePickerGetFileRequestModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsLogInfo}
     * @memberof DocsVisionWebClientModelsFilePickerGetFileRequestModel
     */
    'logInfo'?: DocsVisionPlatformWebClientModelsLogInfo;
}
/**
 * {DocsVision.WebClient.Controllers.FilePickerController}
 * @export
 * @interface DocsVisionWebClientModelsFilePickerRequestModel
 */
export interface DocsVisionWebClientModelsFilePickerRequestModel {
    /**
     * FileCard id
     * @type {string}
     * @memberof DocsVisionWebClientModelsFilePickerRequestModel
     */
    'fileCardId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsLogInfo}
     * @memberof DocsVisionWebClientModelsFilePickerRequestModel
     */
    'logInfo'?: DocsVisionPlatformWebClientModelsLogInfo;
}
/**
 * Request model for distinct values for filtering
 * @export
 * @interface DocsVisionWebClientModelsFilterDistinctValuesRequestModel
 */
export interface DocsVisionWebClientModelsFilterDistinctValuesRequestModel {
    /**
     * Column name
     * @type {string}
     * @memberof DocsVisionWebClientModelsFilterDistinctValuesRequestModel
     */
    'filterColumnName'?: string;
    /**
     * Search text
     * @type {string}
     * @memberof DocsVisionWebClientModelsFilterDistinctValuesRequestModel
     */
    'filterSearchText'?: string;
    /**
     * Instace ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsFilterDistinctValuesRequestModel
     */
    'instanceId'?: string;
    /**
     * Gets or sets
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>}
     * @memberof DocsVisionWebClientModelsFilterDistinctValuesRequestModel
     */
    'grouping'?: Array<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsGroupColumn>;
    /**
     * Gets or sets Cursor ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsFilterDistinctValuesRequestModel
     */
    'cursorId'?: string;
    /**
     * Gets or sets page number
     * @type {number}
     * @memberof DocsVisionWebClientModelsFilterDistinctValuesRequestModel
     */
    'pageNumber'?: number;
    /**
     * Gets or sets page size
     * @type {number}
     * @memberof DocsVisionWebClientModelsFilterDistinctValuesRequestModel
     */
    'pageSize'?: number;
}
/**
 * Folder with path of its parent nodes
 * @export
 * @interface DocsVisionWebClientModelsFolderNodeWithParents
 */
export interface DocsVisionWebClientModelsFolderNodeWithParents {
    /**
     * List of parent nodes ids (path)
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsFolderNodeWithParents
     */
    'parentNodes'?: Array<string>;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFoldersFolderNode}
     * @memberof DocsVisionWebClientModelsFolderNodeWithParents
     */
    'folderNode'?: DocsVisionPlatformWebClientModelsFoldersFolderNode;
}
/**
 * Folder Views Infos Model
 * @export
 * @interface DocsVisionWebClientModelsFolderViewInfosModel
 */
export interface DocsVisionWebClientModelsFolderViewInfosModel {
    /**
     * Infos
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewInfo>}
     * @memberof DocsVisionWebClientModelsFolderViewInfosModel
     */
    'views'?: Array<DocsVisionPlatformWebClientModelsFolderViewInfo>;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsGetChildTasksCommentsRequestModel
 */
export interface DocsVisionWebClientModelsGetChildTasksCommentsRequestModel {
    /**
     * Id of the task card.
     * @type {string}
     * @memberof DocsVisionWebClientModelsGetChildTasksCommentsRequestModel
     */
    'taskId'?: string;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionWebClientModelsGetChildTasksCommentsRequestModel
     */
    'commentBinding'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo}
     * @memberof DocsVisionWebClientModelsGetChildTasksCommentsRequestModel
     */
    'commentFileBinding'?: DocsVisionWebClientLibraryObjectModelServicesBindingResolversSimpleBindingInfo;
    /**
     * Max depth of child task nesting
     * @type {number}
     * @memberof DocsVisionWebClientModelsGetChildTasksCommentsRequestModel
     */
    'nestingLevel'?: number;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsGetChildTasksCommentsResponseModel
 */
export interface DocsVisionWebClientModelsGetChildTasksCommentsResponseModel {
    /**
     * Id of the task card.
     * @type {Array<DocsVisionLayoutWebClientModelsChildTaskCommentModel>}
     * @memberof DocsVisionWebClientModelsGetChildTasksCommentsResponseModel
     */
    'childTaskComments'?: Array<DocsVisionLayoutWebClientModelsChildTaskCommentModel>;
    /**
     * Where in the card stored the comment.
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGetChildTasksCommentsResponseModel
     */
    'taskHasCommentFile'?: boolean;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsGetDelegationRecordsRequestModel
 */
export interface DocsVisionWebClientModelsGetDelegationRecordsRequestModel {
    /**
     * Task id
     * @type {string}
     * @memberof DocsVisionWebClientModelsGetDelegationRecordsRequestModel
     */
    'taskId'?: string;
    /**
     * Start performers mode
     * @type {number}
     * @memberof DocsVisionWebClientModelsGetDelegationRecordsRequestModel
     */
    'startPerformersMode'?: DocsVisionWebClientModelsGetDelegationRecordsRequestModelStartPerformersModeEnum;
    /**
     * View mode
     * @type {number}
     * @memberof DocsVisionWebClientModelsGetDelegationRecordsRequestModel
     */
    'viewMode'?: DocsVisionWebClientModelsGetDelegationRecordsRequestModelViewModeEnum;
    /**
     * Tip mode
     * @type {number}
     * @memberof DocsVisionWebClientModelsGetDelegationRecordsRequestModel
     */
    'tipMode'?: DocsVisionWebClientModelsGetDelegationRecordsRequestModelTipModeEnum;
    /**
     * Extended tip mode
     * @type {number}
     * @memberof DocsVisionWebClientModelsGetDelegationRecordsRequestModel
     */
    'extendedTipMode'?: DocsVisionWebClientModelsGetDelegationRecordsRequestModelExtendedTipModeEnum;
}

export const DocsVisionWebClientModelsGetDelegationRecordsRequestModelStartPerformersModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientModelsGetDelegationRecordsRequestModelStartPerformersModeEnum = typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelStartPerformersModeEnum[keyof typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelStartPerformersModeEnum];
export const DocsVisionWebClientModelsGetDelegationRecordsRequestModelViewModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientModelsGetDelegationRecordsRequestModelViewModeEnum = typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelViewModeEnum[keyof typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelViewModeEnum];
export const DocsVisionWebClientModelsGetDelegationRecordsRequestModelTipModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionWebClientModelsGetDelegationRecordsRequestModelTipModeEnum = typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelTipModeEnum[keyof typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelTipModeEnum];
export const DocsVisionWebClientModelsGetDelegationRecordsRequestModelExtendedTipModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionWebClientModelsGetDelegationRecordsRequestModelExtendedTipModeEnum = typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelExtendedTipModeEnum[keyof typeof DocsVisionWebClientModelsGetDelegationRecordsRequestModelExtendedTipModeEnum];

/**
 * Request for receiving email and phone for specified partners or employees
 * @export
 * @interface DocsVisionWebClientModelsGetDepartmentPathRequestModel
 */
export interface DocsVisionWebClientModelsGetDepartmentPathRequestModel {
    /**
     * Gets or sets a department identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsGetDepartmentPathRequestModel
     */
    'departmentId'?: string;
    /**
     * Where to look for employees and departments
     * @type {number}
     * @memberof DocsVisionWebClientModelsGetDepartmentPathRequestModel
     */
    'source'?: DocsVisionWebClientModelsGetDepartmentPathRequestModelSourceEnum;
}

export const DocsVisionWebClientModelsGetDepartmentPathRequestModelSourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientModelsGetDepartmentPathRequestModelSourceEnum = typeof DocsVisionWebClientModelsGetDepartmentPathRequestModelSourceEnum[keyof typeof DocsVisionWebClientModelsGetDepartmentPathRequestModelSourceEnum];

/**
 * Request for getting field value from card section.
 * @export
 * @interface DocsVisionWebClientModelsGetFieldValueRequest
 */
export interface DocsVisionWebClientModelsGetFieldValueRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientModelsGetFieldValueRequest
     */
    'cardId'?: string;
    /**
     * Section id
     * @type {string}
     * @memberof DocsVisionWebClientModelsGetFieldValueRequest
     */
    'sectionId'?: string;
    /**
     * Field alias
     * @type {string}
     * @memberof DocsVisionWebClientModelsGetFieldValueRequest
     */
    'fieldAlias'?: string;
    /**
     * Remove dangerous code from HTML value.
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGetFieldValueRequest
     */
    'sanitizeHtml'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGetFolderCardsRequest
 */
export interface DocsVisionWebClientModelsGetFolderCardsRequest {
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest}
     * @memberof DocsVisionWebClientModelsGetFolderCardsRequest
     */
    'queryViewRequest'?: DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsGetFolderCardsRequest
     */
    'allowedCardTypes'?: Array<string>;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsGetTasksListRequestModel
 */
export interface DocsVisionWebClientModelsGetTasksListRequestModel {
    /**
     * Id of the task list card.
     * @type {string}
     * @memberof DocsVisionWebClientModelsGetTasksListRequestModel
     */
    'taskListId'?: string;
    /**
     * Filter result by these kinds. If array is empty or null, filter will not be applied.
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsGetTasksListRequestModel
     */
    'availableKinds'?: Array<string>;
}
/**
 * Grid aggregate model
 * @export
 * @interface DocsVisionWebClientModelsGridAggregateModel
 */
export interface DocsVisionWebClientModelsGridAggregateModel {
    /**
     * Grid aggregate name
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridAggregateModel
     */
    'name'?: string;
    /**
     * Grid aggregate alias
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridAggregateModel
     */
    'alias'?: string;
    /**
     * Is Grid aggregate main?
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridAggregateModel
     */
    'isMain'?: boolean;
    /**
     * List of grid aggregate value
     * @type {Array<DocsVisionWebClientModelsGridAggregateValue>}
     * @memberof DocsVisionWebClientModelsGridAggregateModel
     */
    'aggregateValues'?: Array<DocsVisionWebClientModelsGridAggregateValue>;
}
/**
 * Grid aggregate request
 * @export
 * @interface DocsVisionWebClientModelsGridAggregateRequest
 */
export interface DocsVisionWebClientModelsGridAggregateRequest {
    /**
     * Gets or sets folder ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridAggregateRequest
     */
    'folderId'?: string;
    /**
     * Gets or sets query ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridAggregateRequest
     */
    'queryId'?: string;
    /**
     * Gets or sets instance ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridAggregateRequest
     */
    'instanceId'?: string;
    /**
     * Gets or sets filters
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem>}
     * @memberof DocsVisionWebClientModelsGridAggregateRequest
     */
    'filters'?: Array<DocsVisionPlatformWebClientModelsFolderViewAggregateFilterItem>;
}
/**
 * Grid aggregate value
 * @export
 * @interface DocsVisionWebClientModelsGridAggregateValue
 */
export interface DocsVisionWebClientModelsGridAggregateValue {
    /**
     * Aggregate value name
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridAggregateValue
     */
    'name'?: string;
    /**
     * Aggregate value alias
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridAggregateValue
     */
    'alias'?: string;
    /**
     * Aggregate value count
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridAggregateValue
     */
    'count'?: number;
    /**
     * Aggregate value count
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridAggregateValue
     */
    'checked'?: boolean;
}
/**
 * Grid filter request model
 * @export
 * @interface DocsVisionWebClientModelsGridFilterRequestModel
 */
export interface DocsVisionWebClientModelsGridFilterRequestModel {
    /**
     * Gets or sets folder identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridFilterRequestModel
     */
    'folderId'?: string;
    /**
     * Gets or sets view identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridFilterRequestModel
     */
    'viewId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGridGridColumn
 */
export interface DocsVisionWebClientModelsGridGridColumn {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'displayName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'sorting'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'cssClassName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'type'?: DocsVisionWebClientModelsGridGridColumnTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'sortDirection'?: DocsVisionWebClientModelsGridGridColumnSortDirectionEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'dateFormat'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'isDefaultSort'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'isSystemColumn'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'isHiddenColumn'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'displayAsHTML'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'unresizable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'width'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'isFilteringAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'isGroupingAllowed'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'evalRow'?: object;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientModelsGridGridColumn
     */
    'getGridFieldData'?: object;
}

export const DocsVisionWebClientModelsGridGridColumnTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;

export type DocsVisionWebClientModelsGridGridColumnTypeEnum = typeof DocsVisionWebClientModelsGridGridColumnTypeEnum[keyof typeof DocsVisionWebClientModelsGridGridColumnTypeEnum];
export const DocsVisionWebClientModelsGridGridColumnSortDirectionEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientModelsGridGridColumnSortDirectionEnum = typeof DocsVisionWebClientModelsGridGridColumnSortDirectionEnum[keyof typeof DocsVisionWebClientModelsGridGridColumnSortDirectionEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGridGridGrouping
 */
export interface DocsVisionWebClientModelsGridGridGrouping {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridGrouping
     */
    'columnName'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridGrouping
     */
    'ascending'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridGrouping
     */
    'showExpanded'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGridGridRow
 */
export interface DocsVisionWebClientModelsGridGridRow {
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridRowParam>}
     * @memberof DocsVisionWebClientModelsGridGridRow
     */
    'params'?: Array<DocsVisionWebClientModelsGridGridRowParam>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridRow
     */
    'backColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridRow
     */
    'foreColor'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridRow
     */
    'wasRead'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridRow
     */
    'isArchived'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGridGridRowParam
 */
export interface DocsVisionWebClientModelsGridGridRowParam {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridRowParam
     */
    'columnName'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientModelsGridGridRowParam
     */
    'value'?: object;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientModelsGridGridRowParam
     */
    'rawValue'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGridGridSorting
 */
export interface DocsVisionWebClientModelsGridGridSorting {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridSorting
     */
    'columnName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridSorting
     */
    'order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridSorting
     */
    'ascending'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGridGridViewModel
 */
export interface DocsVisionWebClientModelsGridGridViewModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'instanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'cursorId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'modelSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'isAllPagesLoaded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'isUnknownModelSize'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'isFilterAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'isPagingMode'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'isLastPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'markUnread'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'checkCardAccess'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'allowRowResize'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'sortingKey'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridColumn>}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'columns'?: Array<DocsVisionWebClientModelsGridGridColumn>;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridRow>}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'rows'?: Array<DocsVisionWebClientModelsGridGridRow>;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'request'?: DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'fullTextSearchSessionId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'gridUserSettings'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'isGroupingAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'showGroupingColumns'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'baseCursorRowCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'hasDefaultGrouping'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'keyColumnName'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridSorting>}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'sortingColumns'?: Array<DocsVisionWebClientModelsGridGridSorting>;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridGrouping>}
     * @memberof DocsVisionWebClientModelsGridGridViewModel
     */
    'groupingColumnNames'?: Array<DocsVisionWebClientModelsGridGridGrouping>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsGridGridViewModelEx
 */
export interface DocsVisionWebClientModelsGridGridViewModelEx {
    /**
     * 
     * @type {DocsVisionWebClientLibraryObjectModelServicesLayoutModelILayoutViewModel}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'searchParametersLayout'?: DocsVisionWebClientLibraryObjectModelServicesLayoutModelILayoutViewModel;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'instanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'cursorId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'modelSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'isAllPagesLoaded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'isUnknownModelSize'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'isFilterAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'isPagingMode'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'isLastPage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'markUnread'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'checkCardAccess'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'allowRowResize'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'sortingKey'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridColumn>}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'columns'?: Array<DocsVisionWebClientModelsGridGridColumn>;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridRow>}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'rows'?: Array<DocsVisionWebClientModelsGridGridRow>;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'request'?: DocsVisionPlatformWebClientModelsFolderViewQueryViewRequest;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'fullTextSearchSessionId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'gridUserSettings'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'isGroupingAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'showGroupingColumns'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'baseCursorRowCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'hasDefaultGrouping'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'keyColumnName'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridSorting>}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'sortingColumns'?: Array<DocsVisionWebClientModelsGridGridSorting>;
    /**
     * 
     * @type {Array<DocsVisionWebClientModelsGridGridGrouping>}
     * @memberof DocsVisionWebClientModelsGridGridViewModelEx
     */
    'groupingColumnNames'?: Array<DocsVisionWebClientModelsGridGridGrouping>;
}
/**
 * Entry data for calculation task group performing intervals.
 * @export
 * @interface DocsVisionWebClientModelsIntervalsCalculationRequestModel
 */
export interface DocsVisionWebClientModelsIntervalsCalculationRequestModel {
    /**
     * Start date for entry task group
     * @type {string}
     * @memberof DocsVisionWebClientModelsIntervalsCalculationRequestModel
     */
    'totalStartDate'?: string;
    /**
     * End date for entry task group
     * @type {string}
     * @memberof DocsVisionWebClientModelsIntervalsCalculationRequestModel
     */
    'totalEndDate'?: string;
    /**
     * Duration for entry task group.
     * @type {number}
     * @memberof DocsVisionWebClientModelsIntervalsCalculationRequestModel
     */
    'totalDuration'?: number;
    /**
     * Default calendar id to calculate intervals (will be used if employee has no calendar configured). Empty guid to use system calendar.
     * @type {string}
     * @memberof DocsVisionWebClientModelsIntervalsCalculationRequestModel
     */
    'defaultCalendarId'?: string;
    /**
     * Execution type
     * @type {number}
     * @memberof DocsVisionWebClientModelsIntervalsCalculationRequestModel
     */
    'executionType'?: DocsVisionWebClientModelsIntervalsCalculationRequestModelExecutionTypeEnum;
    /**
     * Existing intervals with specified durations, but without start/end dates.
     * @type {Array<DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval>}
     * @memberof DocsVisionWebClientModelsIntervalsCalculationRequestModel
     */
    'intervals'?: Array<DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval>;
}

export const DocsVisionWebClientModelsIntervalsCalculationRequestModelExecutionTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientModelsIntervalsCalculationRequestModelExecutionTypeEnum = typeof DocsVisionWebClientModelsIntervalsCalculationRequestModelExecutionTypeEnum[keyof typeof DocsVisionWebClientModelsIntervalsCalculationRequestModelExecutionTypeEnum];

/**
 * Model indicates has the file a certificate signature
 * @export
 * @interface DocsVisionWebClientModelsIsHasFileCertificateSignatureModel
 */
export interface DocsVisionWebClientModelsIsHasFileCertificateSignatureModel {
    /**
     * Indicates has the file a certificate signature
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsIsHasFileCertificateSignatureModel
     */
    'isHasFileCertificateSignature'?: boolean;
    /**
     * The name for downloading file
     * @type {string}
     * @memberof DocsVisionWebClientModelsIsHasFileCertificateSignatureModel
     */
    'fileDownloadName'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsOperationRequestModel
 */
export interface DocsVisionWebClientModelsOperationRequestModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsOperationRequestModel
     */
    'cardId'?: string;
    /**
     * Where in the card stored the comment.
     * @type {string}
     * @memberof DocsVisionWebClientModelsOperationRequestModel
     */
    'operationId'?: string;
}
/**
 * Model for modal window to add new card
 * @export
 * @interface DocsVisionWebClientModelsProlongateContractRequestModel
 */
export interface DocsVisionWebClientModelsProlongateContractRequestModel {
    /**
     * Date of contract begin
     * @type {string}
     * @memberof DocsVisionWebClientModelsProlongateContractRequestModel
     */
    'dateFrom'?: string;
    /**
     * Date of contract end
     * @type {string}
     * @memberof DocsVisionWebClientModelsProlongateContractRequestModel
     */
    'dateTo'?: string;
    /**
     * Contract card id
     * @type {string}
     * @memberof DocsVisionWebClientModelsProlongateContractRequestModel
     */
    'contractId'?: string;
    /**
     * Contract card id
     * @type {string}
     * @memberof DocsVisionWebClientModelsProlongateContractRequestModel
     */
    'amendmentId'?: string;
}
/**
 * Card quotes model
 * @export
 * @interface DocsVisionWebClientModelsQuotesCardQuotesRequest
 */
export interface DocsVisionWebClientModelsQuotesCardQuotesRequest {
    /**
     * Instance ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsQuotesCardQuotesRequest
     */
    'instanceId'?: string;
    /**
     * Card ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsQuotesCardQuotesRequest
     */
    'cardId'?: string;
    /**
     * Quotes limit
     * @type {number}
     * @memberof DocsVisionWebClientModelsQuotesCardQuotesRequest
     */
    'quotesLimit'?: number;
    /**
     * Files limit
     * @type {number}
     * @memberof DocsVisionWebClientModelsQuotesCardQuotesRequest
     */
    'filesLimit'?: number;
}
/**
 * File Quotes Request
 * @export
 * @interface DocsVisionWebClientModelsQuotesFileQuotesRequest
 */
export interface DocsVisionWebClientModelsQuotesFileQuotesRequest {
    /**
     * Instance ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsQuotesFileQuotesRequest
     */
    'instanceId'?: string;
    /**
     * File ID
     * @type {string}
     * @memberof DocsVisionWebClientModelsQuotesFileQuotesRequest
     */
    'fileId'?: string;
    /**
     * Quotes limit
     * @type {number}
     * @memberof DocsVisionWebClientModelsQuotesFileQuotesRequest
     */
    'quotesLimit'?: number;
}
/**
 * Recent cards request model
 * @export
 * @interface DocsVisionWebClientModelsRecentCardsRequest
 */
export interface DocsVisionWebClientModelsRecentCardsRequest {
    /**
     * 
     * @type {DocsVisionWebClientModelsCardListRequestModel}
     * @memberof DocsVisionWebClientModelsRecentCardsRequest
     */
    'requestModel'?: DocsVisionWebClientModelsCardListRequestModel;
    /**
     * Need use old grid.
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsRecentCardsRequest
     */
    'useOldGrid'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsRefreshUnreadCounterRequest
 */
export interface DocsVisionWebClientModelsRefreshUnreadCounterRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsRefreshUnreadCounterRequest
     */
    'folderId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientModelsRefreshUnreadCounterRequest
     */
    'folderRefreshTimeout'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsRefreshUnreadCounterRequest
     */
    'forceVirtualFolderSearch'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsRelatedCreatorCardInfo
 */
export interface DocsVisionWebClientModelsRelatedCreatorCardInfo {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsRelatedCreatorCardInfo
     */
    'initialCardId'?: string;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel}
     * @memberof DocsVisionWebClientModelsRelatedCreatorCardInfo
     */
    'createRelatedCardModel'?: DocsVisionBackOfficeWebClientCreateRelatedCardButtonCreateRelatedCardModel;
    /**
     * 
     * @type {Array<DocsVisionLayoutWebClientModelsParamModel>}
     * @memberof DocsVisionWebClientModelsRelatedCreatorCardInfo
     */
    'parameters'?: Array<DocsVisionLayoutWebClientModelsParamModel>;
}
/**
 * Request model for card list
 * @export
 * @interface DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel
 */
export interface DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel {
    /**
     * 
     * @type {DocsVisionWebClientModelsCardListRequestModel}
     * @memberof DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel
     */
    'requestModel'?: DocsVisionWebClientModelsCardListRequestModel;
    /**
     * Gets or sets card was read
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel
     */
    'wasRead'?: boolean;
}
/**
 * Represents save grid user settings data request model
 * @export
 * @interface DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel
 */
export interface DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel {
    /**
     * Gets or sets folder identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel
     */
    'folderId'?: string;
    /**
     * Get or sets view identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel
     */
    'viewId'?: string;
    /**
     * Get or sets instance id
     * @type {string}
     * @memberof DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel
     */
    'instanceId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData}
     * @memberof DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel
     */
    'gridUserSettings'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData;
}
/**
 * Represents save grid user settings folder data request model
 * @export
 * @interface DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel
 */
export interface DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel {
    /**
     * Gets or sets folder identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel
     */
    'folderId'?: string;
    /**
     * 
     * @type {DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsFolderData}
     * @memberof DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel
     */
    'gridUserSettingsFolder'?: DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsFolderData;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsScanFileInfo
 */
export interface DocsVisionWebClientModelsScanFileInfo {
    /**
     * Scaned file name
     * @type {string}
     * @memberof DocsVisionWebClientModelsScanFileInfo
     */
    'fileName'?: string;
    /**
     * Scaned file path
     * @type {string}
     * @memberof DocsVisionWebClientModelsScanFileInfo
     */
    'filePath'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsScanedFilesRequestModel
 */
export interface DocsVisionWebClientModelsScanedFilesRequestModel {
    /**
     * List of scaned file urls
     * @type {Array<DocsVisionWebClientModelsScanFileInfo>}
     * @memberof DocsVisionWebClientModelsScanedFilesRequestModel
     */
    'fileUrls'?: Array<DocsVisionWebClientModelsScanFileInfo>;
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientModelsScanedFilesRequestModel
     */
    'cardId'?: string;
    /**
     * Main file flag
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsScanedFilesRequestModel
     */
    'isMain'?: boolean;
    /**
     * Card timestamp
     * @type {number}
     * @memberof DocsVisionWebClientModelsScanedFilesRequestModel
     */
    'timestamp'?: number;
}
/**
 * Request model
 * @export
 * @interface DocsVisionWebClientModelsSearchPresentationRequestModel
 */
export interface DocsVisionWebClientModelsSearchPresentationRequestModel {
    /**
     * Card list found be search
     * @type {Array<DocsVisionPlatformWebClientModelsDigestRow>}
     * @memberof DocsVisionWebClientModelsSearchPresentationRequestModel
     */
    'cards'?: Array<DocsVisionPlatformWebClientModelsDigestRow>;
    /**
     * Use paging
     * @type {string}
     * @memberof DocsVisionWebClientModelsSearchPresentationRequestModel
     */
    'extensionName'?: string;
    /**
     * 
     * @type {DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgs}
     * @memberof DocsVisionWebClientModelsSearchPresentationRequestModel
     */
    'layoutExtensionArgs'?: DocsVisionLayoutWebClientModelsLayoutCardsPresentationExtensionArgs;
    /**
     * Report id for Report presentation extension.
     * @type {string}
     * @memberof DocsVisionWebClientModelsSearchPresentationRequestModel
     */
    'reportId'?: string;
}
/**
 * Request for receiving email and phone for specified partners or employees
 * @export
 * @interface DocsVisionWebClientModelsStaffInfoRequestModel
 */
export interface DocsVisionWebClientModelsStaffInfoRequestModel {
    /**
     * Employee id list to get info
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsStaffInfoRequestModel
     */
    'employeeIds'?: Array<string>;
    /**
     * Department and organisation ids to get info
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsStaffInfoRequestModel
     */
    'departmentIds'?: Array<string>;
    /**
     * Where to look for employees and departments
     * @type {number}
     * @memberof DocsVisionWebClientModelsStaffInfoRequestModel
     */
    'source'?: DocsVisionWebClientModelsStaffInfoRequestModelSourceEnum;
}

export const DocsVisionWebClientModelsStaffInfoRequestModelSourceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientModelsStaffInfoRequestModelSourceEnum = typeof DocsVisionWebClientModelsStaffInfoRequestModelSourceEnum[keyof typeof DocsVisionWebClientModelsStaffInfoRequestModelSourceEnum];

/**
 * Request for receiving email and phone for specified partners or employees
 * @export
 * @interface DocsVisionWebClientModelsStaffInfoResponseModel
 */
export interface DocsVisionWebClientModelsStaffInfoResponseModel {
    /**
     * Employee id list to get info
     * @type {Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail>}
     * @memberof DocsVisionWebClientModelsStaffInfoResponseModel
     */
    'employeesInfo'?: Array<DocsVisionBackOfficeWebClientEmployeeEmployeeModelWithPoneAndEmail>;
    /**
     * Department and organisation ids to get info
     * @type {Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>}
     * @memberof DocsVisionWebClientModelsStaffInfoResponseModel
     */
    'departmentsInfo'?: Array<DocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>;
}
/**
 * Defines integration-specific model for  TaskCardChangeExecutionDatesModel objects
 * @export
 * @interface DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel
 */
export interface DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel {
    /**
     * Gets or sets task card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel
     */
    'taskId'?: string;
    /**
     * Gets or sets task new start date
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel
     */
    'startDate'?: string;
    /**
     * Gets or sets task new end date
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel
     */
    'endDate'?: string;
    /**
     * Gets or sets task comments
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel
     */
    'comment'?: string;
}
/**
 * Defines integration-specific model for TaskCardCompleteModel objects
 * @export
 * @interface DocsVisionWebClientModelsTaskCardCompleteRequestModel
 */
export interface DocsVisionWebClientModelsTaskCardCompleteRequestModel {
    /**
     * Gets or sets task card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardCompleteRequestModel
     */
    'taskCardId'?: string;
    /**
     * Gets or sets task report
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardCompleteRequestModel
     */
    'report'?: string;
    /**
     * 
     * @type {DocsVisionWebClientModelsCompletionOptionRequestModel}
     * @memberof DocsVisionWebClientModelsTaskCardCompleteRequestModel
     */
    'completionOption'?: DocsVisionWebClientModelsCompletionOptionRequestModel;
}
/**
 * Defines integration-specific model for TaskCardModel objects
 * @export
 * @interface DocsVisionWebClientModelsTaskCardDelegateRequestModel
 */
export interface DocsVisionWebClientModelsTaskCardDelegateRequestModel {
    /**
     * Gets or sets task card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardDelegateRequestModel
     */
    'taskId'?: string;
    /**
     * Gets or sets task comments
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardDelegateRequestModel
     */
    'comment'?: string;
    /**
     * Gets or sets performer identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardDelegateRequestModel
     */
    'delegateId'?: string;
    /**
     * Gets or sets RestrictDelegation
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsTaskCardDelegateRequestModel
     */
    'restrictDelegation'?: boolean;
    /**
     * Gets or sets ReturnAfterDelegation
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsTaskCardDelegateRequestModel
     */
    'returnAfterDelegation'?: boolean;
}
/**
 * Defines integration-specific model for TaskCardMakeDecisionModel objects
 * @export
 * @interface DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
 */
export interface DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel {
    /**
     * Gets or sets task identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
     */
    'taskId'?: string;
    /**
     * Gets or sets completion option identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
     */
    'completionOptionId'?: string;
    /**
     * Gets or set decision comment
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
     */
    'comment'?: string;
    /**
     * Gets or set additional approvers
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
     */
    'additionalApprovers'?: Array<string>;
    /**
     * Gets or sets card timestamp
     * @type {number}
     * @memberof DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
     */
    'timestamp'?: number;
    /**
     * Gets or sets is sign required
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
     */
    'isSignRequired'?: boolean;
    /**
     * 
     * @type {DocsVisionBackOfficeWebClientSignatureSignDataRequest}
     * @memberof DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel
     */
    'signData'?: DocsVisionBackOfficeWebClientSignatureSignDataRequest;
}
/**
 * Defines integration-specific model for TaskCardRejectRequestModel objects
 * @export
 * @interface DocsVisionWebClientModelsTaskCardRejectRequestModel
 */
export interface DocsVisionWebClientModelsTaskCardRejectRequestModel {
    /**
     * Gets or sets task card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardRejectRequestModel
     */
    'taskId'?: string;
    /**
     * Gets or sets task comments
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardRejectRequestModel
     */
    'comment'?: string;
}
/**
 * Defines integration-specific model for TaskCardTakeToReworkRequestModel objects
 * @export
 * @interface DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel
 */
export interface DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel {
    /**
     * Gets or sets task card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel
     */
    'taskId'?: string;
    /**
     * Gets or sets task comments
     * @type {string}
     * @memberof DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel
     */
    'comment'?: string;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel
 */
export interface DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel {
    /**
     * Gets or sets card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel
     */
    'cardId'?: string;
    /**
     * Gets or sets card type identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel
     */
    'cardTypeId'?: string;
}
/**
 * Tasks tree request model
 * @export
 * @interface DocsVisionWebClientModelsTasksTreeRequestModel
 */
export interface DocsVisionWebClientModelsTasksTreeRequestModel {
    /**
     * Gets or sets card identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTasksTreeRequestModel
     */
    'cardId'?: string;
    /**
     * Gets or sets task list identifier
     * @type {string}
     * @memberof DocsVisionWebClientModelsTasksTreeRequestModel
     */
    'taskListId'?: string;
    /**
     * Gets allowed kinds identifiers
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsTasksTreeRequestModel
     */
    'kindIds'?: Array<string>;
    /**
     * Gets or sets whether not restrict tree to current card
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsTasksTreeRequestModel
     */
    'fullTree'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsUploadToDssRequest
 */
export interface DocsVisionWebClientModelsUploadToDssRequest {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsUploadToDssRequest
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientModelsUploadToDssRequest
     */
    'authorization'?: string;
    /**
     * Parent document card id
     * @type {string}
     * @memberof DocsVisionWebClientModelsUploadToDssRequest
     */
    'documentId'?: string;
    /**
     * Signature parts
     * @type {Array<DocsVisionWebClientModelsDocumentSignaturePartInfo>}
     * @memberof DocsVisionWebClientModelsUploadToDssRequest
     */
    'parts'?: Array<DocsVisionWebClientModelsDocumentSignaturePartInfo>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientModelsUploadToDssResponse
 */
export interface DocsVisionWebClientModelsUploadToDssResponse {
    /**
     * Signature parts
     * @type {Array<DocsVisionWebClientModelsDocumentSignaturePartInfo>}
     * @memberof DocsVisionWebClientModelsUploadToDssResponse
     */
    'parts'?: Array<DocsVisionWebClientModelsDocumentSignaturePartInfo>;
    /**
     * DSS server response
     * @type {object}
     * @memberof DocsVisionWebClientModelsUploadToDssResponse
     */
    'dssResponse'?: object;
}
/**
 * Request parameters for card edit layout loading
 * @export
 * @interface DocsVisionWebClientModelsViewCardLayoutRequest
 */
export interface DocsVisionWebClientModelsViewCardLayoutRequest {
    /**
     * Card id
     * @type {string}
     * @memberof DocsVisionWebClientModelsViewCardLayoutRequest
     */
    'cardId'?: string;
    /**
     * Layout mode
     * @type {string}
     * @memberof DocsVisionWebClientModelsViewCardLayoutRequest
     */
    'layoutMode'?: string;
    /**
     * Layout params
     * @type {Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>}
     * @memberof DocsVisionWebClientModelsViewCardLayoutRequest
     */
    'layoutParams'?: Array<DocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutParamModel>;
    /**
     * Should add shortcut to user\'s recent cards folder
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsViewCardLayoutRequest
     */
    'addToRecent'?: boolean;
    /**
     * Should write record about card view to card history.
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsViewCardLayoutRequest
     */
    'addCardLogMessage'?: boolean;
    /**
     * Mark card as read by user.
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsViewCardLayoutRequest
     */
    'markAsRead'?: boolean;
    /**
     * Layout or layouts, where current layout will be shown
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsViewCardLayoutRequest
     */
    'parentLayoutIds'?: Array<string>;
}
/**
 * BaseCardController request model.
 * @export
 * @interface DocsVisionWebClientModelsWasReadRequest
 */
export interface DocsVisionWebClientModelsWasReadRequest {
    /**
     * Cards to read
     * @type {Array<string>}
     * @memberof DocsVisionWebClientModelsWasReadRequest
     */
    'cardIds'?: Array<string>;
    /**
     * Set read state
     * @type {boolean}
     * @memberof DocsVisionWebClientModelsWasReadRequest
     */
    'setRead'?: boolean;
}
/**
 * Authorize realtime message data
 * @export
 * @interface DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData
 */
export interface DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData {
    /**
     * Access token
     * @type {string}
     * @memberof DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData
     */
    'accessToken'?: string;
    /**
     * Access token
     * @type {string}
     * @memberof DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData
     */
    'accountName'?: string;
    /**
     * Expires In
     * @type {number}
     * @memberof DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData
     */
    'expiresIn'?: number;
    /**
     * Error
     * @type {string}
     * @memberof DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData
     */
    'error'?: string;
    /**
     * Error description
     * @type {string}
     * @memberof DocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageData
     */
    'errorDescription'?: string;
}
/**
 * Data about signature kind selection
 * @export
 * @interface DocsVisionWebClientServicesSignatureKindSelectionModel
 */
export interface DocsVisionWebClientServicesSignatureKindSelectionModel {
    /**
     * available signature kind
     * @type {number}
     * @memberof DocsVisionWebClientServicesSignatureKindSelectionModel
     */
    'availableKind'?: DocsVisionWebClientServicesSignatureKindSelectionModelAvailableKindEnum;
    /**
     * warning message
     * @type {string}
     * @memberof DocsVisionWebClientServicesSignatureKindSelectionModel
     */
    'warning'?: string;
    /**
     * time-stamp protocol server address
     * @type {string}
     * @memberof DocsVisionWebClientServicesSignatureKindSelectionModel
     */
    'tspAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientServicesSignatureKindSelectionModel
     */
    'certificateThumberprint'?: string;
}

export const DocsVisionWebClientServicesSignatureKindSelectionModelAvailableKindEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionWebClientServicesSignatureKindSelectionModelAvailableKindEnum = typeof DocsVisionWebClientServicesSignatureKindSelectionModelAvailableKindEnum[keyof typeof DocsVisionWebClientServicesSignatureKindSelectionModelAvailableKindEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
 */
export interface DocsVisionWebClientWebApiModelsCardDataAccessRuleModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'sid'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'staffItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'accountName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'identityType'?: DocsVisionWebClientWebApiModelsCardDataAccessRuleModelIdentityTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'accessControlType'?: DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessControlTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'accessRights'?: DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessRightsEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsCardDataAccessRuleModel
     */
    'isInherited'?: boolean;
}

export const DocsVisionWebClientWebApiModelsCardDataAccessRuleModelIdentityTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_101: 101,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionWebClientWebApiModelsCardDataAccessRuleModelIdentityTypeEnum = typeof DocsVisionWebClientWebApiModelsCardDataAccessRuleModelIdentityTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsCardDataAccessRuleModelIdentityTypeEnum];
export const DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessControlTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessControlTypeEnum = typeof DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessControlTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessControlTypeEnum];
export const DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessRightsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_38: 38,
    NUMBER_256: 256,
    NUMBER_319: 319,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983359: 983359,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessRightsEnum = typeof DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessRightsEnum[keyof typeof DocsVisionWebClientWebApiModelsCardDataAccessRuleModelAccessRightsEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsCardDataModel
 */
export interface DocsVisionWebClientWebApiModelsCardDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'typeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'createDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'changeDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'wasRead'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'barcode'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsSectionDataModel>}
     * @memberof DocsVisionWebClientWebApiModelsCardDataModel
     */
    'sections'?: Array<DocsVisionWebClientWebApiModelsSectionDataModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsCardLibraryModel
 */
export interface DocsVisionWebClientWebApiModelsCardLibraryModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardLibraryModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardLibraryModel
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardLibraryModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsCardLibraryModel
     */
    'version'?: number;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsCardTypeModel>}
     * @memberof DocsVisionWebClientWebApiModelsCardLibraryModel
     */
    'cardTypes'?: Array<DocsVisionWebClientWebApiModelsCardTypeModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsCardTypeModel
 */
export interface DocsVisionWebClientWebApiModelsCardTypeModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardTypeModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardTypeModel
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardTypeModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsCardTypeModel
     */
    'libraryId'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsFieldCondition
 */
export interface DocsVisionWebClientWebApiModelsFieldCondition {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFieldCondition
     */
    'alias': string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientWebApiModelsFieldCondition
     */
    'value': object;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFieldCondition
     */
    'mode': DocsVisionWebClientWebApiModelsFieldConditionModeEnum;
}

export const DocsVisionWebClientWebApiModelsFieldConditionModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_20: 20,
    NUMBER_21: 21,
    NUMBER_22: 22,
    NUMBER_23: 23,
    NUMBER_24: 24,
    NUMBER_25: 25,
    NUMBER_26: 26,
    NUMBER_27: 27,
    NUMBER_MINUS_1: -1
} as const;

export type DocsVisionWebClientWebApiModelsFieldConditionModeEnum = typeof DocsVisionWebClientWebApiModelsFieldConditionModeEnum[keyof typeof DocsVisionWebClientWebApiModelsFieldConditionModeEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
 */
export interface DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'alias'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'type'?: DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'flags'?: DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelFlagsEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'max'?: number;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'defaultValue'?: object;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'copyBehavior'?: DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelCopyBehaviorEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'linkedCardTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'linkedSectionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'linkType'?: DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelLinkTypeEnum;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'localizations'?: { [key: string]: string; };
    /**
     * 
     * @type {Array<DocsVisionPlatformDataMetadataCardModelFieldEnumValue>}
     * @memberof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel
     */
    'enumValues'?: Array<DocsVisionPlatformDataMetadataCardModelFieldEnumValue>;
}

export const DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_20: 20,
    NUMBER_21: 21
} as const;

export type DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelTypeEnum = typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelTypeEnum];
export const DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelFlagsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_64: 64,
    NUMBER_128: 128,
    NUMBER_256: 256,
    NUMBER_512: 512
} as const;

export type DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelFlagsEnum = typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelFlagsEnum[keyof typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelFlagsEnum];
export const DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelCopyBehaviorEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelCopyBehaviorEnum = typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelCopyBehaviorEnum[keyof typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelCopyBehaviorEnum];
export const DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelLinkTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_7: 7
} as const;

export type DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelLinkTypeEnum = typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelLinkTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModelLinkTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
 */
export interface DocsVisionWebClientWebApiModelsFileDataAccessRuleModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'sid'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'staffItemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'accountName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'displayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'identityType'?: DocsVisionWebClientWebApiModelsFileDataAccessRuleModelIdentityTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'accessControlType'?: DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessControlTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'accessRights'?: DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessRightsEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsFileDataAccessRuleModel
     */
    'isInherited'?: boolean;
}

export const DocsVisionWebClientWebApiModelsFileDataAccessRuleModelIdentityTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_101: 101,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionWebClientWebApiModelsFileDataAccessRuleModelIdentityTypeEnum = typeof DocsVisionWebClientWebApiModelsFileDataAccessRuleModelIdentityTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsFileDataAccessRuleModelIdentityTypeEnum];
export const DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessControlTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessControlTypeEnum = typeof DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessControlTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessControlTypeEnum];
export const DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessRightsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_34: 34,
    NUMBER_59: 59,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983099: 983099,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessRightsEnum = typeof DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessRightsEnum[keyof typeof DocsVisionWebClientWebApiModelsFileDataAccessRuleModelAccessRightsEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsFileDataModel
 */
export interface DocsVisionWebClientWebApiModelsFileDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'longSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'createDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'changeDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'stdAttributes'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'extAttributes'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'ownerCardId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'encrypted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'signed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'offlineState'?: DocsVisionWebClientWebApiModelsFileDataModelOfflineStateEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'archiveState'?: DocsVisionWebClientWebApiModelsFileDataModelArchiveStateEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'lockStatus'?: DocsVisionWebClientWebApiModelsFileDataModelLockStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFileDataModel
     */
    'lockOwner'?: string;
}

export const DocsVisionWebClientWebApiModelsFileDataModelOfflineStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientWebApiModelsFileDataModelOfflineStateEnum = typeof DocsVisionWebClientWebApiModelsFileDataModelOfflineStateEnum[keyof typeof DocsVisionWebClientWebApiModelsFileDataModelOfflineStateEnum];
export const DocsVisionWebClientWebApiModelsFileDataModelArchiveStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type DocsVisionWebClientWebApiModelsFileDataModelArchiveStateEnum = typeof DocsVisionWebClientWebApiModelsFileDataModelArchiveStateEnum[keyof typeof DocsVisionWebClientWebApiModelsFileDataModelArchiveStateEnum];
export const DocsVisionWebClientWebApiModelsFileDataModelLockStatusEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionWebClientWebApiModelsFileDataModelLockStatusEnum = typeof DocsVisionWebClientWebApiModelsFileDataModelLockStatusEnum[keyof typeof DocsVisionWebClientWebApiModelsFileDataModelLockStatusEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsFolderModel
 */
export interface DocsVisionWebClientWebApiModelsFolderModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'type'?: DocsVisionWebClientWebApiModelsFolderModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'propCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'refId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'refreshTimeout'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'url'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'viewCyclingEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'viewCycleCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsFolderModel>}
     * @memberof DocsVisionWebClientWebApiModelsFolderModel
     */
    'folders'?: Array<DocsVisionWebClientWebApiModelsFolderModel>;
}

export const DocsVisionWebClientWebApiModelsFolderModelTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_31: 31
} as const;

export type DocsVisionWebClientWebApiModelsFolderModelTypeEnum = typeof DocsVisionWebClientWebApiModelsFolderModelTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsFolderModelTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsInfoRowCollectionModel
 */
export interface DocsVisionWebClientWebApiModelsInfoRowCollectionModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsInfoRowCollectionModel
     */
    'cursorID'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsInfoRowCollectionModel
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsInfoRowCollectionModel
     */
    'rowsCount'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModelsInfoRowCollectionModel
     */
    'fields'?: Array<string>;
    /**
     * 
     * @type {Array<Array<object>>}
     * @memberof DocsVisionWebClientWebApiModelsInfoRowCollectionModel
     */
    'rows'?: Array<Array<object>>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsProcessInitializationParameters
 */
export interface DocsVisionWebClientWebApiModelsProcessInitializationParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessInitializationParameters
     */
    'templateID': string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessInitializationParameters
     */
    'initialDocument'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsProcessVariableParameters>}
     * @memberof DocsVisionWebClientWebApiModelsProcessInitializationParameters
     */
    'variables'?: Array<DocsVisionWebClientWebApiModelsProcessVariableParameters>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsProcessModel
 */
export interface DocsVisionWebClientWebApiModelsProcessModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'instanceName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'digest'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'initialDocument'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'dateCreated'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'dateModified'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'isTemplate'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'state'?: DocsVisionWebClientWebApiModelsProcessModelStateEnum;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsVariableModel>}
     * @memberof DocsVisionWebClientWebApiModelsProcessModel
     */
    'variables'?: Array<DocsVisionWebClientWebApiModelsVariableModel>;
}

export const DocsVisionWebClientWebApiModelsProcessModelStateEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type DocsVisionWebClientWebApiModelsProcessModelStateEnum = typeof DocsVisionWebClientWebApiModelsProcessModelStateEnum[keyof typeof DocsVisionWebClientWebApiModelsProcessModelStateEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsProcessVariableParameters
 */
export interface DocsVisionWebClientWebApiModelsProcessVariableParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsProcessVariableParameters
     */
    'name': string;
    /**
     * 
     * @type {Array<object>}
     * @memberof DocsVisionWebClientWebApiModelsProcessVariableParameters
     */
    'values': Array<object>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsRowDataModel
 */
export interface DocsVisionWebClientWebApiModelsRowDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsRowDataModel
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsRowFieldModel>}
     * @memberof DocsVisionWebClientWebApiModelsRowDataModel
     */
    'fields'?: Array<DocsVisionWebClientWebApiModelsRowFieldModel>;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsRowDataModel>}
     * @memberof DocsVisionWebClientWebApiModelsRowDataModel
     */
    'childRows'?: Array<DocsVisionWebClientWebApiModelsRowDataModel>;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsSubSectionDataModel>}
     * @memberof DocsVisionWebClientWebApiModelsRowDataModel
     */
    'sections'?: Array<DocsVisionWebClientWebApiModelsSubSectionDataModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsRowFieldModel
 */
export interface DocsVisionWebClientWebApiModelsRowFieldModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsRowFieldModel
     */
    'alias'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientWebApiModelsRowFieldModel
     */
    'value'?: object;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsRowSearchQuery
 */
export interface DocsVisionWebClientWebApiModelsRowSearchQuery {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsRowSearchQuery
     */
    'dictionaryId': string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsRowSearchQuery
     */
    'sectionId': string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsFieldCondition>}
     * @memberof DocsVisionWebClientWebApiModelsRowSearchQuery
     */
    'fieldConditions': Array<DocsVisionWebClientWebApiModelsFieldCondition>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsSectionDataModel
 */
export interface DocsVisionWebClientWebApiModelsSectionDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsSectionDataModel
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsRowDataModel>}
     * @memberof DocsVisionWebClientWebApiModelsSectionDataModel
     */
    'rows'?: Array<DocsVisionWebClientWebApiModelsRowDataModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsSectionMetadataModel
 */
export interface DocsVisionWebClientWebApiModelsSectionMetadataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsSectionMetadataModel
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsSectionMetadataModel
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsSectionMetadataModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsSectionMetadataModel
     */
    'type'?: DocsVisionWebClientWebApiModelsSectionMetadataModelTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModelsSectionMetadataModel
     */
    'sectionFlags'?: DocsVisionWebClientWebApiModelsSectionMetadataModelSectionFlagsEnum;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof DocsVisionWebClientWebApiModelsSectionMetadataModel
     */
    'localizations'?: { [key: string]: string; };
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel>}
     * @memberof DocsVisionWebClientWebApiModelsSectionMetadataModel
     */
    'fields'?: Array<DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel>;
}

export const DocsVisionWebClientWebApiModelsSectionMetadataModelTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientWebApiModelsSectionMetadataModelTypeEnum = typeof DocsVisionWebClientWebApiModelsSectionMetadataModelTypeEnum[keyof typeof DocsVisionWebClientWebApiModelsSectionMetadataModelTypeEnum];
export const DocsVisionWebClientWebApiModelsSectionMetadataModelSectionFlagsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_64: 64,
    NUMBER_128: 128,
    NUMBER_256: 256,
    NUMBER_512: 512,
    NUMBER_1024: 1024,
    NUMBER_2048: 2048
} as const;

export type DocsVisionWebClientWebApiModelsSectionMetadataModelSectionFlagsEnum = typeof DocsVisionWebClientWebApiModelsSectionMetadataModelSectionFlagsEnum[keyof typeof DocsVisionWebClientWebApiModelsSectionMetadataModelSectionFlagsEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsSubSectionDataModel
 */
export interface DocsVisionWebClientWebApiModelsSubSectionDataModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsSubSectionDataModel
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModelsRowDataModel>}
     * @memberof DocsVisionWebClientWebApiModelsSubSectionDataModel
     */
    'rows'?: Array<DocsVisionWebClientWebApiModelsRowDataModel>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsVariableModel
 */
export interface DocsVisionWebClientWebApiModelsVariableModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsVariableModel
     */
    'name'?: string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientWebApiModelsVariableModel
     */
    'value'?: object;
    /**
     * 
     * @type {Array<object>}
     * @memberof DocsVisionWebClientWebApiModelsVariableModel
     */
    'values'?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModelsVariableModel
     */
    'enumValues'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsVariableModel
     */
    'displayValue'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModelsVariableModel
     */
    'isRequired'?: boolean;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModelsViewParameters
 */
export interface DocsVisionWebClientWebApiModelsViewParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModelsViewParameters
     */
    'viewId': string;
    /**
     * 
     * @type {Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>}
     * @memberof DocsVisionWebClientWebApiModelsViewParameters
     */
    'searchParameters'?: Array<DocsVisionPlatformWebClientModelsFolderViewSearchParameter>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform
 */
export interface DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform
     */
    'sid'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform
     */
    'accountName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform
     */
    'staffItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform
     */
    'accessControlType': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessControlTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform
     */
    'accessRights': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessRightsEnum;
}

export const DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessControlTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessControlTypeEnum = typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessControlTypeEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessControlTypeEnum];
export const DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessRightsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_38: 38,
    NUMBER_256: 256,
    NUMBER_319: 319,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983359: 983359,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessRightsEnum = typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessRightsEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatformAccessRightsEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform
 */
export interface DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform
     */
    'sid'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform
     */
    'accountName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform
     */
    'staffItemId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform
     */
    'accessControlType': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessControlTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform
     */
    'accessRights': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessRightsEnum;
}

export const DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessControlTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessControlTypeEnum = typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessControlTypeEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessControlTypeEnum];
export const DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessRightsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_34: 34,
    NUMBER_59: 59,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983099: 983099,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;

export type DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessRightsEnum = typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessRightsEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatformAccessRightsEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsCardCreateParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsCardCreateParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardCreateParameters
     */
    'cardTypeId': string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsSectionCreateParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardCreateParameters
     */
    'sections'?: Array<DocsVisionWebClientWebApiModificationModelsSectionCreateParameters>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardCreateParameters
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardCreateParameters
     */
    'isTemplate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardCreateParameters
     */
    'barcode'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsCardEditParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsCardEditParameters {
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardEditParameters
     */
    'wasRead'?: boolean;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsSectionEditParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardEditParameters
     */
    'sections'?: Array<DocsVisionWebClientWebApiModificationModelsSectionEditParameters>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardEditParameters
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardEditParameters
     */
    'isTemplate'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardEditParameters
     */
    'barcode'?: string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements
 */
export interface DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements
     */
    'oldRules': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform;
    /**
     * 
     * @type {DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform}
     * @memberof DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements
     */
    'newRules': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsFieldChangeParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsFieldChangeParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldChangeParameters
     */
    'alias': string;
    /**
     * 
     * @type {object}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldChangeParameters
     */
    'value': object;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
     */
    'alias': string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
     */
    'fieldType': DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersFieldTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
     */
    'linkedCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
     */
    'linkedSectionId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
     */
    'linkType'?: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersLinkTypeEnum;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
     */
    'localizations'?: Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>;
    /**
     * 
     * @type {Array<DocsVisionPlatformDataMetadataCardModelFieldEnumValue>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters
     */
    'enumValues'?: Array<DocsVisionPlatformDataMetadataCardModelFieldEnumValue>;
}

export const DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersFieldTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_20: 20,
    NUMBER_21: 21
} as const;

export type DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersFieldTypeEnum = typeof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersFieldTypeEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersFieldTypeEnum];
export const DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersLinkTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_7: 7
} as const;

export type DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersLinkTypeEnum = typeof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersLinkTypeEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParametersLinkTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters
     */
    'alias'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters
     */
    'localizations'?: Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>;
    /**
     * 
     * @type {Array<DocsVisionPlatformDataMetadataCardModelFieldEnumValue>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters
     */
    'enumValues'?: Array<DocsVisionPlatformDataMetadataCardModelFieldEnumValue>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsFileCreateParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsFileCreateParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFileCreateParameters
     */
    'fileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFileCreateParameters
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements
 */
export interface DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements {
    /**
     * 
     * @type {DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform}
     * @memberof DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements
     */
    'oldRules': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform;
    /**
     * 
     * @type {DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform}
     * @memberof DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements
     */
    'newRules': DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsFolderCreateParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'type'?: DocsVisionWebClientWebApiModificationModelsFolderCreateParametersTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'parentFolderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'refId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'viewCyclingEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'viewCycleCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'refreshTimeout'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'propCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'extTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'iconId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'flags'?: DocsVisionWebClientWebApiModificationModelsFolderCreateParametersFlagsEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'defaultTemplateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'defaultViewId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'currentViewId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'allowedViews'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'allowedCardTypes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderCreateParameters
     */
    'allowedTemplates'?: Array<string>;
}

export const DocsVisionWebClientWebApiModificationModelsFolderCreateParametersTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_31: 31
} as const;

export type DocsVisionWebClientWebApiModificationModelsFolderCreateParametersTypeEnum = typeof DocsVisionWebClientWebApiModificationModelsFolderCreateParametersTypeEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsFolderCreateParametersTypeEnum];
export const DocsVisionWebClientWebApiModificationModelsFolderCreateParametersFlagsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_64: 64,
    NUMBER_128: 128,
    NUMBER_256: 256,
    NUMBER_512: 512
} as const;

export type DocsVisionWebClientWebApiModificationModelsFolderCreateParametersFlagsEnum = typeof DocsVisionWebClientWebApiModificationModelsFolderCreateParametersFlagsEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsFolderCreateParametersFlagsEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsFolderEditParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsFolderEditParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'type'?: DocsVisionWebClientWebApiModificationModelsFolderEditParametersTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'parentFolderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'refId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'viewCyclingEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'viewCycleCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'refreshTimeout'?: number;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'propCardId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'extTypeId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'iconId'?: string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'flags'?: DocsVisionWebClientWebApiModificationModelsFolderEditParametersFlagsEnum;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'defaultTemplateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'defaultViewId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'currentViewId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'allowedViews'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'allowedCardTypes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocsVisionWebClientWebApiModificationModelsFolderEditParameters
     */
    'allowedTemplates'?: Array<string>;
}

export const DocsVisionWebClientWebApiModificationModelsFolderEditParametersTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_31: 31
} as const;

export type DocsVisionWebClientWebApiModificationModelsFolderEditParametersTypeEnum = typeof DocsVisionWebClientWebApiModificationModelsFolderEditParametersTypeEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsFolderEditParametersTypeEnum];
export const DocsVisionWebClientWebApiModificationModelsFolderEditParametersFlagsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_64: 64,
    NUMBER_128: 128,
    NUMBER_256: 256,
    NUMBER_512: 512
} as const;

export type DocsVisionWebClientWebApiModificationModelsFolderEditParametersFlagsEnum = typeof DocsVisionWebClientWebApiModificationModelsFolderEditParametersFlagsEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsFolderEditParametersFlagsEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel
 */
export interface DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel
     */
    'culture': string;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsRowCreateParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsRowCreateParameters {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsSectionCreateParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsRowCreateParameters
     */
    'childSections'?: Array<DocsVisionWebClientWebApiModificationModelsSectionCreateParameters>;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsFieldChangeParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsRowCreateParameters
     */
    'fields': Array<DocsVisionWebClientWebApiModificationModelsFieldChangeParameters>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsRowEditParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsRowEditParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsRowEditParameters
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsSectionEditParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsRowEditParameters
     */
    'childSections'?: Array<DocsVisionWebClientWebApiModificationModelsSectionEditParameters>;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsFieldChangeParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsRowEditParameters
     */
    'fields': Array<DocsVisionWebClientWebApiModificationModelsFieldChangeParameters>;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsSectionCreateParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsSectionCreateParameters {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsRowCreateParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionCreateParameters
     */
    'rows': Array<DocsVisionWebClientWebApiModificationModelsRowCreateParameters>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionCreateParameters
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsSectionEditParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsSectionEditParameters {
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsRowEditParameters>}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionEditParameters
     */
    'rows': Array<DocsVisionWebClientWebApiModificationModelsRowEditParameters>;
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionEditParameters
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters
     */
    'alias': string;
    /**
     * 
     * @type {number}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters
     */
    'sectionType': DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParametersSectionTypeEnum;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters
     */
    'localizations'?: Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>;
}

export const DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParametersSectionTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParametersSectionTypeEnum = typeof DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParametersSectionTypeEnum[keyof typeof DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParametersSectionTypeEnum];

/**
 * 
 * @export
 * @interface DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters
 */
export interface DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters {
    /**
     * 
     * @type {string}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters
     */
    'alias'?: string;
    /**
     * 
     * @type {Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>}
     * @memberof DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters
     */
    'localizations'?: Array<DocsVisionWebClientWebApiModificationModelsLocalizedStringLocalizedStringModel>;
}
/**
 * 
 * @export
 * @interface NewtonsoftJsonJsonConverter
 */
export interface NewtonsoftJsonJsonConverter {
    /**
     * 
     * @type {boolean}
     * @memberof NewtonsoftJsonJsonConverter
     */
    'canRead'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NewtonsoftJsonJsonConverter
     */
    'canWrite'?: boolean;
}
/**
 * 
 * @export
 * @interface NewtonsoftJsonJsonSerializerSettings
 */
export interface NewtonsoftJsonJsonSerializerSettings {
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'referenceLoopHandling'?: NewtonsoftJsonJsonSerializerSettingsReferenceLoopHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'missingMemberHandling'?: NewtonsoftJsonJsonSerializerSettingsMissingMemberHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'objectCreationHandling'?: NewtonsoftJsonJsonSerializerSettingsObjectCreationHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'nullValueHandling'?: NewtonsoftJsonJsonSerializerSettingsNullValueHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'defaultValueHandling'?: NewtonsoftJsonJsonSerializerSettingsDefaultValueHandlingEnum;
    /**
     * 
     * @type {Array<NewtonsoftJsonJsonConverter>}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'converters'?: Array<NewtonsoftJsonJsonConverter>;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'preserveReferencesHandling'?: NewtonsoftJsonJsonSerializerSettingsPreserveReferencesHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'typeNameHandling'?: NewtonsoftJsonJsonSerializerSettingsTypeNameHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'metadataPropertyHandling'?: NewtonsoftJsonJsonSerializerSettingsMetadataPropertyHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'typeNameAssemblyFormat'?: NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'typeNameAssemblyFormatHandling'?: NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'constructorHandling'?: NewtonsoftJsonJsonSerializerSettingsConstructorHandlingEnum;
    /**
     * 
     * @type {object}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'contractResolver'?: object;
    /**
     * 
     * @type {object}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'equalityComparer'?: object;
    /**
     * 
     * @type {object}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'referenceResolver'?: object;
    /**
     * 
     * @type {object}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'referenceResolverProvider'?: object;
    /**
     * 
     * @type {NewtonsoftJsonSerializationITraceWriter}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'traceWriter'?: NewtonsoftJsonSerializationITraceWriter;
    /**
     * 
     * @type {object}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'binder'?: object;
    /**
     * 
     * @type {object}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'serializationBinder'?: object;
    /**
     * 
     * @type {object}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'error'?: object;
    /**
     * 
     * @type {SystemRuntimeSerializationStreamingContext}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'context'?: SystemRuntimeSerializationStreamingContext;
    /**
     * 
     * @type {string}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'dateFormatString'?: string;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'maxDepth'?: number;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'formatting'?: NewtonsoftJsonJsonSerializerSettingsFormattingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'dateFormatHandling'?: NewtonsoftJsonJsonSerializerSettingsDateFormatHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'dateTimeZoneHandling'?: NewtonsoftJsonJsonSerializerSettingsDateTimeZoneHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'dateParseHandling'?: NewtonsoftJsonJsonSerializerSettingsDateParseHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'floatFormatHandling'?: NewtonsoftJsonJsonSerializerSettingsFloatFormatHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'floatParseHandling'?: NewtonsoftJsonJsonSerializerSettingsFloatParseHandlingEnum;
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'stringEscapeHandling'?: NewtonsoftJsonJsonSerializerSettingsStringEscapeHandlingEnum;
    /**
     * 
     * @type {string}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'culture'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NewtonsoftJsonJsonSerializerSettings
     */
    'checkAdditionalContent'?: boolean;
}

export const NewtonsoftJsonJsonSerializerSettingsReferenceLoopHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NewtonsoftJsonJsonSerializerSettingsReferenceLoopHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsReferenceLoopHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsReferenceLoopHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsMissingMemberHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsMissingMemberHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsMissingMemberHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsMissingMemberHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsObjectCreationHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NewtonsoftJsonJsonSerializerSettingsObjectCreationHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsObjectCreationHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsObjectCreationHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsNullValueHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsNullValueHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsNullValueHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsNullValueHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsDefaultValueHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type NewtonsoftJsonJsonSerializerSettingsDefaultValueHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsDefaultValueHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsDefaultValueHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsPreserveReferencesHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type NewtonsoftJsonJsonSerializerSettingsPreserveReferencesHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsPreserveReferencesHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsPreserveReferencesHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsTypeNameHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type NewtonsoftJsonJsonSerializerSettingsTypeNameHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsTypeNameHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsTypeNameHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsMetadataPropertyHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NewtonsoftJsonJsonSerializerSettingsMetadataPropertyHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsMetadataPropertyHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsMetadataPropertyHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatEnum = typeof NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatEnum];
export const NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsTypeNameAssemblyFormatHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsConstructorHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsConstructorHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsConstructorHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsConstructorHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsFormattingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsFormattingEnum = typeof NewtonsoftJsonJsonSerializerSettingsFormattingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsFormattingEnum];
export const NewtonsoftJsonJsonSerializerSettingsDateFormatHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsDateFormatHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsDateFormatHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsDateFormatHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsDateTimeZoneHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type NewtonsoftJsonJsonSerializerSettingsDateTimeZoneHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsDateTimeZoneHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsDateTimeZoneHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsDateParseHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NewtonsoftJsonJsonSerializerSettingsDateParseHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsDateParseHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsDateParseHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsFloatFormatHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NewtonsoftJsonJsonSerializerSettingsFloatFormatHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsFloatFormatHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsFloatFormatHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsFloatParseHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type NewtonsoftJsonJsonSerializerSettingsFloatParseHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsFloatParseHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsFloatParseHandlingEnum];
export const NewtonsoftJsonJsonSerializerSettingsStringEscapeHandlingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NewtonsoftJsonJsonSerializerSettingsStringEscapeHandlingEnum = typeof NewtonsoftJsonJsonSerializerSettingsStringEscapeHandlingEnum[keyof typeof NewtonsoftJsonJsonSerializerSettingsStringEscapeHandlingEnum];

/**
 * 
 * @export
 * @interface NewtonsoftJsonSerializationITraceWriter
 */
export interface NewtonsoftJsonSerializationITraceWriter {
    /**
     * 
     * @type {number}
     * @memberof NewtonsoftJsonSerializationITraceWriter
     */
    'levelFilter'?: NewtonsoftJsonSerializationITraceWriterLevelFilterEnum;
}

export const NewtonsoftJsonSerializationITraceWriterLevelFilterEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type NewtonsoftJsonSerializationITraceWriterLevelFilterEnum = typeof NewtonsoftJsonSerializationITraceWriterLevelFilterEnum[keyof typeof NewtonsoftJsonSerializationITraceWriterLevelFilterEnum];

/**
 * 
 * @export
 * @interface PowersOfAttorneyServerExtensionModelsRequestRevocationRequest
 */
export interface PowersOfAttorneyServerExtensionModelsRequestRevocationRequest {
    /**
     * 
     * @type {string}
     * @memberof PowersOfAttorneyServerExtensionModelsRequestRevocationRequest
     */
    'powerOfAttorneyUserCardId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PowersOfAttorneyServerExtensionModelsRequestRevocationRequest
     */
    'revocationType'?: PowersOfAttorneyServerExtensionModelsRequestRevocationRequestRevocationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PowersOfAttorneyServerExtensionModelsRequestRevocationRequest
     */
    'revocationReason'?: string;
}

export const PowersOfAttorneyServerExtensionModelsRequestRevocationRequestRevocationTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type PowersOfAttorneyServerExtensionModelsRequestRevocationRequestRevocationTypeEnum = typeof PowersOfAttorneyServerExtensionModelsRequestRevocationRequestRevocationTypeEnum[keyof typeof PowersOfAttorneyServerExtensionModelsRequestRevocationRequestRevocationTypeEnum];

/**
 * 
 * @export
 * @interface PowersOfAttorneyServerExtensionModelsRequestRevocationResponse
 */
export interface PowersOfAttorneyServerExtensionModelsRequestRevocationResponse {
    /**
     * 
     * @type {string}
     * @memberof PowersOfAttorneyServerExtensionModelsRequestRevocationResponse
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof PowersOfAttorneyServerExtensionModelsRequestRevocationResponse
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface SystemRuntimeSerializationStreamingContext
 */
export interface SystemRuntimeSerializationStreamingContext {
    /**
     * 
     * @type {object}
     * @memberof SystemRuntimeSerializationStreamingContext
     */
    'context'?: object;
    /**
     * 
     * @type {number}
     * @memberof SystemRuntimeSerializationStreamingContext
     */
    'state'?: SystemRuntimeSerializationStreamingContextStateEnum;
}

export const SystemRuntimeSerializationStreamingContextStateEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_64: 64,
    NUMBER_128: 128,
    NUMBER_255: 255
} as const;

export type SystemRuntimeSerializationStreamingContextStateEnum = typeof SystemRuntimeSerializationStreamingContextStateEnum[keyof typeof SystemRuntimeSerializationStreamingContextStateEnum];

/**
 * 
 * @export
 * @interface SystemTextDecoderFallback
 */
export interface SystemTextDecoderFallback {
    /**
     * 
     * @type {number}
     * @memberof SystemTextDecoderFallback
     */
    'maxCharCount'?: number;
}
/**
 * 
 * @export
 * @interface SystemTextEncoderFallback
 */
export interface SystemTextEncoderFallback {
    /**
     * 
     * @type {number}
     * @memberof SystemTextEncoderFallback
     */
    'maxCharCount'?: number;
}
/**
 * 
 * @export
 * @interface SystemTextEncoding
 */
export interface SystemTextEncoding {
    /**
     * 
     * @type {string}
     * @memberof SystemTextEncoding
     */
    'bodyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemTextEncoding
     */
    'encodingName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemTextEncoding
     */
    'headerName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemTextEncoding
     */
    'webName'?: string;
    /**
     * 
     * @type {number}
     * @memberof SystemTextEncoding
     */
    'windowsCodePage'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SystemTextEncoding
     */
    'isBrowserDisplay'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemTextEncoding
     */
    'isBrowserSave'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemTextEncoding
     */
    'isMailNewsDisplay'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemTextEncoding
     */
    'isMailNewsSave'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemTextEncoding
     */
    'isSingleByte'?: boolean;
    /**
     * 
     * @type {SystemTextEncoderFallback}
     * @memberof SystemTextEncoding
     */
    'encoderFallback'?: SystemTextEncoderFallback;
    /**
     * 
     * @type {SystemTextDecoderFallback}
     * @memberof SystemTextEncoding
     */
    'decoderFallback'?: SystemTextDecoderFallback;
    /**
     * 
     * @type {boolean}
     * @memberof SystemTextEncoding
     */
    'isReadOnly'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SystemTextEncoding
     */
    'codePage'?: number;
}
/**
 * 
 * @export
 * @interface SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension
 */
export interface SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension {
    /**
     * 
     * @type {DocsVisionEdiWebClientServerExtensionBoolResult}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension
     */
    'content'?: DocsVisionEdiWebClientServerExtensionBoolResult;
    /**
     * 
     * @type {NewtonsoftJsonJsonSerializerSettings}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension
     */
    'serializerSettings'?: NewtonsoftJsonJsonSerializerSettings;
    /**
     * 
     * @type {SystemTextEncoding}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension
     */
    'encoding'?: SystemTextEncoding;
    /**
     * 
     * @type {object}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension
     */
    'request'?: object;
}
/**
 * 
 * @export
 * @interface SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension
 */
export interface SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension {
    /**
     * 
     * @type {DocsVisionEdiWebClientServerExtensionFilesResult}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension
     */
    'content'?: DocsVisionEdiWebClientServerExtensionFilesResult;
    /**
     * 
     * @type {NewtonsoftJsonJsonSerializerSettings}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension
     */
    'serializerSettings'?: NewtonsoftJsonJsonSerializerSettings;
    /**
     * 
     * @type {SystemTextEncoding}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension
     */
    'encoding'?: SystemTextEncoding;
    /**
     * 
     * @type {object}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension
     */
    'request'?: object;
}
/**
 * 
 * @export
 * @interface SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension
 */
export interface SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension {
    /**
     * 
     * @type {Array<DocsVisionEdiWebClientServerExtensionItemResult>}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension
     */
    'content'?: Array<DocsVisionEdiWebClientServerExtensionItemResult>;
    /**
     * 
     * @type {NewtonsoftJsonJsonSerializerSettings}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension
     */
    'serializerSettings'?: NewtonsoftJsonJsonSerializerSettings;
    /**
     * 
     * @type {SystemTextEncoding}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension
     */
    'encoding'?: SystemTextEncoding;
    /**
     * 
     * @type {object}
     * @memberof SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension
     */
    'request'?: object;
}
/**
 * 
 * @export
 * @interface WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions
 */
export interface WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions {
    /**
     * 
     * @type {boolean}
     * @memberof WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions
     */
    'wipeOutDirectory'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions
     */
    'groupsToCreate'?: number;
    /**
     * 
     * @type {number}
     * @memberof WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions
     */
    'codesToCreateInGroup'?: number;
}
/**
 * 
 * @export
 * @interface WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions
 */
export interface WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions {
    /**
     * 
     * @type {WebClientIntegrationTestHelpersTestCardModelsTasksGenerationOptions}
     * @memberof WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions
     */
    'tasksGenerationOptions'?: WebClientIntegrationTestHelpersTestCardModelsTasksGenerationOptions;
    /**
     * 
     * @type {WebClientIntegrationTestHelpersTestCardModelsLinksGenerationOptions}
     * @memberof WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions
     */
    'linksGenerationOptions'?: WebClientIntegrationTestHelpersTestCardModelsLinksGenerationOptions;
    /**
     * 
     * @type {WebClientIntegrationTestHelpersTestCardModelsFileGenerationOptions}
     * @memberof WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions
     */
    'fileGenerationOptions'?: WebClientIntegrationTestHelpersTestCardModelsFileGenerationOptions;
}
/**
 * 
 * @export
 * @interface WebClientIntegrationTestHelpersTestCardModelsFileGenerationOptions
 */
export interface WebClientIntegrationTestHelpersTestCardModelsFileGenerationOptions {
    /**
     * 
     * @type {number}
     * @memberof WebClientIntegrationTestHelpersTestCardModelsFileGenerationOptions
     */
    'numberOfFiles'?: number;
}
/**
 * 
 * @export
 * @interface WebClientIntegrationTestHelpersTestCardModelsLinksGenerationOptions
 */
export interface WebClientIntegrationTestHelpersTestCardModelsLinksGenerationOptions {
    /**
     * 
     * @type {number}
     * @memberof WebClientIntegrationTestHelpersTestCardModelsLinksGenerationOptions
     */
    'numberOfLinks'?: number;
}
/**
 * 
 * @export
 * @interface WebClientIntegrationTestHelpersTestCardModelsTasksGenerationOptions
 */
export interface WebClientIntegrationTestHelpersTestCardModelsTasksGenerationOptions {
    /**
     * 
     * @type {number}
     * @memberof WebClientIntegrationTestHelpersTestCardModelsTasksGenerationOptions
     */
    'generationDepth'?: number;
    /**
     * 
     * @type {number}
     * @memberof WebClientIntegrationTestHelpersTestCardModelsTasksGenerationOptions
     */
    'numberOfTasks'?: number;
}
/**
 * 
 * @export
 * @interface WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions
 */
export interface WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions {
    /**
     * 
     * @type {string}
     * @memberof WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions
     */
    'layoutType'?: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptionsLayoutTypeEnum;
}

export const WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptionsLayoutTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptionsLayoutTypeEnum = typeof WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptionsLayoutTypeEnum[keyof typeof WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptionsLayoutTypeEnum];


/**
 * ApplicationSettingsApi - axios parameter creator
 * @export
 */
export const ApplicationSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /Api/System/GetApplicationSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApplicationSettingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApplicationSettings/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /Api/System/GetApplicationSettings
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApplicationSettingsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiApplicationSettingsId', 'id', id)
            const localVarPath = `/api/ApplicationSettings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationSettingsApi - functional programming interface
 * @export
 */
export const ApplicationSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary /Api/System/GetApplicationSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiApplicationSettingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiApplicationSettingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /Api/System/GetApplicationSettings
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiApplicationSettingsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiApplicationSettingsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationSettingsApi - factory interface
 * @export
 */
export const ApplicationSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary /Api/System/GetApplicationSettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApplicationSettingsGet(options?: any): AxiosPromise<object> {
            return localVarFp.getApiApplicationSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /Api/System/GetApplicationSettings
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApplicationSettingsId(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiApplicationSettingsId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationSettingsApi - object-oriented interface
 * @export
 * @class ApplicationSettingsApi
 * @extends {BaseAPI}
 */
export class ApplicationSettingsApi extends BaseAPI {
    /**
     * 
     * @summary /Api/System/GetApplicationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationSettingsApi
     */
    public getApiApplicationSettingsGet(options?: AxiosRequestConfig) {
        return ApplicationSettingsApiFp(this.configuration).getApiApplicationSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /Api/System/GetApplicationSettings
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationSettingsApi
     */
    public getApiApplicationSettingsId(id: string, options?: AxiosRequestConfig) {
        return ApplicationSettingsApiFp(this.configuration).getApiApplicationSettingsId(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApprovalCardApiApi - axios parameter creator
 * @export
 */
export const ApprovalCardApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiApprovalCardApiAddFileVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ApprovalCardApi/AddFileVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiApprovalCardApiId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiApprovalCardApiId', 'id', id)
            const localVarPath = `/api/ApprovalCardApi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApprovalCardApiApi - functional programming interface
 * @export
 */
export const ApprovalCardApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApprovalCardApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiApprovalCardApiAddFileVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiApprovalCardApiAddFileVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiApprovalCardApiId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiApprovalCardApiId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApprovalCardApiApi - factory interface
 * @export
 */
export const ApprovalCardApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApprovalCardApiApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiApprovalCardApiAddFileVersion(options?: any): AxiosPromise<object> {
            return localVarFp.postApiApprovalCardApiAddFileVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiApprovalCardApiId(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.postApiApprovalCardApiId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApprovalCardApiApi - object-oriented interface
 * @export
 * @class ApprovalCardApiApi
 * @extends {BaseAPI}
 */
export class ApprovalCardApiApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ApprovalCardApiApi
     */
    public postApiApprovalCardApiAddFileVersion(options?: AxiosRequestConfig) {
        return ApprovalCardApiApiFp(this.configuration).postApiApprovalCardApiAddFileVersion(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ApprovalCardApiApi
     */
    public postApiApprovalCardApiId(id: string, options?: AxiosRequestConfig) {
        return ApprovalCardApiApiFp(this.configuration).postApiApprovalCardApiId(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApprovalPathVisualizationApi - axios parameter creator
 * @export
 */
export const ApprovalPathVisualizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets settings graph
         * @param {string} reconcileCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApprovalPathVisualizationGetSettingsGraph: async (reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiApprovalPathVisualizationGetSettingsGraph', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/ApprovalPathVisualization/GetSettingsGraph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets settings graph
         * @param {string} reconcileCardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApprovalPathVisualizationId: async (reconcileCardId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiApprovalPathVisualizationId', 'reconcileCardId', reconcileCardId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiApprovalPathVisualizationId', 'id', id)
            const localVarPath = `/api/ApprovalPathVisualization/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApprovalPathVisualizationApi - functional programming interface
 * @export
 */
export const ApprovalPathVisualizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApprovalPathVisualizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets settings graph
         * @param {string} reconcileCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiApprovalPathVisualizationGetSettingsGraph(reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiApprovalPathVisualizationGetSettingsGraph(reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets settings graph
         * @param {string} reconcileCardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiApprovalPathVisualizationId(reconcileCardId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiApprovalPathVisualizationId(reconcileCardId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApprovalPathVisualizationApi - factory interface
 * @export
 */
export const ApprovalPathVisualizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApprovalPathVisualizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets settings graph
         * @param {string} reconcileCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApprovalPathVisualizationGetSettingsGraph(reconcileCardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiApprovalPathVisualizationGetSettingsGraph(reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets settings graph
         * @param {string} reconcileCardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiApprovalPathVisualizationId(reconcileCardId: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiApprovalPathVisualizationId(reconcileCardId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApprovalPathVisualizationApi - object-oriented interface
 * @export
 * @class ApprovalPathVisualizationApi
 * @extends {BaseAPI}
 */
export class ApprovalPathVisualizationApi extends BaseAPI {
    /**
     * 
     * @summary Gets settings graph
     * @param {string} reconcileCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalPathVisualizationApi
     */
    public getApiApprovalPathVisualizationGetSettingsGraph(reconcileCardId: string, options?: AxiosRequestConfig) {
        return ApprovalPathVisualizationApiFp(this.configuration).getApiApprovalPathVisualizationGetSettingsGraph(reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets settings graph
     * @param {string} reconcileCardId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalPathVisualizationApi
     */
    public getApiApprovalPathVisualizationId(reconcileCardId: string, id: string, options?: AxiosRequestConfig) {
        return ApprovalPathVisualizationApiFp(this.configuration).getApiApprovalPathVisualizationId(reconcileCardId, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ArchiveCaseApi - axios parameter creator
 * @export
 */
export const ArchiveCaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiArchiveCaseId: async (id: string, query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiArchiveCaseId', 'id', id)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiArchiveCaseId', 'query', query)
            const localVarPath = `/api/ArchiveCase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiArchiveCaseLoadArchiveCaseData: async (query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiArchiveCaseLoadArchiveCaseData', 'query', query)
            const localVarPath = `/api/ArchiveCase/LoadArchiveCaseData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArchiveCaseApi - functional programming interface
 * @export
 */
export const ArchiveCaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArchiveCaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiArchiveCaseId(id: string, query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiArchiveCaseId(id, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiArchiveCaseLoadArchiveCaseData(query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiArchiveCaseLoadArchiveCaseData(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArchiveCaseApi - factory interface
 * @export
 */
export const ArchiveCaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArchiveCaseApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiArchiveCaseId(id: string, query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options?: any): AxiosPromise<object> {
            return localVarFp.postApiArchiveCaseId(id, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiArchiveCaseLoadArchiveCaseData(query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options?: any): AxiosPromise<object> {
            return localVarFp.postApiArchiveCaseLoadArchiveCaseData(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArchiveCaseApi - object-oriented interface
 * @export
 * @class ArchiveCaseApi
 * @extends {BaseAPI}
 */
export class ArchiveCaseApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveCaseApi
     */
    public postApiArchiveCaseId(id: string, query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options?: AxiosRequestConfig) {
        return ArchiveCaseApiFp(this.configuration).postApiArchiveCaseId(id, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchiveCaseApi
     */
    public postApiArchiveCaseLoadArchiveCaseData(query: DocsVisionArchiveManagementWebClientModelsSearchArchiveCaseQuery, options?: AxiosRequestConfig) {
        return ArchiveCaseApiFp(this.configuration).postApiArchiveCaseLoadArchiveCaseData(query, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenticationKindsApi - axios parameter creator
 * @export
 */
export const AuthenticationKindsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} extensionId 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticationKindsCheckUserAuthenticationLogin: async (extensionId: string, login: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'extensionId' is not null or undefined
            assertParamExists('getApiAuthenticationKindsCheckUserAuthenticationLogin', 'extensionId', extensionId)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getApiAuthenticationKindsCheckUserAuthenticationLogin', 'login', login)
            const localVarPath = `/api/AuthenticationKinds/CheckUserAuthenticationLogin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (extensionId !== undefined) {
                localVarQueryParameter['extensionId'] = extensionId;
            }

            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} extensionId 
         * @param {string} login 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticationKindsId: async (extensionId: string, login: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'extensionId' is not null or undefined
            assertParamExists('getApiAuthenticationKindsId', 'extensionId', extensionId)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getApiAuthenticationKindsId', 'login', login)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiAuthenticationKindsId', 'id', id)
            const localVarPath = `/api/AuthenticationKinds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (extensionId !== undefined) {
                localVarQueryParameter['extensionId'] = extensionId;
            }

            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationKindsApi - functional programming interface
 * @export
 */
export const AuthenticationKindsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationKindsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} extensionId 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticationKindsCheckUserAuthenticationLogin(extensionId: string, login: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticationKindsCheckUserAuthenticationLogin(extensionId, login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} extensionId 
         * @param {string} login 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAuthenticationKindsId(extensionId: string, login: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAuthenticationKindsId(extensionId, login, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationKindsApi - factory interface
 * @export
 */
export const AuthenticationKindsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationKindsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} extensionId 
         * @param {string} login 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticationKindsCheckUserAuthenticationLogin(extensionId: string, login: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiAuthenticationKindsCheckUserAuthenticationLogin(extensionId, login, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} extensionId 
         * @param {string} login 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAuthenticationKindsId(extensionId: string, login: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiAuthenticationKindsId(extensionId, login, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationKindsApi - object-oriented interface
 * @export
 * @class AuthenticationKindsApi
 * @extends {BaseAPI}
 */
export class AuthenticationKindsApi extends BaseAPI {
    /**
     * 
     * @summary Get card html by xslt id
     * @param {string} extensionId 
     * @param {string} login 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationKindsApi
     */
    public getApiAuthenticationKindsCheckUserAuthenticationLogin(extensionId: string, login: string, options?: AxiosRequestConfig) {
        return AuthenticationKindsApiFp(this.configuration).getApiAuthenticationKindsCheckUserAuthenticationLogin(extensionId, login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get card html by xslt id
     * @param {string} extensionId 
     * @param {string} login 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationKindsApi
     */
    public getApiAuthenticationKindsId(extensionId: string, login: string, id: string, options?: AxiosRequestConfig) {
        return AuthenticationKindsApiFp(this.configuration).getApiAuthenticationKindsId(extensionId, login, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AvailableTemplatesApi - axios parameter creator
 * @export
 */
export const AvailableTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get card html by xslt alias
         * @param {string} cardId 
         * @param {string} alias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesGetHtmlByXsltAlias: async (cardId: string, alias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiAvailableTemplatesGetHtmlByXsltAlias', 'cardId', cardId)
            // verify required parameter 'alias' is not null or undefined
            assertParamExists('getApiAvailableTemplatesGetHtmlByXsltAlias', 'alias', alias)
            const localVarPath = `/api/AvailableTemplates/GetHtmlByXsltAlias`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (alias !== undefined) {
                localVarQueryParameter['alias'] = alias;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} cardId 
         * @param {string} xsltId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesGetHtmlByXsltId: async (cardId: string, xsltId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiAvailableTemplatesGetHtmlByXsltId', 'cardId', cardId)
            // verify required parameter 'xsltId' is not null or undefined
            assertParamExists('getApiAvailableTemplatesGetHtmlByXsltId', 'xsltId', xsltId)
            const localVarPath = `/api/AvailableTemplates/GetHtmlByXsltId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (xsltId !== undefined) {
                localVarQueryParameter['xsltId'] = xsltId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get card xml
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesGetXml: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiAvailableTemplatesGetXml', 'cardId', cardId)
            const localVarPath = `/api/AvailableTemplates/GetXml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} cardId 
         * @param {string} xsltId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesId: async (cardId: string, xsltId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiAvailableTemplatesId', 'cardId', cardId)
            // verify required parameter 'xsltId' is not null or undefined
            assertParamExists('getApiAvailableTemplatesId', 'xsltId', xsltId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiAvailableTemplatesId', 'id', id)
            const localVarPath = `/api/AvailableTemplates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (xsltId !== undefined) {
                localVarQueryParameter['xsltId'] = xsltId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvailableTemplatesApi - functional programming interface
 * @export
 */
export const AvailableTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvailableTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get card html by xslt alias
         * @param {string} cardId 
         * @param {string} alias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAvailableTemplatesGetHtmlByXsltAlias(cardId: string, alias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAvailableTemplatesGetHtmlByXsltAlias(cardId, alias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} cardId 
         * @param {string} xsltId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAvailableTemplatesGetHtmlByXsltId(cardId: string, xsltId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAvailableTemplatesGetHtmlByXsltId(cardId, xsltId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get card xml
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAvailableTemplatesGetXml(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAvailableTemplatesGetXml(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} cardId 
         * @param {string} xsltId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiAvailableTemplatesId(cardId: string, xsltId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiAvailableTemplatesId(cardId, xsltId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvailableTemplatesApi - factory interface
 * @export
 */
export const AvailableTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvailableTemplatesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get card html by xslt alias
         * @param {string} cardId 
         * @param {string} alias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesGetHtmlByXsltAlias(cardId: string, alias: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiAvailableTemplatesGetHtmlByXsltAlias(cardId, alias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} cardId 
         * @param {string} xsltId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesGetHtmlByXsltId(cardId: string, xsltId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiAvailableTemplatesGetHtmlByXsltId(cardId, xsltId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get card xml
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesGetXml(cardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiAvailableTemplatesGetXml(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get card html by xslt id
         * @param {string} cardId 
         * @param {string} xsltId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiAvailableTemplatesId(cardId: string, xsltId: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiAvailableTemplatesId(cardId, xsltId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AvailableTemplatesApi - object-oriented interface
 * @export
 * @class AvailableTemplatesApi
 * @extends {BaseAPI}
 */
export class AvailableTemplatesApi extends BaseAPI {
    /**
     * 
     * @summary Get card html by xslt alias
     * @param {string} cardId 
     * @param {string} alias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableTemplatesApi
     */
    public getApiAvailableTemplatesGetHtmlByXsltAlias(cardId: string, alias: string, options?: AxiosRequestConfig) {
        return AvailableTemplatesApiFp(this.configuration).getApiAvailableTemplatesGetHtmlByXsltAlias(cardId, alias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get card html by xslt id
     * @param {string} cardId 
     * @param {string} xsltId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableTemplatesApi
     */
    public getApiAvailableTemplatesGetHtmlByXsltId(cardId: string, xsltId: string, options?: AxiosRequestConfig) {
        return AvailableTemplatesApiFp(this.configuration).getApiAvailableTemplatesGetHtmlByXsltId(cardId, xsltId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get card xml
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableTemplatesApi
     */
    public getApiAvailableTemplatesGetXml(cardId: string, options?: AxiosRequestConfig) {
        return AvailableTemplatesApiFp(this.configuration).getApiAvailableTemplatesGetXml(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get card html by xslt id
     * @param {string} cardId 
     * @param {string} xsltId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableTemplatesApi
     */
    public getApiAvailableTemplatesId(cardId: string, xsltId: string, id: string, options?: AxiosRequestConfig) {
        return AvailableTemplatesApiFp(this.configuration).getApiAvailableTemplatesId(cardId, xsltId, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BarcodeSearchButtonApi - axios parameter creator
 * @export
 */
export const BarcodeSearchButtonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search
         * @param {string} id 
         * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBarcodeSearchButtonId: async (id: string, barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiBarcodeSearchButtonId', 'id', id)
            // verify required parameter 'barcodeSearchRequestModel' is not null or undefined
            assertParamExists('postApiBarcodeSearchButtonId', 'barcodeSearchRequestModel', barcodeSearchRequestModel)
            const localVarPath = `/api/BarcodeSearchButton/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(barcodeSearchRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBarcodeSearchButtonSearch: async (barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'barcodeSearchRequestModel' is not null or undefined
            assertParamExists('postApiBarcodeSearchButtonSearch', 'barcodeSearchRequestModel', barcodeSearchRequestModel)
            const localVarPath = `/api/BarcodeSearchButton/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(barcodeSearchRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BarcodeSearchButtonApi - functional programming interface
 * @export
 */
export const BarcodeSearchButtonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BarcodeSearchButtonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Search
         * @param {string} id 
         * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBarcodeSearchButtonId(id: string, barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBarcodeSearchButtonId(id, barcodeSearchRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBarcodeSearchButtonSearch(barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBarcodeSearchButtonSearch(barcodeSearchRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BarcodeSearchButtonApi - factory interface
 * @export
 */
export const BarcodeSearchButtonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BarcodeSearchButtonApiFp(configuration)
    return {
        /**
         * 
         * @summary Search
         * @param {string} id 
         * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBarcodeSearchButtonId(id: string, barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options?: any): AxiosPromise<object> {
            return localVarFp.postApiBarcodeSearchButtonId(id, barcodeSearchRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBarcodeSearchButtonSearch(barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options?: any): AxiosPromise<object> {
            return localVarFp.postApiBarcodeSearchButtonSearch(barcodeSearchRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BarcodeSearchButtonApi - object-oriented interface
 * @export
 * @class BarcodeSearchButtonApi
 * @extends {BaseAPI}
 */
export class BarcodeSearchButtonApi extends BaseAPI {
    /**
     * 
     * @summary Search
     * @param {string} id 
     * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarcodeSearchButtonApi
     */
    public postApiBarcodeSearchButtonId(id: string, barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options?: AxiosRequestConfig) {
        return BarcodeSearchButtonApiFp(this.configuration).postApiBarcodeSearchButtonId(id, barcodeSearchRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {DocsVisionWebClientModelsBarcodeSearchRequestModel} barcodeSearchRequestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BarcodeSearchButtonApi
     */
    public postApiBarcodeSearchButtonSearch(barcodeSearchRequestModel: DocsVisionWebClientModelsBarcodeSearchRequestModel, options?: AxiosRequestConfig) {
        return BarcodeSearchButtonApiFp(this.configuration).postApiBarcodeSearchButtonSearch(barcodeSearchRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BaseCardApi - axios parameter creator
 * @export
 */
export const BaseCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary HTTP: /Card/SetWasRead
         * @param {string} id 
         * @param {DocsVisionWebClientModelsWasReadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBaseCardId: async (id: string, request: DocsVisionWebClientModelsWasReadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiBaseCardId', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiBaseCardId', 'request', request)
            const localVarPath = `/api/BaseCard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Card/SetWasRead
         * @param {DocsVisionWebClientModelsWasReadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBaseCardSetWasRead: async (request: DocsVisionWebClientModelsWasReadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiBaseCardSetWasRead', 'request', request)
            const localVarPath = `/api/BaseCard/SetWasRead`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BaseCardApi - functional programming interface
 * @export
 */
export const BaseCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BaseCardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary HTTP: /Card/SetWasRead
         * @param {string} id 
         * @param {DocsVisionWebClientModelsWasReadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBaseCardId(id: string, request: DocsVisionWebClientModelsWasReadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBaseCardId(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Card/SetWasRead
         * @param {DocsVisionWebClientModelsWasReadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBaseCardSetWasRead(request: DocsVisionWebClientModelsWasReadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBaseCardSetWasRead(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BaseCardApi - factory interface
 * @export
 */
export const BaseCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BaseCardApiFp(configuration)
    return {
        /**
         * 
         * @summary HTTP: /Card/SetWasRead
         * @param {string} id 
         * @param {DocsVisionWebClientModelsWasReadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBaseCardId(id: string, request: DocsVisionWebClientModelsWasReadRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiBaseCardId(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Card/SetWasRead
         * @param {DocsVisionWebClientModelsWasReadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBaseCardSetWasRead(request: DocsVisionWebClientModelsWasReadRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiBaseCardSetWasRead(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BaseCardApi - object-oriented interface
 * @export
 * @class BaseCardApi
 * @extends {BaseAPI}
 */
export class BaseCardApi extends BaseAPI {
    /**
     * 
     * @summary HTTP: /Card/SetWasRead
     * @param {string} id 
     * @param {DocsVisionWebClientModelsWasReadRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaseCardApi
     */
    public postApiBaseCardId(id: string, request: DocsVisionWebClientModelsWasReadRequest, options?: AxiosRequestConfig) {
        return BaseCardApiFp(this.configuration).postApiBaseCardId(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Card/SetWasRead
     * @param {DocsVisionWebClientModelsWasReadRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaseCardApi
     */
    public postApiBaseCardSetWasRead(request: DocsVisionWebClientModelsWasReadRequest, options?: AxiosRequestConfig) {
        return BaseCardApiFp(this.configuration).postApiBaseCardSetWasRead(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BusinessCalendarApi - axios parameter creator
 * @export
 */
export const BusinessCalendarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {DocsVisionWebClientModelsIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiBusinessCalendarCalculateIntervalsDates: async (requestModel: DocsVisionWebClientModelsIntervalsCalculationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiBusinessCalendarCalculateIntervalsDates', 'requestModel', requestModel)
            const localVarPath = `/api/BusinessCalendar/CalculateIntervalsDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get duration
         * @param {DocsVisionWebClientModelsCalendarDurationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetDuration: async (requestModel: DocsVisionWebClientModelsCalendarDurationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiBusinessCalendarGetDuration', 'requestModel', requestModel)
            const localVarPath = `/api/BusinessCalendar/GetDuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get end date
         * @param {DocsVisionWebClientModelsCalendarEndDateRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetEndDate: async (requestModel: DocsVisionWebClientModelsCalendarEndDateRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiBusinessCalendarGetEndDate', 'requestModel', requestModel)
            const localVarPath = `/api/BusinessCalendar/GetEndDate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get start date
         * @param {DocsVisionWebClientModelsCalendarStartDateRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetStartDate: async (requestModel: DocsVisionWebClientModelsCalendarStartDateRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiBusinessCalendarGetStartDate', 'requestModel', requestModel)
            const localVarPath = `/api/BusinessCalendar/GetStartDate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get work-time settings
         * @param {DocsVisionWebClientModelsCalendarRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetWorkTimeSettings: async (requestModel: DocsVisionWebClientModelsCalendarRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiBusinessCalendarGetWorkTimeSettings', 'requestModel', requestModel)
            const localVarPath = `/api/BusinessCalendar/GetWorkTimeSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessCalendarApi - functional programming interface
 * @export
 */
export const BusinessCalendarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessCalendarApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {DocsVisionWebClientModelsIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiBusinessCalendarCalculateIntervalsDates(requestModel: DocsVisionWebClientModelsIntervalsCalculationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBusinessCalendarCalculateIntervalsDates(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get duration
         * @param {DocsVisionWebClientModelsCalendarDurationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBusinessCalendarGetDuration(requestModel: DocsVisionWebClientModelsCalendarDurationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBusinessCalendarGetDuration(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get end date
         * @param {DocsVisionWebClientModelsCalendarEndDateRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBusinessCalendarGetEndDate(requestModel: DocsVisionWebClientModelsCalendarEndDateRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBusinessCalendarGetEndDate(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get start date
         * @param {DocsVisionWebClientModelsCalendarStartDateRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBusinessCalendarGetStartDate(requestModel: DocsVisionWebClientModelsCalendarStartDateRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBusinessCalendarGetStartDate(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get work-time settings
         * @param {DocsVisionWebClientModelsCalendarRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiBusinessCalendarGetWorkTimeSettings(requestModel: DocsVisionWebClientModelsCalendarRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionBackOfficeWebClientBusinessCalendarCalendarYearSettings>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiBusinessCalendarGetWorkTimeSettings(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessCalendarApi - factory interface
 * @export
 */
export const BusinessCalendarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessCalendarApiFp(configuration)
    return {
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {DocsVisionWebClientModelsIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiBusinessCalendarCalculateIntervalsDates(requestModel: DocsVisionWebClientModelsIntervalsCalculationRequestModel, options?: any): AxiosPromise<Array<DocsVisionBackOfficeWebClientBusinessCalendarTaskGroupInterval>> {
            return localVarFp.postApiBusinessCalendarCalculateIntervalsDates(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get duration
         * @param {DocsVisionWebClientModelsCalendarDurationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetDuration(requestModel: DocsVisionWebClientModelsCalendarDurationRequestModel, options?: any): AxiosPromise<number> {
            return localVarFp.postApiBusinessCalendarGetDuration(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get end date
         * @param {DocsVisionWebClientModelsCalendarEndDateRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetEndDate(requestModel: DocsVisionWebClientModelsCalendarEndDateRequestModel, options?: any): AxiosPromise<string> {
            return localVarFp.postApiBusinessCalendarGetEndDate(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get start date
         * @param {DocsVisionWebClientModelsCalendarStartDateRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetStartDate(requestModel: DocsVisionWebClientModelsCalendarStartDateRequestModel, options?: any): AxiosPromise<string> {
            return localVarFp.postApiBusinessCalendarGetStartDate(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get work-time settings
         * @param {DocsVisionWebClientModelsCalendarRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiBusinessCalendarGetWorkTimeSettings(requestModel: DocsVisionWebClientModelsCalendarRequestModel, options?: any): AxiosPromise<Array<DocsVisionBackOfficeWebClientBusinessCalendarCalendarYearSettings>> {
            return localVarFp.postApiBusinessCalendarGetWorkTimeSettings(requestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessCalendarApi - object-oriented interface
 * @export
 * @class BusinessCalendarApi
 * @extends {BaseAPI}
 */
export class BusinessCalendarApi extends BaseAPI {
    /**
     * 
     * @summary Calculate start/end dates of task group intervals, based on the specified durations.
     * @param {DocsVisionWebClientModelsIntervalsCalculationRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BusinessCalendarApi
     */
    public postApiBusinessCalendarCalculateIntervalsDates(requestModel: DocsVisionWebClientModelsIntervalsCalculationRequestModel, options?: AxiosRequestConfig) {
        return BusinessCalendarApiFp(this.configuration).postApiBusinessCalendarCalculateIntervalsDates(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get duration
     * @param {DocsVisionWebClientModelsCalendarDurationRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCalendarApi
     */
    public postApiBusinessCalendarGetDuration(requestModel: DocsVisionWebClientModelsCalendarDurationRequestModel, options?: AxiosRequestConfig) {
        return BusinessCalendarApiFp(this.configuration).postApiBusinessCalendarGetDuration(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get end date
     * @param {DocsVisionWebClientModelsCalendarEndDateRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCalendarApi
     */
    public postApiBusinessCalendarGetEndDate(requestModel: DocsVisionWebClientModelsCalendarEndDateRequestModel, options?: AxiosRequestConfig) {
        return BusinessCalendarApiFp(this.configuration).postApiBusinessCalendarGetEndDate(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get start date
     * @param {DocsVisionWebClientModelsCalendarStartDateRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCalendarApi
     */
    public postApiBusinessCalendarGetStartDate(requestModel: DocsVisionWebClientModelsCalendarStartDateRequestModel, options?: AxiosRequestConfig) {
        return BusinessCalendarApiFp(this.configuration).postApiBusinessCalendarGetStartDate(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get work-time settings
     * @param {DocsVisionWebClientModelsCalendarRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessCalendarApi
     */
    public postApiBusinessCalendarGetWorkTimeSettings(requestModel: DocsVisionWebClientModelsCalendarRequestModel, options?: AxiosRequestConfig) {
        return BusinessCalendarApiFp(this.configuration).postApiBusinessCalendarGetWorkTimeSettings(requestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardDataApi - axios parameter creator
 * @export
 */
export const CardDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets card digest.
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardDataGetDigest: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiCardDataGetDigest', 'cardId', cardId)
            const localVarPath = `/api/CardData/GetDigest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cardId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets card digest without showing error if something goes wrong
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardDataGetDigestSilence: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiCardDataGetDigestSilence', 'cardId', cardId)
            const localVarPath = `/api/CardData/GetDigestSilence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cardId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get value of the field
         * @param {DocsVisionWebClientModelsGetFieldValueRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardDataGetFieldValue: async (request: DocsVisionWebClientModelsGetFieldValueRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiCardDataGetFieldValue', 'request', request)
            const localVarPath = `/api/CardData/GetFieldValue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardDataApi - functional programming interface
 * @export
 */
export const CardDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets card digest.
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardDataGetDigest(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardDataGetDigest(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets card digest without showing error if something goes wrong
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardDataGetDigestSilence(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardDataGetDigestSilence(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get value of the field
         * @param {DocsVisionWebClientModelsGetFieldValueRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardDataGetFieldValue(request: DocsVisionWebClientModelsGetFieldValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardDataGetFieldValue(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardDataApi - factory interface
 * @export
 */
export const CardDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardDataApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets card digest.
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardDataGetDigest(cardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.postApiCardDataGetDigest(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets card digest without showing error if something goes wrong
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardDataGetDigestSilence(cardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.postApiCardDataGetDigestSilence(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get value of the field
         * @param {DocsVisionWebClientModelsGetFieldValueRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardDataGetFieldValue(request: DocsVisionWebClientModelsGetFieldValueRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemObject> {
            return localVarFp.postApiCardDataGetFieldValue(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardDataApi - object-oriented interface
 * @export
 * @class CardDataApi
 * @extends {BaseAPI}
 */
export class CardDataApi extends BaseAPI {
    /**
     * 
     * @summary Gets card digest.
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardDataApi
     */
    public postApiCardDataGetDigest(cardId: string, options?: AxiosRequestConfig) {
        return CardDataApiFp(this.configuration).postApiCardDataGetDigest(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets card digest without showing error if something goes wrong
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardDataApi
     */
    public postApiCardDataGetDigestSilence(cardId: string, options?: AxiosRequestConfig) {
        return CardDataApiFp(this.configuration).postApiCardDataGetDigestSilence(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get value of the field
     * @param {DocsVisionWebClientModelsGetFieldValueRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardDataApi
     */
    public postApiCardDataGetFieldValue(request: DocsVisionWebClientModelsGetFieldValueRequest, options?: AxiosRequestConfig) {
        return CardDataApiFp(this.configuration).postApiCardDataGetFieldValue(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardKindApi - axios parameter creator
 * @export
 */
export const CardKindApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get card kind by id.
         * @param {string} cardKindId Card kind identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardKindGetCardKind: async (cardKindId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardKindId' is not null or undefined
            assertParamExists('postApiCardKindGetCardKind', 'cardKindId', cardKindId)
            const localVarPath = `/api/CardKind/GetCardKind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cardKindId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get card kinds by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} cardKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardKindGetCardKinds: async (cardKinds: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardKinds' is not null or undefined
            assertParamExists('postApiCardKindGetCardKinds', 'cardKinds', cardKinds)
            const localVarPath = `/api/CardKind/GetCardKinds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cardKinds, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardKindApi - functional programming interface
 * @export
 */
export const CardKindApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardKindApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get card kind by id.
         * @param {string} cardKindId Card kind identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardKindGetCardKind(cardKindId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardKindGetCardKind(cardKindId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get card kinds by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} cardKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardKindGetCardKinds(cardKinds: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardKindGetCardKinds(cardKinds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardKindApi - factory interface
 * @export
 */
export const CardKindApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardKindApiFp(configuration)
    return {
        /**
         * 
         * @summary Get card kind by id.
         * @param {string} cardKindId Card kind identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardKindGetCardKind(cardKindId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCardKindCardKindModel> {
            return localVarFp.postApiCardKindGetCardKind(cardKindId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get card kinds by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} cardKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardKindGetCardKinds(cardKinds: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindModel> {
            return localVarFp.postApiCardKindGetCardKinds(cardKinds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardKindApi - object-oriented interface
 * @export
 * @class CardKindApi
 * @extends {BaseAPI}
 */
export class CardKindApi extends BaseAPI {
    /**
     * 
     * @summary Get card kind by id.
     * @param {string} cardKindId Card kind identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardKindApi
     */
    public postApiCardKindGetCardKind(cardKindId: string, options?: AxiosRequestConfig) {
        return CardKindApiFp(this.configuration).postApiCardKindGetCardKind(cardKindId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get card kinds by list of ids.
     * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} cardKinds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardKindApi
     */
    public postApiCardKindGetCardKinds(cardKinds: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig) {
        return CardKindApiFp(this.configuration).postApiCardKindGetCardKinds(cardKinds, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardOperationsApi - axios parameter creator
 * @export
 */
export const CardOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary HTTP: CardOperations/CheckOperationAvailable
         * @param {string} cardId card id
         * @param {string} builtInOperationId builtIn operation id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardOperationsCheckOperationAvailable: async (cardId: string, builtInOperationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiCardOperationsCheckOperationAvailable', 'cardId', cardId)
            // verify required parameter 'builtInOperationId' is not null or undefined
            assertParamExists('getApiCardOperationsCheckOperationAvailable', 'builtInOperationId', builtInOperationId)
            const localVarPath = `/api/CardOperations/CheckOperationAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (builtInOperationId !== undefined) {
                localVarQueryParameter['builtInOperationId'] = builtInOperationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: CardOperations/CheckOperationAvailable
         * @param {string} cardId card id
         * @param {string} builtInOperationId builtIn operation id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardOperationsId: async (cardId: string, builtInOperationId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiCardOperationsId', 'cardId', cardId)
            // verify required parameter 'builtInOperationId' is not null or undefined
            assertParamExists('getApiCardOperationsId', 'builtInOperationId', builtInOperationId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiCardOperationsId', 'id', id)
            const localVarPath = `/api/CardOperations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (builtInOperationId !== undefined) {
                localVarQueryParameter['builtInOperationId'] = builtInOperationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardOperationsApi - functional programming interface
 * @export
 */
export const CardOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary HTTP: CardOperations/CheckOperationAvailable
         * @param {string} cardId card id
         * @param {string} builtInOperationId builtIn operation id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCardOperationsCheckOperationAvailable(cardId: string, builtInOperationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCardOperationsCheckOperationAvailable(cardId, builtInOperationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: CardOperations/CheckOperationAvailable
         * @param {string} cardId card id
         * @param {string} builtInOperationId builtIn operation id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCardOperationsId(cardId: string, builtInOperationId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCardOperationsId(cardId, builtInOperationId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardOperationsApi - factory interface
 * @export
 */
export const CardOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardOperationsApiFp(configuration)
    return {
        /**
         * 
         * @summary HTTP: CardOperations/CheckOperationAvailable
         * @param {string} cardId card id
         * @param {string} builtInOperationId builtIn operation id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardOperationsCheckOperationAvailable(cardId: string, builtInOperationId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiCardOperationsCheckOperationAvailable(cardId, builtInOperationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: CardOperations/CheckOperationAvailable
         * @param {string} cardId card id
         * @param {string} builtInOperationId builtIn operation id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardOperationsId(cardId: string, builtInOperationId: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiCardOperationsId(cardId, builtInOperationId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardOperationsApi - object-oriented interface
 * @export
 * @class CardOperationsApi
 * @extends {BaseAPI}
 */
export class CardOperationsApi extends BaseAPI {
    /**
     * 
     * @summary HTTP: CardOperations/CheckOperationAvailable
     * @param {string} cardId card id
     * @param {string} builtInOperationId builtIn operation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApi
     */
    public getApiCardOperationsCheckOperationAvailable(cardId: string, builtInOperationId: string, options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).getApiCardOperationsCheckOperationAvailable(cardId, builtInOperationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: CardOperations/CheckOperationAvailable
     * @param {string} cardId card id
     * @param {string} builtInOperationId builtIn operation id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApi
     */
    public getApiCardOperationsId(cardId: string, builtInOperationId: string, id: string, options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).getApiCardOperationsId(cardId, builtInOperationId, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardTypesApi - axios parameter creator
 * @export
 */
export const CardTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets card types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CardTypes/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets card types
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardTypesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiCardTypesId', 'id', id)
            const localVarPath = `/api/CardTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardTypesApi - functional programming interface
 * @export
 */
export const CardTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets card types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCardTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCardTypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets card types
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCardTypesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCardTypesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardTypesApi - factory interface
 * @export
 */
export const CardTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets card types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardTypesGet(options?: any): AxiosPromise<object> {
            return localVarFp.getApiCardTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets card types
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCardTypesId(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiCardTypesId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardTypesApi - object-oriented interface
 * @export
 * @class CardTypesApi
 * @extends {BaseAPI}
 */
export class CardTypesApi extends BaseAPI {
    /**
     * 
     * @summary Gets card types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTypesApi
     */
    public getApiCardTypesGet(options?: AxiosRequestConfig) {
        return CardTypesApiFp(this.configuration).getApiCardTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets card types
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTypesApi
     */
    public getApiCardTypesId(id: string, options?: AxiosRequestConfig) {
        return CardTypesApiFp(this.configuration).getApiCardTypesId(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardTypesV1Api - axios parameter creator
 * @export
 */
export const CardTypesV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Cardtypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cardtypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardtypesCardTypeId: async (cardTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('getApiV1CardtypesCardTypeId', 'cardTypeId', cardTypeId)
            const localVarPath = `/api/v1/cardtypes/{cardTypeId}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardTypesV1Api - functional programming interface
 * @export
 */
export const CardTypesV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardTypesV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1Cardtypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardTypeModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1Cardtypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardtypesCardTypeId(cardTypeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsCardTypeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardtypesCardTypeId(cardTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardTypesV1Api - factory interface
 * @export
 */
export const CardTypesV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardTypesV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Cardtypes(options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardTypeModel>> {
            return localVarFp.getApiV1Cardtypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardtypesCardTypeId(cardTypeId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsCardTypeModel> {
            return localVarFp.getApiV1CardtypesCardTypeId(cardTypeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardTypesV1Api - object-oriented interface
 * @export
 * @class CardTypesV1Api
 * @extends {BaseAPI}
 */
export class CardTypesV1Api extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTypesV1Api
     */
    public getApiV1Cardtypes(options?: AxiosRequestConfig) {
        return CardTypesV1ApiFp(this.configuration).getApiV1Cardtypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTypesV1Api
     */
    public getApiV1CardtypesCardTypeId(cardTypeId: string, options?: AxiosRequestConfig) {
        return CardTypesV1ApiFp(this.configuration).getApiV1CardtypesCardTypeId(cardTypeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardsPresentationApi - axios parameter creator
 * @export
 */
export const CardsPresentationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST: /SearchQuery/GetFolderCards
         * @param {DocsVisionWebClientModelsGetFolderCardsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationGetFolderCards: async (request: DocsVisionWebClientModelsGetFolderCardsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiCardsPresentationGetFolderCards', 'request', request)
            const localVarPath = `/api/CardsPresentation/GetFolderCards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get cards presentation from card list, retrieved by {M:DocsVision.Controllers.CardsPresentationController.Search(DocsVision.Platform.WebClient.Models.SearchRequestModel)}
         * @param {DocsVisionWebClientModelsSearchPresentationRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationGetSearchResultsPresentation: async (request: DocsVisionWebClientModelsSearchPresentationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiCardsPresentationGetSearchResultsPresentation', 'request', request)
            const localVarPath = `/api/CardsPresentation/GetSearchResultsPresentation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute search query with Digest view.
         * @param {DocsVisionPlatformWebClientModelsSearchRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationSearch: async (requestModel: DocsVisionPlatformWebClientModelsSearchRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiCardsPresentationSearch', 'requestModel', requestModel)
            const localVarPath = `/api/CardsPresentation/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute search query with Digest view columns
         * @param {DocsVisionPlatformWebClientModelsSearchRequestModelDiagram} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationSearchWithViewColumns: async (requestModel: DocsVisionPlatformWebClientModelsSearchRequestModelDiagram, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiCardsPresentationSearchWithViewColumns', 'requestModel', requestModel)
            const localVarPath = `/api/CardsPresentation/SearchWithViewColumns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsPresentationApi - functional programming interface
 * @export
 */
export const CardsPresentationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsPresentationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST: /SearchQuery/GetFolderCards
         * @param {DocsVisionWebClientModelsGetFolderCardsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardsPresentationGetFolderCards(request: DocsVisionWebClientModelsGetFolderCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsSearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardsPresentationGetFolderCards(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get cards presentation from card list, retrieved by {M:DocsVision.Controllers.CardsPresentationController.Search(DocsVision.Platform.WebClient.Models.SearchRequestModel)}
         * @param {DocsVisionWebClientModelsSearchPresentationRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardsPresentationGetSearchResultsPresentation(request: DocsVisionWebClientModelsSearchPresentationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionPlatformWebClientModelsCardPresentation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardsPresentationGetSearchResultsPresentation(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Execute search query with Digest view.
         * @param {DocsVisionPlatformWebClientModelsSearchRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardsPresentationSearch(requestModel: DocsVisionPlatformWebClientModelsSearchRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsSearchResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardsPresentationSearch(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Execute search query with Digest view columns
         * @param {DocsVisionPlatformWebClientModelsSearchRequestModelDiagram} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCardsPresentationSearchWithViewColumns(requestModel: DocsVisionPlatformWebClientModelsSearchRequestModelDiagram, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsSearchResponseModelDiagram>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCardsPresentationSearchWithViewColumns(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardsPresentationApi - factory interface
 * @export
 */
export const CardsPresentationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsPresentationApiFp(configuration)
    return {
        /**
         * 
         * @summary POST: /SearchQuery/GetFolderCards
         * @param {DocsVisionWebClientModelsGetFolderCardsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationGetFolderCards(request: DocsVisionWebClientModelsGetFolderCardsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsSearchResponseModel> {
            return localVarFp.postApiCardsPresentationGetFolderCards(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get cards presentation from card list, retrieved by {M:DocsVision.Controllers.CardsPresentationController.Search(DocsVision.Platform.WebClient.Models.SearchRequestModel)}
         * @param {DocsVisionWebClientModelsSearchPresentationRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationGetSearchResultsPresentation(request: DocsVisionWebClientModelsSearchPresentationRequestModel, options?: any): AxiosPromise<Array<DocsVisionPlatformWebClientModelsCardPresentation>> {
            return localVarFp.postApiCardsPresentationGetSearchResultsPresentation(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute search query with Digest view.
         * @param {DocsVisionPlatformWebClientModelsSearchRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationSearch(requestModel: DocsVisionPlatformWebClientModelsSearchRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsSearchResponseModel> {
            return localVarFp.postApiCardsPresentationSearch(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute search query with Digest view columns
         * @param {DocsVisionPlatformWebClientModelsSearchRequestModelDiagram} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCardsPresentationSearchWithViewColumns(requestModel: DocsVisionPlatformWebClientModelsSearchRequestModelDiagram, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsSearchResponseModelDiagram> {
            return localVarFp.postApiCardsPresentationSearchWithViewColumns(requestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardsPresentationApi - object-oriented interface
 * @export
 * @class CardsPresentationApi
 * @extends {BaseAPI}
 */
export class CardsPresentationApi extends BaseAPI {
    /**
     * 
     * @summary POST: /SearchQuery/GetFolderCards
     * @param {DocsVisionWebClientModelsGetFolderCardsRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsPresentationApi
     */
    public postApiCardsPresentationGetFolderCards(request: DocsVisionWebClientModelsGetFolderCardsRequest, options?: AxiosRequestConfig) {
        return CardsPresentationApiFp(this.configuration).postApiCardsPresentationGetFolderCards(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get cards presentation from card list, retrieved by {M:DocsVision.Controllers.CardsPresentationController.Search(DocsVision.Platform.WebClient.Models.SearchRequestModel)}
     * @param {DocsVisionWebClientModelsSearchPresentationRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsPresentationApi
     */
    public postApiCardsPresentationGetSearchResultsPresentation(request: DocsVisionWebClientModelsSearchPresentationRequestModel, options?: AxiosRequestConfig) {
        return CardsPresentationApiFp(this.configuration).postApiCardsPresentationGetSearchResultsPresentation(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute search query with Digest view.
     * @param {DocsVisionPlatformWebClientModelsSearchRequestModel} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsPresentationApi
     */
    public postApiCardsPresentationSearch(requestModel: DocsVisionPlatformWebClientModelsSearchRequestModel, options?: AxiosRequestConfig) {
        return CardsPresentationApiFp(this.configuration).postApiCardsPresentationSearch(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute search query with Digest view columns
     * @param {DocsVisionPlatformWebClientModelsSearchRequestModelDiagram} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsPresentationApi
     */
    public postApiCardsPresentationSearchWithViewColumns(requestModel: DocsVisionPlatformWebClientModelsSearchRequestModelDiagram, options?: AxiosRequestConfig) {
        return CardsPresentationApiFp(this.configuration).postApiCardsPresentationSearchWithViewColumns(requestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CardsV1Api - axios parameter creator
 * @export
 */
export const CardsV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsCardId: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1CardsCardId', 'cardId', cardId)
            const localVarPath = `/api/v1/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsCardIdPermanently: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1CardsCardIdPermanently', 'cardId', cardId)
            const localVarPath = `/api/v1/cards/{cardId}/permanently`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsCardIdSectionIdRowId: async (cardId: string, sectionId: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1CardsCardIdSectionIdRowId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteApiV1CardsCardIdSectionIdRowId', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('deleteApiV1CardsCardIdSectionIdRowId', 'rowId', rowId)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardId: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardId', 'cardId', cardId)
            const localVarPath = `/api/v1/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdExport: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdExport', 'cardId', cardId)
            const localVarPath = `/api/v1/cards/{cardId}/export`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {GetApiV1CardsCardIdExportFlagsFlagsEnum} flags 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdExportFlags: async (cardId: string, flags: GetApiV1CardsCardIdExportFlagsFlagsEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdExportFlags', 'cardId', cardId)
            // verify required parameter 'flags' is not null or undefined
            assertParamExists('getApiV1CardsCardIdExportFlags', 'flags', flags)
            const localVarPath = `/api/v1/cards/{cardId}/export/{flags}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"flags"}}`, encodeURIComponent(String(flags)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionId: async (cardId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionId', 'sectionId', sectionId)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowId: async (cardId: string, sectionId: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowId', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowId', 'rowId', rowId)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIdFieldAlias: async (cardId: string, sectionId: string, rowId: string, fieldAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAlias', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAlias', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAlias', 'rowId', rowId)
            // verify required parameter 'fieldAlias' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAlias', 'fieldAlias', fieldAlias)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowId}/{fieldAlias}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)))
                .replace(`{${"fieldAlias"}}`, encodeURIComponent(String(fieldAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIdFieldAliasValue: async (cardId: string, sectionId: string, rowId: string, fieldAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAliasValue', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAliasValue', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAliasValue', 'rowId', rowId)
            // verify required parameter 'fieldAlias' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIdFieldAliasValue', 'fieldAlias', fieldAlias)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowId}/{fieldAlias}/value`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)))
                .replace(`{${"fieldAlias"}}`, encodeURIComponent(String(fieldAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIndexFieldAlias: async (cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'sectionId', sectionId)
            // verify required parameter 'rowIndex' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'rowIndex', rowIndex)
            // verify required parameter 'fieldAlias' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'fieldAlias', fieldAlias)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowIndex}/{fieldAlias}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowIndex"}}`, encodeURIComponent(String(rowIndex)))
                .replace(`{${"fieldAlias"}}`, encodeURIComponent(String(fieldAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue: async (cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue', 'sectionId', sectionId)
            // verify required parameter 'rowIndex' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue', 'rowIndex', rowIndex)
            // verify required parameter 'fieldAlias' is not null or undefined
            assertParamExists('getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue', 'fieldAlias', fieldAlias)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowIndex}/{fieldAlias}/value`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowIndex"}}`, encodeURIComponent(String(rowIndex)))
                .replace(`{${"fieldAlias"}}`, encodeURIComponent(String(fieldAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdWasread: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1CardsCardIdWasread', 'cardId', cardId)
            const localVarPath = `/api/v1/cards/{cardId}/wasread`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {object} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1CardsCardIdSectionIdRowIdFieldAlias: async (cardId: string, sectionId: string, rowId: string, fieldAlias: string, value: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIdFieldAlias', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIdFieldAlias', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIdFieldAlias', 'rowId', rowId)
            // verify required parameter 'fieldAlias' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIdFieldAlias', 'fieldAlias', fieldAlias)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIdFieldAlias', 'value', value)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowId}/{fieldAlias}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)))
                .replace(`{${"fieldAlias"}}`, encodeURIComponent(String(fieldAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(value, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {object} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1CardsCardIdSectionIdRowIndexFieldAlias: async (cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, value: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'sectionId', sectionId)
            // verify required parameter 'rowIndex' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'rowIndex', rowIndex)
            // verify required parameter 'fieldAlias' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'fieldAlias', fieldAlias)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdSectionIdRowIndexFieldAlias', 'value', value)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}/{rowIndex}/{fieldAlias}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowIndex"}}`, encodeURIComponent(String(rowIndex)))
                .replace(`{${"fieldAlias"}}`, encodeURIComponent(String(fieldAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(value, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {boolean} newWasReadState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1CardsCardIdWasread: async (cardId: string, newWasReadState: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdWasread', 'cardId', cardId)
            // verify required parameter 'newWasReadState' is not null or undefined
            assertParamExists('patchApiV1CardsCardIdWasread', 'newWasReadState', newWasReadState)
            const localVarPath = `/api/v1/cards/{cardId}/wasread`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newWasReadState, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsCardCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Cards: async (createParameters: DocsVisionWebClientWebApiModificationModelsCardCreateParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createParameters' is not null or undefined
            assertParamExists('postApiV1Cards', 'createParameters', createParameters)
            const localVarPath = `/api/v1/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsCardIdSectionId: async (cardId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiV1CardsCardIdSectionId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('postApiV1CardsCardIdSectionId', 'sectionId', sectionId)
            const localVarPath = `/api/v1/cards/{cardId}/{sectionId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsImport: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cards/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1CardsCardId: async (cardId: string, editParameters: DocsVisionWebClientWebApiModificationModelsCardEditParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('putApiV1CardsCardId', 'cardId', cardId)
            // verify required parameter 'editParameters' is not null or undefined
            assertParamExists('putApiV1CardsCardId', 'editParameters', editParameters)
            const localVarPath = `/api/v1/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardsV1Api - functional programming interface
 * @export
 */
export const CardsV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardsV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1CardsCardId(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1CardsCardId(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1CardsCardIdPermanently(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1CardsCardIdPermanently(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1CardsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1CardsCardIdSectionIdRowId(cardId, sectionId, rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardId(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsCardDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardId(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdExport(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdExport(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {GetApiV1CardsCardIdExportFlagsFlagsEnum} flags 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdExportFlags(cardId: string, flags: GetApiV1CardsCardIdExportFlagsFlagsEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdExportFlags(cardId, flags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdSectionId(cardId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsSectionDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdSectionId(cardId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsRowDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdSectionIdRowId(cardId, sectionId, rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId: string, sectionId: string, rowId: string, fieldAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsRowFieldModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId, sectionId, rowId, fieldAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdSectionIdRowIdFieldAliasValue(cardId: string, sectionId: string, rowId: string, fieldAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdSectionIdRowIdFieldAliasValue(cardId, sectionId, rowId, fieldAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsRowFieldModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId, sectionId, rowIndex, fieldAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue(cardId, sectionId, rowIndex, fieldAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsCardIdWasread(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsCardIdWasread(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {object} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId: string, sectionId: string, rowId: string, fieldAlias: string, value: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId, sectionId, rowId, fieldAlias, value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {object} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, value: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId, sectionId, rowIndex, fieldAlias, value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {boolean} newWasReadState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiV1CardsCardIdWasread(cardId: string, newWasReadState: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiV1CardsCardIdWasread(cardId, newWasReadState, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsCardCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1Cards(createParameters: DocsVisionWebClientWebApiModificationModelsCardCreateParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1Cards(createParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1CardsCardIdSectionId(cardId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1CardsCardIdSectionId(cardId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1CardsImport(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1CardsImport(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1CardsCardId(cardId: string, editParameters: DocsVisionWebClientWebApiModificationModelsCardEditParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1CardsCardId(cardId, editParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardsV1Api - factory interface
 * @export
 */
export const CardsV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardsV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsCardId(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1CardsCardId(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsCardIdPermanently(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1CardsCardIdPermanently(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1CardsCardIdSectionIdRowId(cardId, sectionId, rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardId(cardId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsCardDataModel> {
            return localVarFp.getApiV1CardsCardId(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdExport(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getApiV1CardsCardIdExport(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {GetApiV1CardsCardIdExportFlagsFlagsEnum} flags 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdExportFlags(cardId: string, flags: GetApiV1CardsCardIdExportFlagsFlagsEnum, options?: any): AxiosPromise<void> {
            return localVarFp.getApiV1CardsCardIdExportFlags(cardId, flags, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionId(cardId: string, sectionId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsSectionDataModel> {
            return localVarFp.getApiV1CardsCardIdSectionId(cardId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsRowDataModel> {
            return localVarFp.getApiV1CardsCardIdSectionIdRowId(cardId, sectionId, rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId: string, sectionId: string, rowId: string, fieldAlias: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsRowFieldModel> {
            return localVarFp.getApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId, sectionId, rowId, fieldAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIdFieldAliasValue(cardId: string, sectionId: string, rowId: string, fieldAlias: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiV1CardsCardIdSectionIdRowIdFieldAliasValue(cardId, sectionId, rowId, fieldAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsRowFieldModel> {
            return localVarFp.getApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId, sectionId, rowIndex, fieldAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue(cardId, sectionId, rowIndex, fieldAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsCardIdWasread(cardId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.getApiV1CardsCardIdWasread(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {string} fieldAlias 
         * @param {object} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId: string, sectionId: string, rowId: string, fieldAlias: string, value: object, options?: any): AxiosPromise<void> {
            return localVarFp.patchApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId, sectionId, rowId, fieldAlias, value, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {number} rowIndex 
         * @param {string} fieldAlias 
         * @param {object} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, value: object, options?: any): AxiosPromise<void> {
            return localVarFp.patchApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId, sectionId, rowIndex, fieldAlias, value, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {boolean} newWasReadState 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1CardsCardIdWasread(cardId: string, newWasReadState: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.patchApiV1CardsCardIdWasread(cardId, newWasReadState, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsCardCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Cards(createParameters: DocsVisionWebClientWebApiModificationModelsCardCreateParameters, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1Cards(createParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsCardIdSectionId(cardId: string, sectionId: string, options?: any): AxiosPromise<string> {
            return localVarFp.postApiV1CardsCardIdSectionId(cardId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsImport(options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1CardsImport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1CardsCardId(cardId: string, editParameters: DocsVisionWebClientWebApiModificationModelsCardEditParameters, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1CardsCardId(cardId, editParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CardsV1Api - object-oriented interface
 * @export
 * @class CardsV1Api
 * @extends {BaseAPI}
 */
export class CardsV1Api extends BaseAPI {
    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public deleteApiV1CardsCardId(cardId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).deleteApiV1CardsCardId(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public deleteApiV1CardsCardIdPermanently(cardId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).deleteApiV1CardsCardIdPermanently(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public deleteApiV1CardsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).deleteApiV1CardsCardIdSectionIdRowId(cardId, sectionId, rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardId(cardId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardId(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdExport(cardId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdExport(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {GetApiV1CardsCardIdExportFlagsFlagsEnum} flags 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdExportFlags(cardId: string, flags: GetApiV1CardsCardIdExportFlagsFlagsEnum, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdExportFlags(cardId, flags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdSectionId(cardId: string, sectionId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdSectionId(cardId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdSectionIdRowId(cardId, sectionId, rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {string} fieldAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId: string, sectionId: string, rowId: string, fieldAlias: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId, sectionId, rowId, fieldAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {string} fieldAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdSectionIdRowIdFieldAliasValue(cardId: string, sectionId: string, rowId: string, fieldAlias: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdSectionIdRowIdFieldAliasValue(cardId, sectionId, rowId, fieldAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {number} rowIndex 
     * @param {string} fieldAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId, sectionId, rowIndex, fieldAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {number} rowIndex 
     * @param {string} fieldAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdSectionIdRowIndexFieldAliasValue(cardId, sectionId, rowIndex, fieldAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public getApiV1CardsCardIdWasread(cardId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).getApiV1CardsCardIdWasread(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {string} fieldAlias 
     * @param {object} value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public patchApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId: string, sectionId: string, rowId: string, fieldAlias: string, value: object, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).patchApiV1CardsCardIdSectionIdRowIdFieldAlias(cardId, sectionId, rowId, fieldAlias, value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {number} rowIndex 
     * @param {string} fieldAlias 
     * @param {object} value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public patchApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId: string, sectionId: string, rowIndex: number, fieldAlias: string, value: object, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).patchApiV1CardsCardIdSectionIdRowIndexFieldAlias(cardId, sectionId, rowIndex, fieldAlias, value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {boolean} newWasReadState 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public patchApiV1CardsCardIdWasread(cardId: string, newWasReadState: boolean, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).patchApiV1CardsCardIdWasread(cardId, newWasReadState, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientWebApiModificationModelsCardCreateParameters} createParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public postApiV1Cards(createParameters: DocsVisionWebClientWebApiModificationModelsCardCreateParameters, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).postApiV1Cards(createParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public postApiV1CardsCardIdSectionId(cardId: string, sectionId: string, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).postApiV1CardsCardIdSectionId(cardId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public postApiV1CardsImport(options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).postApiV1CardsImport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {DocsVisionWebClientWebApiModificationModelsCardEditParameters} editParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardsV1Api
     */
    public putApiV1CardsCardId(cardId: string, editParameters: DocsVisionWebClientWebApiModificationModelsCardEditParameters, options?: AxiosRequestConfig) {
        return CardsV1ApiFp(this.configuration).putApiV1CardsCardId(cardId, editParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiV1CardsCardIdExportFlagsFlagsEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_64: 64,
    NUMBER_128: 128
} as const;
export type GetApiV1CardsCardIdExportFlagsFlagsEnum = typeof GetApiV1CardsCardIdExportFlagsFlagsEnum[keyof typeof GetApiV1CardsCardIdExportFlagsFlagsEnum];


/**
 * ClientLogApi - axios parameter creator
 * @export
 */
export const ClientLogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add message to server log.
         * @param {string} id 
         * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiClientLogId: async (id: string, message: DocsVisionPlatformWebClientModelsClientLogMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiClientLogId', 'id', id)
            // verify required parameter 'message' is not null or undefined
            assertParamExists('postApiClientLogId', 'message', message)
            const localVarPath = `/api/ClientLog/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(message, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add message to server log.
         * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiClientLogLogMessage: async (message: DocsVisionPlatformWebClientModelsClientLogMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'message' is not null or undefined
            assertParamExists('postApiClientLogLogMessage', 'message', message)
            const localVarPath = `/api/ClientLog/LogMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(message, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientLogApi - functional programming interface
 * @export
 */
export const ClientLogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientLogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add message to server log.
         * @param {string} id 
         * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiClientLogId(id: string, message: DocsVisionPlatformWebClientModelsClientLogMessage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiClientLogId(id, message, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add message to server log.
         * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiClientLogLogMessage(message: DocsVisionPlatformWebClientModelsClientLogMessage, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiClientLogLogMessage(message, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientLogApi - factory interface
 * @export
 */
export const ClientLogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientLogApiFp(configuration)
    return {
        /**
         * 
         * @summary Add message to server log.
         * @param {string} id 
         * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiClientLogId(id: string, message: DocsVisionPlatformWebClientModelsClientLogMessage, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiClientLogId(id, message, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add message to server log.
         * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiClientLogLogMessage(message: DocsVisionPlatformWebClientModelsClientLogMessage, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiClientLogLogMessage(message, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientLogApi - object-oriented interface
 * @export
 * @class ClientLogApi
 * @extends {BaseAPI}
 */
export class ClientLogApi extends BaseAPI {
    /**
     * 
     * @summary Add message to server log.
     * @param {string} id 
     * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientLogApi
     */
    public postApiClientLogId(id: string, message: DocsVisionPlatformWebClientModelsClientLogMessage, options?: AxiosRequestConfig) {
        return ClientLogApiFp(this.configuration).postApiClientLogId(id, message, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add message to server log.
     * @param {DocsVisionPlatformWebClientModelsClientLogMessage} message 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientLogApi
     */
    public postApiClientLogLogMessage(message: DocsVisionPlatformWebClientModelsClientLogMessage, options?: AxiosRequestConfig) {
        return ClientLogApiFp(this.configuration).postApiClientLogLogMessage(message, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add comment
         * @param {DocsVisionLayoutWebClientModelsAddCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsAddComment: async (requestModel: DocsVisionLayoutWebClientModelsAddCommentRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiCommentsAddComment', 'requestModel', requestModel)
            const localVarPath = `/api/Comments/AddComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete comment
         * @param {DocsVisionLayoutWebClientModelsDeleteCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsDeleteComment: async (requestModel: DocsVisionLayoutWebClientModelsDeleteCommentRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiCommentsDeleteComment', 'requestModel', requestModel)
            const localVarPath = `/api/Comments/DeleteComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get comments
         * @param {DocsVisionLayoutWebClientModelsCommentsRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsGetComments: async (requestModel: DocsVisionLayoutWebClientModelsCommentsRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiCommentsGetComments', 'requestModel', requestModel)
            const localVarPath = `/api/Comments/GetComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore comment
         * @param {DocsVisionLayoutWebClientModelsRestoreCommentModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsRestoreComment: async (requestModel: DocsVisionLayoutWebClientModelsRestoreCommentModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiCommentsRestoreComment', 'requestModel', requestModel)
            const localVarPath = `/api/Comments/RestoreComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update comment
         * @param {DocsVisionLayoutWebClientModelsUpdateCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsUpdateComment: async (requestModel: DocsVisionLayoutWebClientModelsUpdateCommentRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiCommentsUpdateComment', 'requestModel', requestModel)
            const localVarPath = `/api/Comments/UpdateComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add comment
         * @param {DocsVisionLayoutWebClientModelsAddCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCommentsAddComment(requestModel: DocsVisionLayoutWebClientModelsAddCommentRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCommentsAddComment(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete comment
         * @param {DocsVisionLayoutWebClientModelsDeleteCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCommentsDeleteComment(requestModel: DocsVisionLayoutWebClientModelsDeleteCommentRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCommentsDeleteComment(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get comments
         * @param {DocsVisionLayoutWebClientModelsCommentsRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCommentsGetComments(requestModel: DocsVisionLayoutWebClientModelsCommentsRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCommentsGetComments(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restore comment
         * @param {DocsVisionLayoutWebClientModelsRestoreCommentModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCommentsRestoreComment(requestModel: DocsVisionLayoutWebClientModelsRestoreCommentModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCommentsRestoreComment(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update comment
         * @param {DocsVisionLayoutWebClientModelsUpdateCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCommentsUpdateComment(requestModel: DocsVisionLayoutWebClientModelsUpdateCommentRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCommentsUpdateComment(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add comment
         * @param {DocsVisionLayoutWebClientModelsAddCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsAddComment(requestModel: DocsVisionLayoutWebClientModelsAddCommentRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiCommentsAddComment(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete comment
         * @param {DocsVisionLayoutWebClientModelsDeleteCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsDeleteComment(requestModel: DocsVisionLayoutWebClientModelsDeleteCommentRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsRestoreCommentModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiCommentsDeleteComment(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get comments
         * @param {DocsVisionLayoutWebClientModelsCommentsRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsGetComments(requestModel: DocsVisionLayoutWebClientModelsCommentsRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientCommentsCommentsModel> {
            return localVarFp.postApiCommentsGetComments(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore comment
         * @param {DocsVisionLayoutWebClientModelsRestoreCommentModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsRestoreComment(requestModel: DocsVisionLayoutWebClientModelsRestoreCommentModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiCommentsRestoreComment(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update comment
         * @param {DocsVisionLayoutWebClientModelsUpdateCommentRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCommentsUpdateComment(requestModel: DocsVisionLayoutWebClientModelsUpdateCommentRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiCommentsUpdateComment(requestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
    /**
     * 
     * @summary Add comment
     * @param {DocsVisionLayoutWebClientModelsAddCommentRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public postApiCommentsAddComment(requestModel: DocsVisionLayoutWebClientModelsAddCommentRequestModel, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).postApiCommentsAddComment(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete comment
     * @param {DocsVisionLayoutWebClientModelsDeleteCommentRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public postApiCommentsDeleteComment(requestModel: DocsVisionLayoutWebClientModelsDeleteCommentRequestModel, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).postApiCommentsDeleteComment(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get comments
     * @param {DocsVisionLayoutWebClientModelsCommentsRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public postApiCommentsGetComments(requestModel: DocsVisionLayoutWebClientModelsCommentsRequestModel, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).postApiCommentsGetComments(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore comment
     * @param {DocsVisionLayoutWebClientModelsRestoreCommentModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public postApiCommentsRestoreComment(requestModel: DocsVisionLayoutWebClientModelsRestoreCommentModel, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).postApiCommentsRestoreComment(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update comment
     * @param {DocsVisionLayoutWebClientModelsUpdateCommentRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public postApiCommentsUpdateComment(requestModel: DocsVisionLayoutWebClientModelsUpdateCommentRequestModel, options?: AxiosRequestConfig) {
        return CommentsApiFp(this.configuration).postApiCommentsUpdateComment(requestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fill agreement fields on contract decision.
         * @param {DocsVisionDocumentManagementContractAgreementFillDatesModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsFillContractAgreementDates: async (request: DocsVisionDocumentManagementContractAgreementFillDatesModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiContractsFillContractAgreementDates', 'request', request)
            const localVarPath = `/api/Contracts/FillContractAgreementDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fill contract sum in rub field.
         * @param {DocsVisionDocumentManagementContractFillDateModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsFillContractDate: async (request: DocsVisionDocumentManagementContractFillDateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiContractsFillContractDate', 'request', request)
            const localVarPath = `/api/Contracts/FillContractDate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fill agreement fields on contract decision.
         * @param {DocsVisionDocumentManagementContractFillSumInRubModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsFillContractSumInRub: async (request: DocsVisionDocumentManagementContractFillSumInRubModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiContractsFillContractSumInRub', 'request', request)
            const localVarPath = `/api/Contracts/FillContractSumInRub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get contract dates
         * @param {string} contractCardId Contract card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsGetContractDates: async (contractCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractCardId' is not null or undefined
            assertParamExists('postApiContractsGetContractDates', 'contractCardId', contractCardId)
            const localVarPath = `/api/Contracts/GetContractDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contractCardId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get contract info
         * @param {string} contractCardId Contract card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsGetContractInfo: async (contractCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractCardId' is not null or undefined
            assertParamExists('postApiContractsGetContractInfo', 'contractCardId', contractCardId)
            const localVarPath = `/api/Contracts/GetContractInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contractCardId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach supplement to contract
         * @param {DocsVisionWebClientModelsProlongateContractRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsProlongateContract: async (request: DocsVisionWebClientModelsProlongateContractRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiContractsProlongateContract', 'request', request)
            const localVarPath = `/api/Contracts/ProlongateContract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fill agreement fields on contract decision.
         * @param {DocsVisionDocumentManagementContractAgreementFillDatesModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiContractsFillContractAgreementDates(request: DocsVisionDocumentManagementContractAgreementFillDatesModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiContractsFillContractAgreementDates(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fill contract sum in rub field.
         * @param {DocsVisionDocumentManagementContractFillDateModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiContractsFillContractDate(request: DocsVisionDocumentManagementContractFillDateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiContractsFillContractDate(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fill agreement fields on contract decision.
         * @param {DocsVisionDocumentManagementContractFillSumInRubModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiContractsFillContractSumInRub(request: DocsVisionDocumentManagementContractFillSumInRubModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiContractsFillContractSumInRub(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get contract dates
         * @param {string} contractCardId Contract card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiContractsGetContractDates(contractCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiContractsGetContractDates(contractCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get contract info
         * @param {string} contractCardId Contract card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiContractsGetContractInfo(contractCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiContractsGetContractInfo(contractCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Attach supplement to contract
         * @param {DocsVisionWebClientModelsProlongateContractRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiContractsProlongateContract(request: DocsVisionWebClientModelsProlongateContractRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiContractsProlongateContract(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractsApi - factory interface
 * @export
 */
export const ContractsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractsApiFp(configuration)
    return {
        /**
         * 
         * @summary Fill agreement fields on contract decision.
         * @param {DocsVisionDocumentManagementContractAgreementFillDatesModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsFillContractAgreementDates(request: DocsVisionDocumentManagementContractAgreementFillDatesModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiContractsFillContractAgreementDates(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fill contract sum in rub field.
         * @param {DocsVisionDocumentManagementContractFillDateModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsFillContractDate(request: DocsVisionDocumentManagementContractFillDateModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiContractsFillContractDate(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fill agreement fields on contract decision.
         * @param {DocsVisionDocumentManagementContractFillSumInRubModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsFillContractSumInRub(request: DocsVisionDocumentManagementContractFillSumInRubModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiContractsFillContractSumInRub(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get contract dates
         * @param {string} contractCardId Contract card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsGetContractDates(contractCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractDatesModelDocsVisionWebClient> {
            return localVarFp.postApiContractsGetContractDates(contractCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get contract info
         * @param {string} contractCardId Contract card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsGetContractInfo(contractCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionDocumentManagementContractInfoModelDocsVisionWebClient> {
            return localVarFp.postApiContractsGetContractInfo(contractCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach supplement to contract
         * @param {DocsVisionWebClientModelsProlongateContractRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiContractsProlongateContract(request: DocsVisionWebClientModelsProlongateContractRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiContractsProlongateContract(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export class ContractsApi extends BaseAPI {
    /**
     * 
     * @summary Fill agreement fields on contract decision.
     * @param {DocsVisionDocumentManagementContractAgreementFillDatesModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public postApiContractsFillContractAgreementDates(request: DocsVisionDocumentManagementContractAgreementFillDatesModel, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).postApiContractsFillContractAgreementDates(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fill contract sum in rub field.
     * @param {DocsVisionDocumentManagementContractFillDateModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public postApiContractsFillContractDate(request: DocsVisionDocumentManagementContractFillDateModel, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).postApiContractsFillContractDate(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fill agreement fields on contract decision.
     * @param {DocsVisionDocumentManagementContractFillSumInRubModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public postApiContractsFillContractSumInRub(request: DocsVisionDocumentManagementContractFillSumInRubModel, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).postApiContractsFillContractSumInRub(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get contract dates
     * @param {string} contractCardId Contract card identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public postApiContractsGetContractDates(contractCardId: string, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).postApiContractsGetContractDates(contractCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get contract info
     * @param {string} contractCardId Contract card identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public postApiContractsGetContractInfo(contractCardId: string, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).postApiContractsGetContractInfo(contractCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach supplement to contract
     * @param {DocsVisionWebClientModelsProlongateContractRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public postApiContractsProlongateContract(request: DocsVisionWebClientModelsProlongateContractRequestModel, options?: AxiosRequestConfig) {
        return ContractsApiFp(this.configuration).postApiContractsProlongateContract(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CryptoProDssApi - axios parameter creator
 * @export
 */
export const CryptoProDssApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssAcceptAuthorization: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getApiCryptoProDssAcceptAuthorization', 'code', code)
            const localVarPath = `/api/CryptoProDss/AcceptAuthorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssAcceptConfirmation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CryptoProDss/AcceptConfirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [accountName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssAuthorize: async (accountName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CryptoProDss/Authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountName !== undefined) {
                localVarQueryParameter['accountName'] = accountName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} url 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssDownloadFromDssAsBase64: async (url: string, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('getApiCryptoProDssDownloadFromDssAsBase64', 'url', url)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getApiCryptoProDssDownloadFromDssAsBase64', 'authorization', authorization)
            const localVarPath = `/api/CryptoProDss/DownloadFromDssAsBase64`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (authorization !== undefined) {
                localVarQueryParameter['authorization'] = authorization;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} url 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssGetFromDss: async (url: string, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('getApiCryptoProDssGetFromDss', 'url', url)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getApiCryptoProDssGetFromDss', 'authorization', authorization)
            const localVarPath = `/api/CryptoProDss/GetFromDss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (authorization !== undefined) {
                localVarQueryParameter['authorization'] = authorization;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} code 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssId: async (code: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getApiCryptoProDssId', 'code', code)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiCryptoProDssId', 'id', id)
            const localVarPath = `/api/CryptoProDss/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDssRequestBody} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssDeleteFromDss: async (request: DocsVisionWebClientModelsDssRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiCryptoProDssDeleteFromDss', 'request', request)
            const localVarPath = `/api/CryptoProDss/DeleteFromDss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDssRequestBody} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssPostToDss: async (request: DocsVisionWebClientModelsDssRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiCryptoProDssPostToDss', 'request', request)
            const localVarPath = `/api/CryptoProDss/PostToDss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssResetAuthorization: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CryptoProDss/ResetAuthorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsUploadToDssRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssUploadToDss: async (request: DocsVisionWebClientModelsUploadToDssRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiCryptoProDssUploadToDss', 'request', request)
            const localVarPath = `/api/CryptoProDss/UploadToDss`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CryptoProDssApi - functional programming interface
 * @export
 */
export const CryptoProDssApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CryptoProDssApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCryptoProDssAcceptAuthorization(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCryptoProDssAcceptAuthorization(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCryptoProDssAcceptConfirmation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCryptoProDssAcceptConfirmation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [accountName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCryptoProDssAuthorize(accountName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCryptoProDssAuthorize(accountName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} url 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCryptoProDssDownloadFromDssAsBase64(url: string, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCryptoProDssDownloadFromDssAsBase64(url, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} url 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCryptoProDssGetFromDss(url: string, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCryptoProDssGetFromDss(url, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} code 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiCryptoProDssId(code: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiCryptoProDssId(code, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDssRequestBody} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCryptoProDssDeleteFromDss(request: DocsVisionWebClientModelsDssRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCryptoProDssDeleteFromDss(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDssRequestBody} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCryptoProDssPostToDss(request: DocsVisionWebClientModelsDssRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCryptoProDssPostToDss(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCryptoProDssResetAuthorization(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCryptoProDssResetAuthorization(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsUploadToDssRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiCryptoProDssUploadToDss(request: DocsVisionWebClientModelsUploadToDssRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsUploadToDssResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiCryptoProDssUploadToDss(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CryptoProDssApi - factory interface
 * @export
 */
export const CryptoProDssApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CryptoProDssApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssAcceptAuthorization(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.getApiCryptoProDssAcceptAuthorization(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssAcceptConfirmation(options?: any): AxiosPromise<void> {
            return localVarFp.getApiCryptoProDssAcceptConfirmation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [accountName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssAuthorize(accountName?: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesCryptoProAuthorizedRealtimeMessageDataDocsVisionWebClient> {
            return localVarFp.getApiCryptoProDssAuthorize(accountName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} url 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssDownloadFromDssAsBase64(url: string, authorization: string, options?: any): AxiosPromise<string> {
            return localVarFp.getApiCryptoProDssDownloadFromDssAsBase64(url, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} url 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssGetFromDss(url: string, authorization: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiCryptoProDssGetFromDss(url, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} code 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiCryptoProDssId(code: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.getApiCryptoProDssId(code, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDssRequestBody} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssDeleteFromDss(request: DocsVisionWebClientModelsDssRequestBody, options?: any): AxiosPromise<object> {
            return localVarFp.postApiCryptoProDssDeleteFromDss(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDssRequestBody} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssPostToDss(request: DocsVisionWebClientModelsDssRequestBody, options?: any): AxiosPromise<object> {
            return localVarFp.postApiCryptoProDssPostToDss(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssResetAuthorization(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiCryptoProDssResetAuthorization(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsUploadToDssRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiCryptoProDssUploadToDss(request: DocsVisionWebClientModelsUploadToDssRequest, options?: any): AxiosPromise<DocsVisionWebClientModelsUploadToDssResponse> {
            return localVarFp.postApiCryptoProDssUploadToDss(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CryptoProDssApi - object-oriented interface
 * @export
 * @class CryptoProDssApi
 * @extends {BaseAPI}
 */
export class CryptoProDssApi extends BaseAPI {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public getApiCryptoProDssAcceptAuthorization(code: string, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).getApiCryptoProDssAcceptAuthorization(code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public getApiCryptoProDssAcceptConfirmation(options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).getApiCryptoProDssAcceptConfirmation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [accountName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public getApiCryptoProDssAuthorize(accountName?: string, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).getApiCryptoProDssAuthorize(accountName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} url 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public getApiCryptoProDssDownloadFromDssAsBase64(url: string, authorization: string, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).getApiCryptoProDssDownloadFromDssAsBase64(url, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} url 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public getApiCryptoProDssGetFromDss(url: string, authorization: string, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).getApiCryptoProDssGetFromDss(url, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} code 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public getApiCryptoProDssId(code: string, id: string, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).getApiCryptoProDssId(code, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientModelsDssRequestBody} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public postApiCryptoProDssDeleteFromDss(request: DocsVisionWebClientModelsDssRequestBody, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).postApiCryptoProDssDeleteFromDss(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientModelsDssRequestBody} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public postApiCryptoProDssPostToDss(request: DocsVisionWebClientModelsDssRequestBody, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).postApiCryptoProDssPostToDss(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public postApiCryptoProDssResetAuthorization(options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).postApiCryptoProDssResetAuthorization(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientModelsUploadToDssRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoProDssApi
     */
    public postApiCryptoProDssUploadToDss(request: DocsVisionWebClientModelsUploadToDssRequest, options?: AxiosRequestConfig) {
        return CryptoProDssApiFp(this.configuration).postApiCryptoProDssUploadToDss(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DataGridControlApi - axios parameter creator
 * @export
 */
export const DataGridControlApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Getting the table model
         * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDataGridControlGetTableData: async (parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parameters' is not null or undefined
            assertParamExists('postApiDataGridControlGetTableData', 'parameters', parameters)
            const localVarPath = `/api/DataGridControl/GetTableData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getting the table model
         * @param {string} id 
         * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDataGridControlId: async (id: string, parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiDataGridControlId', 'id', id)
            // verify required parameter 'parameters' is not null or undefined
            assertParamExists('postApiDataGridControlId', 'parameters', parameters)
            const localVarPath = `/api/DataGridControl/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataGridControlApi - functional programming interface
 * @export
 */
export const DataGridControlApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataGridControlApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Getting the table model
         * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDataGridControlGetTableData(parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDataGridControlGetTableData(parameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Getting the table model
         * @param {string} id 
         * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDataGridControlId(id: string, parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDataGridControlId(id, parameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataGridControlApi - factory interface
 * @export
 */
export const DataGridControlApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataGridControlApiFp(configuration)
    return {
        /**
         * 
         * @summary Getting the table model
         * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDataGridControlGetTableData(parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiDataGridControlGetTableData(parameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getting the table model
         * @param {string} id 
         * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDataGridControlId(id: string, parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTableDataTableModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiDataGridControlId(id, parameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataGridControlApi - object-oriented interface
 * @export
 * @class DataGridControlApi
 * @extends {BaseAPI}
 */
export class DataGridControlApi extends BaseAPI {
    /**
     * 
     * @summary Getting the table model
     * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataGridControlApi
     */
    public postApiDataGridControlGetTableData(parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options?: AxiosRequestConfig) {
        return DataGridControlApiFp(this.configuration).postApiDataGridControlGetTableData(parameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getting the table model
     * @param {string} id 
     * @param {DocsVisionLayoutWebClientModelsDataGridControlParams} parameters Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataGridControlApi
     */
    public postApiDataGridControlId(id: string, parameters: DocsVisionLayoutWebClientModelsDataGridControlParams, options?: AxiosRequestConfig) {
        return DataGridControlApiFp(this.configuration).postApiDataGridControlId(id, parameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DataVisualizationApi - axios parameter creator
 * @export
 */
export const DataVisualizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary generate new file with data visualization
         * @param {GetApiDataVisualizationGenerateGeneratorTypeEnum} generatorType 
         * @param {string} cardId 
         * @param {string} fileCardId 
         * @param {string} fileVersionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDataVisualizationGenerate: async (generatorType: GetApiDataVisualizationGenerateGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generatorType' is not null or undefined
            assertParamExists('getApiDataVisualizationGenerate', 'generatorType', generatorType)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiDataVisualizationGenerate', 'cardId', cardId)
            // verify required parameter 'fileCardId' is not null or undefined
            assertParamExists('getApiDataVisualizationGenerate', 'fileCardId', fileCardId)
            // verify required parameter 'fileVersionId' is not null or undefined
            assertParamExists('getApiDataVisualizationGenerate', 'fileVersionId', fileVersionId)
            const localVarPath = `/api/DataVisualization/Generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (generatorType !== undefined) {
                localVarQueryParameter['generatorType'] = generatorType;
            }

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (fileCardId !== undefined) {
                localVarQueryParameter['fileCardId'] = fileCardId;
            }

            if (fileVersionId !== undefined) {
                localVarQueryParameter['fileVersionId'] = fileVersionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary generate new file with data visualization
         * @param {GetApiDataVisualizationIdGeneratorTypeEnum} generatorType 
         * @param {string} cardId 
         * @param {string} fileCardId 
         * @param {string} fileVersionId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDataVisualizationId: async (generatorType: GetApiDataVisualizationIdGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'generatorType' is not null or undefined
            assertParamExists('getApiDataVisualizationId', 'generatorType', generatorType)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiDataVisualizationId', 'cardId', cardId)
            // verify required parameter 'fileCardId' is not null or undefined
            assertParamExists('getApiDataVisualizationId', 'fileCardId', fileCardId)
            // verify required parameter 'fileVersionId' is not null or undefined
            assertParamExists('getApiDataVisualizationId', 'fileVersionId', fileVersionId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiDataVisualizationId', 'id', id)
            const localVarPath = `/api/DataVisualization/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (generatorType !== undefined) {
                localVarQueryParameter['generatorType'] = generatorType;
            }

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (fileCardId !== undefined) {
                localVarQueryParameter['fileCardId'] = fileCardId;
            }

            if (fileVersionId !== undefined) {
                localVarQueryParameter['fileVersionId'] = fileVersionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataVisualizationApi - functional programming interface
 * @export
 */
export const DataVisualizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataVisualizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary generate new file with data visualization
         * @param {GetApiDataVisualizationGenerateGeneratorTypeEnum} generatorType 
         * @param {string} cardId 
         * @param {string} fileCardId 
         * @param {string} fileVersionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDataVisualizationGenerate(generatorType: GetApiDataVisualizationGenerateGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDataVisualizationGenerate(generatorType, cardId, fileCardId, fileVersionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary generate new file with data visualization
         * @param {GetApiDataVisualizationIdGeneratorTypeEnum} generatorType 
         * @param {string} cardId 
         * @param {string} fileCardId 
         * @param {string} fileVersionId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDataVisualizationId(generatorType: GetApiDataVisualizationIdGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDataVisualizationId(generatorType, cardId, fileCardId, fileVersionId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataVisualizationApi - factory interface
 * @export
 */
export const DataVisualizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataVisualizationApiFp(configuration)
    return {
        /**
         * 
         * @summary generate new file with data visualization
         * @param {GetApiDataVisualizationGenerateGeneratorTypeEnum} generatorType 
         * @param {string} cardId 
         * @param {string} fileCardId 
         * @param {string} fileVersionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDataVisualizationGenerate(generatorType: GetApiDataVisualizationGenerateGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiDataVisualizationGenerate(generatorType, cardId, fileCardId, fileVersionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary generate new file with data visualization
         * @param {GetApiDataVisualizationIdGeneratorTypeEnum} generatorType 
         * @param {string} cardId 
         * @param {string} fileCardId 
         * @param {string} fileVersionId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDataVisualizationId(generatorType: GetApiDataVisualizationIdGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiDataVisualizationId(generatorType, cardId, fileCardId, fileVersionId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataVisualizationApi - object-oriented interface
 * @export
 * @class DataVisualizationApi
 * @extends {BaseAPI}
 */
export class DataVisualizationApi extends BaseAPI {
    /**
     * 
     * @summary generate new file with data visualization
     * @param {GetApiDataVisualizationGenerateGeneratorTypeEnum} generatorType 
     * @param {string} cardId 
     * @param {string} fileCardId 
     * @param {string} fileVersionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataVisualizationApi
     */
    public getApiDataVisualizationGenerate(generatorType: GetApiDataVisualizationGenerateGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, options?: AxiosRequestConfig) {
        return DataVisualizationApiFp(this.configuration).getApiDataVisualizationGenerate(generatorType, cardId, fileCardId, fileVersionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary generate new file with data visualization
     * @param {GetApiDataVisualizationIdGeneratorTypeEnum} generatorType 
     * @param {string} cardId 
     * @param {string} fileCardId 
     * @param {string} fileVersionId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataVisualizationApi
     */
    public getApiDataVisualizationId(generatorType: GetApiDataVisualizationIdGeneratorTypeEnum, cardId: string, fileCardId: string, fileVersionId: string, id: string, options?: AxiosRequestConfig) {
        return DataVisualizationApiFp(this.configuration).getApiDataVisualizationId(generatorType, cardId, fileCardId, fileVersionId, id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiDataVisualizationGenerateGeneratorTypeEnum = {
    NUMBER_0: 0
} as const;
export type GetApiDataVisualizationGenerateGeneratorTypeEnum = typeof GetApiDataVisualizationGenerateGeneratorTypeEnum[keyof typeof GetApiDataVisualizationGenerateGeneratorTypeEnum];
/**
 * @export
 */
export const GetApiDataVisualizationIdGeneratorTypeEnum = {
    NUMBER_0: 0
} as const;
export type GetApiDataVisualizationIdGeneratorTypeEnum = typeof GetApiDataVisualizationIdGeneratorTypeEnum[keyof typeof GetApiDataVisualizationIdGeneratorTypeEnum];


/**
 * DepartmentApi - axios parameter creator
 * @export
 */
export const DepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns staff employee\'s department
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentGetStaffEmployeeDepartment: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiDepartmentGetStaffEmployeeDepartment', 'employeeId', employeeId)
            const localVarPath = `/api/Department/GetStaffEmployeeDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
         * @param {string} partnerCompanyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentId: async (partnerCompanyId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCompanyId' is not null or undefined
            assertParamExists('getApiDepartmentId', 'partnerCompanyId', partnerCompanyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiDepartmentId', 'id', id)
            const localVarPath = `/api/Department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (partnerCompanyId !== undefined) {
                localVarQueryParameter['partnerCompanyId'] = partnerCompanyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
         * @param {string} partnerCompanyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentMarkPartnersCompanyTypeAsDepartment: async (partnerCompanyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCompanyId' is not null or undefined
            assertParamExists('getApiDepartmentMarkPartnersCompanyTypeAsDepartment', 'partnerCompanyId', partnerCompanyId)
            const localVarPath = `/api/Department/MarkPartnersCompanyTypeAsDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (partnerCompanyId !== undefined) {
                localVarQueryParameter['partnerCompanyId'] = partnerCompanyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/Department/MarkStaffCompanyTypeAsDepartment?staffCompanyId=GUID
         * @param {string} staffCompanyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentMarkStaffCompanyTypeAsDepartment: async (staffCompanyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffCompanyId' is not null or undefined
            assertParamExists('getApiDepartmentMarkStaffCompanyTypeAsDepartment', 'staffCompanyId', staffCompanyId)
            const localVarPath = `/api/Department/MarkStaffCompanyTypeAsDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (staffCompanyId !== undefined) {
                localVarQueryParameter['staffCompanyId'] = staffCompanyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns parent departments
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetParentDepartments: async (departmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('postApiDepartmentGetParentDepartments', 'departmentId', departmentId)
            const localVarPath = `/api/Department/GetParentDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get partner department by id.
         * @param {string} departmentId Department\&#39;s identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetPartnerDepartment: async (departmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('postApiDepartmentGetPartnerDepartment', 'departmentId', departmentId)
            const localVarPath = `/api/Department/GetPartnerDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get departments by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of partner departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetPartnerDepartments: async (departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departments' is not null or undefined
            assertParamExists('postApiDepartmentGetPartnerDepartments', 'departments', departments)
            const localVarPath = `/api/Department/GetPartnerDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departments, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get staff department by id.
         * @param {string} departmentId Department\&#39;s identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetStaffDepartment: async (departmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('postApiDepartmentGetStaffDepartment', 'departmentId', departmentId)
            const localVarPath = `/api/Department/GetStaffDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get departments by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of staff departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetStaffDepartments: async (departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departments' is not null or undefined
            assertParamExists('postApiDepartmentGetStaffDepartments', 'departments', departments)
            const localVarPath = `/api/Department/GetStaffDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departments, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentApi - functional programming interface
 * @export
 */
export const DepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns staff employee\'s department
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDepartmentGetStaffEmployeeDepartment(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDepartmentGetStaffEmployeeDepartment(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
         * @param {string} partnerCompanyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDepartmentId(partnerCompanyId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDepartmentId(partnerCompanyId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
         * @param {string} partnerCompanyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDepartmentMarkPartnersCompanyTypeAsDepartment(partnerCompanyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDepartmentMarkPartnersCompanyTypeAsDepartment(partnerCompanyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/Department/MarkStaffCompanyTypeAsDepartment?staffCompanyId=GUID
         * @param {string} staffCompanyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDepartmentMarkStaffCompanyTypeAsDepartment(staffCompanyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDepartmentMarkStaffCompanyTypeAsDepartment(staffCompanyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns parent departments
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDepartmentGetParentDepartments(departmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDepartmentGetParentDepartments(departmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get partner department by id.
         * @param {string} departmentId Department\&#39;s identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDepartmentGetPartnerDepartment(departmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDepartmentGetPartnerDepartment(departmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get departments by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of partner departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDepartmentGetPartnerDepartments(departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDepartmentGetPartnerDepartments(departments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get staff department by id.
         * @param {string} departmentId Department\&#39;s identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDepartmentGetStaffDepartment(departmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDepartmentGetStaffDepartment(departmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get departments by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of staff departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDepartmentGetStaffDepartments(departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDepartmentGetStaffDepartments(departments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentApi - factory interface
 * @export
 */
export const DepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns staff employee\'s department
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentGetStaffEmployeeDepartment(employeeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel> {
            return localVarFp.getApiDepartmentGetStaffEmployeeDepartment(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
         * @param {string} partnerCompanyId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentId(partnerCompanyId: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiDepartmentId(partnerCompanyId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
         * @param {string} partnerCompanyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentMarkPartnersCompanyTypeAsDepartment(partnerCompanyId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiDepartmentMarkPartnersCompanyTypeAsDepartment(partnerCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/Department/MarkStaffCompanyTypeAsDepartment?staffCompanyId=GUID
         * @param {string} staffCompanyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDepartmentMarkStaffCompanyTypeAsDepartment(staffCompanyId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiDepartmentMarkStaffCompanyTypeAsDepartment(staffCompanyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns parent departments
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetParentDepartments(departmentId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel> {
            return localVarFp.postApiDepartmentGetParentDepartments(departmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get partner department by id.
         * @param {string} departmentId Department\&#39;s identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetPartnerDepartment(departmentId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel> {
            return localVarFp.postApiDepartmentGetPartnerDepartment(departmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get departments by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of partner departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetPartnerDepartments(departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel> {
            return localVarFp.postApiDepartmentGetPartnerDepartments(departments, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get staff department by id.
         * @param {string} departmentId Department\&#39;s identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetStaffDepartment(departmentId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentModel> {
            return localVarFp.postApiDepartmentGetStaffDepartment(departmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get departments by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of staff departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDepartmentGetStaffDepartments(departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentModel> {
            return localVarFp.postApiDepartmentGetStaffDepartments(departments, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
export class DepartmentApi extends BaseAPI {
    /**
     * 
     * @summary Returns staff employee\'s department
     * @param {string} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public getApiDepartmentGetStaffEmployeeDepartment(employeeId: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).getApiDepartmentGetStaffEmployeeDepartment(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
     * @param {string} partnerCompanyId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public getApiDepartmentId(partnerCompanyId: string, id: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).getApiDepartmentId(partnerCompanyId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/Department/MarkPartnersCompanyTypeAsDepartment?partnerCompanyId=GUID
     * @param {string} partnerCompanyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public getApiDepartmentMarkPartnersCompanyTypeAsDepartment(partnerCompanyId: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).getApiDepartmentMarkPartnersCompanyTypeAsDepartment(partnerCompanyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/Department/MarkStaffCompanyTypeAsDepartment?staffCompanyId=GUID
     * @param {string} staffCompanyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public getApiDepartmentMarkStaffCompanyTypeAsDepartment(staffCompanyId: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).getApiDepartmentMarkStaffCompanyTypeAsDepartment(staffCompanyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns parent departments
     * @param {string} departmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public postApiDepartmentGetParentDepartments(departmentId: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).postApiDepartmentGetParentDepartments(departmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get partner department by id.
     * @param {string} departmentId Department\&#39;s identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public postApiDepartmentGetPartnerDepartment(departmentId: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).postApiDepartmentGetPartnerDepartment(departmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get departments by list of ids.
     * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of partner departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public postApiDepartmentGetPartnerDepartments(departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).postApiDepartmentGetPartnerDepartments(departments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get staff department by id.
     * @param {string} departmentId Department\&#39;s identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public postApiDepartmentGetStaffDepartment(departmentId: string, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).postApiDepartmentGetStaffDepartment(departmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get departments by list of ids.
     * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} departments Collection of staff departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public postApiDepartmentGetStaffDepartments(departments: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).postApiDepartmentGetStaffDepartments(departments, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DirectoryDesignerRowApi - axios parameter creator
 * @export
 */
export const DirectoryDesignerRowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get directory designer row by id
         * @param {string} nodeId Directory designer row identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowGetDirectoryDesignerNode: async (nodeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('postApiDirectoryDesignerRowGetDirectoryDesignerNode', 'nodeId', nodeId)
            const localVarPath = `/api/DirectoryDesignerRow/GetDirectoryDesignerNode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get directory designer row by id
         * @param {string} rowId Directory designer row identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowGetDirectoryDesignerRow: async (rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('postApiDirectoryDesignerRowGetDirectoryDesignerRow', 'rowId', rowId)
            const localVarPath = `/api/DirectoryDesignerRow/GetDirectoryDesignerRow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rowId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get directory designer rows by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} rows 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowGetDirectoryDesignerRows: async (rows: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rows' is not null or undefined
            assertParamExists('postApiDirectoryDesignerRowGetDirectoryDesignerRows', 'rows', rows)
            const localVarPath = `/api/DirectoryDesignerRow/GetDirectoryDesignerRows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rows, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find items / item types by name
         * @param {DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowLoadDirectoryData: async (query: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiDirectoryDesignerRowLoadDirectoryData', 'query', query)
            const localVarPath = `/api/DirectoryDesignerRow/LoadDirectoryData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectoryDesignerRowApi - functional programming interface
 * @export
 */
export const DirectoryDesignerRowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectoryDesignerRowApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get directory designer row by id
         * @param {string} nodeId Directory designer row identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDirectoryDesignerRowGetDirectoryDesignerNode(nodeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDirectoryDesignerRowGetDirectoryDesignerNode(nodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get directory designer row by id
         * @param {string} rowId Directory designer row identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDirectoryDesignerRowGetDirectoryDesignerRow(rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDirectoryDesignerRowGetDirectoryDesignerRow(rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get directory designer rows by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} rows 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDirectoryDesignerRowGetDirectoryDesignerRows(rows: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDirectoryDesignerRowGetDirectoryDesignerRows(rows, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find items / item types by name
         * @param {DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDirectoryDesignerRowLoadDirectoryData(query: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDirectoryDesignerRowLoadDirectoryData(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectoryDesignerRowApi - factory interface
 * @export
 */
export const DirectoryDesignerRowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectoryDesignerRowApiFp(configuration)
    return {
        /**
         * 
         * @summary Get directory designer row by id
         * @param {string} nodeId Directory designer row identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowGetDirectoryDesignerNode(nodeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerNodeModel> {
            return localVarFp.postApiDirectoryDesignerRowGetDirectoryDesignerNode(nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get directory designer row by id
         * @param {string} rowId Directory designer row identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowGetDirectoryDesignerRow(rowId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel> {
            return localVarFp.postApiDirectoryDesignerRowGetDirectoryDesignerRow(rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get directory designer rows by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} rows 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowGetDirectoryDesignerRows(rows: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerRowModel> {
            return localVarFp.postApiDirectoryDesignerRowGetDirectoryDesignerRows(rows, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find items / item types by name
         * @param {DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDirectoryDesignerRowLoadDirectoryData(query: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerLoadResponse> {
            return localVarFp.postApiDirectoryDesignerRowLoadDirectoryData(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectoryDesignerRowApi - object-oriented interface
 * @export
 * @class DirectoryDesignerRowApi
 * @extends {BaseAPI}
 */
export class DirectoryDesignerRowApi extends BaseAPI {
    /**
     * 
     * @summary Get directory designer row by id
     * @param {string} nodeId Directory designer row identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryDesignerRowApi
     */
    public postApiDirectoryDesignerRowGetDirectoryDesignerNode(nodeId: string, options?: AxiosRequestConfig) {
        return DirectoryDesignerRowApiFp(this.configuration).postApiDirectoryDesignerRowGetDirectoryDesignerNode(nodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get directory designer row by id
     * @param {string} rowId Directory designer row identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryDesignerRowApi
     */
    public postApiDirectoryDesignerRowGetDirectoryDesignerRow(rowId: string, options?: AxiosRequestConfig) {
        return DirectoryDesignerRowApiFp(this.configuration).postApiDirectoryDesignerRowGetDirectoryDesignerRow(rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get directory designer rows by list of ids.
     * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} rows 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryDesignerRowApi
     */
    public postApiDirectoryDesignerRowGetDirectoryDesignerRows(rows: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig) {
        return DirectoryDesignerRowApiFp(this.configuration).postApiDirectoryDesignerRowGetDirectoryDesignerRows(rows, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find items / item types by name
     * @param {DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectoryDesignerRowApi
     */
    public postApiDirectoryDesignerRowLoadDirectoryData(query: DocsVisionBackOfficeWebClientDirectoryDesignerModelsDirectoryDesignerQuery, options?: AxiosRequestConfig) {
        return DirectoryDesignerRowApiFp(this.configuration).postApiDirectoryDesignerRowLoadDirectoryData(query, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DisableCardApi - axios parameter creator
 * @export
 */
export const DisableCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /api/LayoutCard/DisableCard
         * @param {string} cardId 
         * @param {PostApiDisableCardDisableCardReasonEnum} reason 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDisableCardDisableCard: async (cardId: string, reason: PostApiDisableCardDisableCardReasonEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiDisableCardDisableCard', 'cardId', cardId)
            // verify required parameter 'reason' is not null or undefined
            assertParamExists('postApiDisableCardDisableCard', 'reason', reason)
            const localVarPath = `/api/DisableCard/DisableCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/LayoutCard/DisableCardEx
         * @param {DocsVisionWebClientModelsDisableCardExRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDisableCardDisableCardEx: async (request: DocsVisionWebClientModelsDisableCardExRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiDisableCardDisableCardEx', 'request', request)
            const localVarPath = `/api/DisableCard/DisableCardEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/LayoutCard/EnableCard
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDisableCardEnableCard: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiDisableCardEnableCard', 'cardId', cardId)
            const localVarPath = `/api/DisableCard/EnableCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/LayoutCard/EnableCard
         * @param {DocsVisionWebClientModelsEnableCardRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDisableCardEnableCardEx: async (request: DocsVisionWebClientModelsEnableCardRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiDisableCardEnableCardEx', 'request', request)
            const localVarPath = `/api/DisableCard/EnableCardEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/LayoutCard/DisableCard
         * @param {string} cardId 
         * @param {PostApiDisableCardIdReasonEnum} reason 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDisableCardId: async (cardId: string, reason: PostApiDisableCardIdReasonEnum, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiDisableCardId', 'cardId', cardId)
            // verify required parameter 'reason' is not null or undefined
            assertParamExists('postApiDisableCardId', 'reason', reason)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiDisableCardId', 'id', id)
            const localVarPath = `/api/DisableCard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/LayoutCard/RemoveAllCardLocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDisableCardRemoveAllCardLocks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DisableCard/RemoveAllCardLocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DisableCardApi - functional programming interface
 * @export
 */
export const DisableCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DisableCardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary /api/LayoutCard/DisableCard
         * @param {string} cardId 
         * @param {PostApiDisableCardDisableCardReasonEnum} reason 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiDisableCardDisableCard(cardId: string, reason: PostApiDisableCardDisableCardReasonEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDisableCardDisableCard(cardId, reason, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/LayoutCard/DisableCardEx
         * @param {DocsVisionWebClientModelsDisableCardExRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDisableCardDisableCardEx(request: DocsVisionWebClientModelsDisableCardExRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDisableCardDisableCardEx(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/LayoutCard/EnableCard
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiDisableCardEnableCard(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDisableCardEnableCard(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/LayoutCard/EnableCard
         * @param {DocsVisionWebClientModelsEnableCardRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDisableCardEnableCardEx(request: DocsVisionWebClientModelsEnableCardRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDisableCardEnableCardEx(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/LayoutCard/DisableCard
         * @param {string} cardId 
         * @param {PostApiDisableCardIdReasonEnum} reason 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiDisableCardId(cardId: string, reason: PostApiDisableCardIdReasonEnum, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDisableCardId(cardId, reason, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/LayoutCard/RemoveAllCardLocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiDisableCardRemoveAllCardLocks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDisableCardRemoveAllCardLocks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DisableCardApi - factory interface
 * @export
 */
export const DisableCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DisableCardApiFp(configuration)
    return {
        /**
         * 
         * @summary /api/LayoutCard/DisableCard
         * @param {string} cardId 
         * @param {PostApiDisableCardDisableCardReasonEnum} reason 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDisableCardDisableCard(cardId: string, reason: PostApiDisableCardDisableCardReasonEnum, options?: any): AxiosPromise<void> {
            return localVarFp.postApiDisableCardDisableCard(cardId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/LayoutCard/DisableCardEx
         * @param {DocsVisionWebClientModelsDisableCardExRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDisableCardDisableCardEx(request: DocsVisionWebClientModelsDisableCardExRequestModel, options?: any): AxiosPromise<void> {
            return localVarFp.postApiDisableCardDisableCardEx(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/LayoutCard/EnableCard
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDisableCardEnableCard(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiDisableCardEnableCard(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/LayoutCard/EnableCard
         * @param {DocsVisionWebClientModelsEnableCardRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDisableCardEnableCardEx(request: DocsVisionWebClientModelsEnableCardRequestModel, options?: any): AxiosPromise<void> {
            return localVarFp.postApiDisableCardEnableCardEx(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/LayoutCard/DisableCard
         * @param {string} cardId 
         * @param {PostApiDisableCardIdReasonEnum} reason 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDisableCardId(cardId: string, reason: PostApiDisableCardIdReasonEnum, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiDisableCardId(cardId, reason, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/LayoutCard/RemoveAllCardLocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiDisableCardRemoveAllCardLocks(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiDisableCardRemoveAllCardLocks(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DisableCardApi - object-oriented interface
 * @export
 * @class DisableCardApi
 * @extends {BaseAPI}
 */
export class DisableCardApi extends BaseAPI {
    /**
     * 
     * @summary /api/LayoutCard/DisableCard
     * @param {string} cardId 
     * @param {PostApiDisableCardDisableCardReasonEnum} reason 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DisableCardApi
     */
    public postApiDisableCardDisableCard(cardId: string, reason: PostApiDisableCardDisableCardReasonEnum, options?: AxiosRequestConfig) {
        return DisableCardApiFp(this.configuration).postApiDisableCardDisableCard(cardId, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/LayoutCard/DisableCardEx
     * @param {DocsVisionWebClientModelsDisableCardExRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisableCardApi
     */
    public postApiDisableCardDisableCardEx(request: DocsVisionWebClientModelsDisableCardExRequestModel, options?: AxiosRequestConfig) {
        return DisableCardApiFp(this.configuration).postApiDisableCardDisableCardEx(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/LayoutCard/EnableCard
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DisableCardApi
     */
    public postApiDisableCardEnableCard(cardId: string, options?: AxiosRequestConfig) {
        return DisableCardApiFp(this.configuration).postApiDisableCardEnableCard(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/LayoutCard/EnableCard
     * @param {DocsVisionWebClientModelsEnableCardRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisableCardApi
     */
    public postApiDisableCardEnableCardEx(request: DocsVisionWebClientModelsEnableCardRequestModel, options?: AxiosRequestConfig) {
        return DisableCardApiFp(this.configuration).postApiDisableCardEnableCardEx(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/LayoutCard/DisableCard
     * @param {string} cardId 
     * @param {PostApiDisableCardIdReasonEnum} reason 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DisableCardApi
     */
    public postApiDisableCardId(cardId: string, reason: PostApiDisableCardIdReasonEnum, id: string, options?: AxiosRequestConfig) {
        return DisableCardApiFp(this.configuration).postApiDisableCardId(cardId, reason, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/LayoutCard/RemoveAllCardLocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisableCardApi
     */
    public postApiDisableCardRemoveAllCardLocks(options?: AxiosRequestConfig) {
        return DisableCardApiFp(this.configuration).postApiDisableCardRemoveAllCardLocks(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PostApiDisableCardDisableCardReasonEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type PostApiDisableCardDisableCardReasonEnum = typeof PostApiDisableCardDisableCardReasonEnum[keyof typeof PostApiDisableCardDisableCardReasonEnum];
/**
 * @export
 */
export const PostApiDisableCardIdReasonEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;
export type PostApiDisableCardIdReasonEnum = typeof PostApiDisableCardIdReasonEnum[keyof typeof PostApiDisableCardIdReasonEnum];


/**
 * DocumentCardApiApi - axios parameter creator
 * @export
 */
export const DocumentCardApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDocumentCardApiAddNewMainFileVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DocumentCardApi/AddNewMainFileVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [multiple] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDocumentCardApiCreateDocument: async (multiple?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DocumentCardApi/CreateDocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (multiple !== undefined) {
                localVarQueryParameter['multiple'] = multiple;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [multiple] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDocumentCardApiId: async (id: string, multiple?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiDocumentCardApiId', 'id', id)
            const localVarPath = `/api/DocumentCardApi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (multiple !== undefined) {
                localVarQueryParameter['multiple'] = multiple;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentCardApiApi - functional programming interface
 * @export
 */
export const DocumentCardApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentCardApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiDocumentCardApiAddNewMainFileVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDocumentCardApiAddNewMainFileVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {boolean} [multiple] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiDocumentCardApiCreateDocument(multiple?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDocumentCardApiCreateDocument(multiple, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [multiple] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiDocumentCardApiId(id: string, multiple?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiDocumentCardApiId(id, multiple, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentCardApiApi - factory interface
 * @export
 */
export const DocumentCardApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentCardApiApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDocumentCardApiAddNewMainFileVersion(options?: any): AxiosPromise<object> {
            return localVarFp.postApiDocumentCardApiAddNewMainFileVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [multiple] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDocumentCardApiCreateDocument(multiple?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.postApiDocumentCardApiCreateDocument(multiple, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [multiple] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiDocumentCardApiId(id: string, multiple?: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.postApiDocumentCardApiId(id, multiple, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentCardApiApi - object-oriented interface
 * @export
 * @class DocumentCardApiApi
 * @extends {BaseAPI}
 */
export class DocumentCardApiApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DocumentCardApiApi
     */
    public postApiDocumentCardApiAddNewMainFileVersion(options?: AxiosRequestConfig) {
        return DocumentCardApiApiFp(this.configuration).postApiDocumentCardApiAddNewMainFileVersion(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [multiple] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DocumentCardApiApi
     */
    public postApiDocumentCardApiCreateDocument(multiple?: boolean, options?: AxiosRequestConfig) {
        return DocumentCardApiApiFp(this.configuration).postApiDocumentCardApiCreateDocument(multiple, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {boolean} [multiple] 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DocumentCardApiApi
     */
    public postApiDocumentCardApiId(id: string, multiple?: boolean, options?: AxiosRequestConfig) {
        return DocumentCardApiApiFp(this.configuration).postApiDocumentCardApiId(id, multiple, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DocumentViewApi - axios parameter creator
 * @export
 */
export const DocumentViewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [documentViewRequestModelArchiveCaseId] 
         * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
         * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDocumentViewGetDocumentViewData: async (documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/DocumentView/GetDocumentViewData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentViewRequestModelArchiveCaseId !== undefined) {
                localVarQueryParameter['documentViewRequestModel.archiveCaseId'] = documentViewRequestModelArchiveCaseId;
            }

            if (documentViewRequestModelDescriptionColumnViewModeName !== undefined) {
                localVarQueryParameter['documentViewRequestModel.descriptionColumnViewModeName'] = documentViewRequestModelDescriptionColumnViewModeName;
            }

            if (documentViewRequestModelDocumentViewDescriptionColumnMethodKey !== undefined) {
                localVarQueryParameter['documentViewRequestModel.documentViewDescriptionColumnMethodKey'] = documentViewRequestModelDocumentViewDescriptionColumnMethodKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [documentViewRequestModelArchiveCaseId] 
         * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
         * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDocumentViewId: async (id: string, documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiDocumentViewId', 'id', id)
            const localVarPath = `/api/DocumentView/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentViewRequestModelArchiveCaseId !== undefined) {
                localVarQueryParameter['documentViewRequestModel.archiveCaseId'] = documentViewRequestModelArchiveCaseId;
            }

            if (documentViewRequestModelDescriptionColumnViewModeName !== undefined) {
                localVarQueryParameter['documentViewRequestModel.descriptionColumnViewModeName'] = documentViewRequestModelDescriptionColumnViewModeName;
            }

            if (documentViewRequestModelDocumentViewDescriptionColumnMethodKey !== undefined) {
                localVarQueryParameter['documentViewRequestModel.documentViewDescriptionColumnMethodKey'] = documentViewRequestModelDocumentViewDescriptionColumnMethodKey;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentViewApi - functional programming interface
 * @export
 */
export const DocumentViewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentViewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [documentViewRequestModelArchiveCaseId] 
         * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
         * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDocumentViewGetDocumentViewData(documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDocumentViewGetDocumentViewData(documentViewRequestModelArchiveCaseId, documentViewRequestModelDescriptionColumnViewModeName, documentViewRequestModelDocumentViewDescriptionColumnMethodKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [documentViewRequestModelArchiveCaseId] 
         * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
         * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDocumentViewId(id: string, documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDocumentViewId(id, documentViewRequestModelArchiveCaseId, documentViewRequestModelDescriptionColumnViewModeName, documentViewRequestModelDocumentViewDescriptionColumnMethodKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentViewApi - factory interface
 * @export
 */
export const DocumentViewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentViewApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [documentViewRequestModelArchiveCaseId] 
         * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
         * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDocumentViewGetDocumentViewData(documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension> {
            return localVarFp.getApiDocumentViewGetDocumentViewData(documentViewRequestModelArchiveCaseId, documentViewRequestModelDescriptionColumnViewModeName, documentViewRequestModelDocumentViewDescriptionColumnMethodKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [documentViewRequestModelArchiveCaseId] 
         * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
         * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDocumentViewId(id: string, documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionDocumentViewModelsDocumentViewModelDocsVisionArchiveManagementServerExtension> {
            return localVarFp.getApiDocumentViewId(id, documentViewRequestModelArchiveCaseId, documentViewRequestModelDescriptionColumnViewModeName, documentViewRequestModelDocumentViewDescriptionColumnMethodKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentViewApi - object-oriented interface
 * @export
 * @class DocumentViewApi
 * @extends {BaseAPI}
 */
export class DocumentViewApi extends BaseAPI {
    /**
     * 
     * @param {string} [documentViewRequestModelArchiveCaseId] 
     * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
     * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentViewApi
     */
    public getApiDocumentViewGetDocumentViewData(documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options?: AxiosRequestConfig) {
        return DocumentViewApiFp(this.configuration).getApiDocumentViewGetDocumentViewData(documentViewRequestModelArchiveCaseId, documentViewRequestModelDescriptionColumnViewModeName, documentViewRequestModelDocumentViewDescriptionColumnMethodKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [documentViewRequestModelArchiveCaseId] 
     * @param {number} [documentViewRequestModelDescriptionColumnViewModeName] 
     * @param {string} [documentViewRequestModelDocumentViewDescriptionColumnMethodKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentViewApi
     */
    public getApiDocumentViewId(id: string, documentViewRequestModelArchiveCaseId?: string, documentViewRequestModelDescriptionColumnViewModeName?: number, documentViewRequestModelDocumentViewDescriptionColumnMethodKey?: string, options?: AxiosRequestConfig) {
        return DocumentViewApiFp(this.configuration).getApiDocumentViewId(id, documentViewRequestModelArchiveCaseId, documentViewRequestModelDescriptionColumnViewModeName, documentViewRequestModelDocumentViewDescriptionColumnMethodKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DownloadFilesBatchOperationApi - axios parameter creator
 * @export
 */
export const DownloadFilesBatchOperationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET: /DownloadFilesBatchOperation/
         * @param {string} documentId Document ID
         * @param {boolean} includeMainFiles Include main files to list?
         * @param {boolean} includeAdditionalFiles Include additional files to list?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationGetDocumentFiles: async (documentId: string, includeMainFiles: boolean, includeAdditionalFiles: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetDocumentFiles', 'documentId', documentId)
            // verify required parameter 'includeMainFiles' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetDocumentFiles', 'includeMainFiles', includeMainFiles)
            // verify required parameter 'includeAdditionalFiles' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetDocumentFiles', 'includeAdditionalFiles', includeAdditionalFiles)
            const localVarPath = `/api/DownloadFilesBatchOperation/GetDocumentFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (includeMainFiles !== undefined) {
                localVarQueryParameter['includeMainFiles'] = includeMainFiles;
            }

            if (includeAdditionalFiles !== undefined) {
                localVarQueryParameter['includeAdditionalFiles'] = includeAdditionalFiles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /GetZipFiles/
         * @param {Array<string>} cardIds 
         * @param {boolean} includeAdditionalFiles 
         * @param {boolean} includeMainFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationGetZipFileList: async (cardIds: Array<string>, includeAdditionalFiles: boolean, includeMainFiles: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardIds' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetZipFileList', 'cardIds', cardIds)
            // verify required parameter 'includeAdditionalFiles' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetZipFileList', 'includeAdditionalFiles', includeAdditionalFiles)
            // verify required parameter 'includeMainFiles' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetZipFileList', 'includeMainFiles', includeMainFiles)
            const localVarPath = `/api/DownloadFilesBatchOperation/GetZipFileList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardIds) {
                localVarQueryParameter['cardIds'] = cardIds;
            }

            if (includeAdditionalFiles !== undefined) {
                localVarQueryParameter['includeAdditionalFiles'] = includeAdditionalFiles;
            }

            if (includeMainFiles !== undefined) {
                localVarQueryParameter['includeMainFiles'] = includeMainFiles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /GetZipFiles/
         * @param {string} cardId 
         * @param {boolean} includeAdditionalFiles 
         * @param {boolean} includeMainFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationGetZipFiles: async (cardId: string, includeAdditionalFiles: boolean, includeMainFiles: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetZipFiles', 'cardId', cardId)
            // verify required parameter 'includeAdditionalFiles' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetZipFiles', 'includeAdditionalFiles', includeAdditionalFiles)
            // verify required parameter 'includeMainFiles' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationGetZipFiles', 'includeMainFiles', includeMainFiles)
            const localVarPath = `/api/DownloadFilesBatchOperation/GetZipFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (includeAdditionalFiles !== undefined) {
                localVarQueryParameter['includeAdditionalFiles'] = includeAdditionalFiles;
            }

            if (includeMainFiles !== undefined) {
                localVarQueryParameter['includeMainFiles'] = includeMainFiles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /IsHasFileCertificateSignature/
         * @param {string} documentId Document ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationId: async (documentId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationId', 'documentId', documentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationId', 'id', id)
            const localVarPath = `/api/DownloadFilesBatchOperation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /IsHasFileCertificateSignature/
         * @param {string} documentId Document ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationIsHasFileCertificateSignature: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiDownloadFilesBatchOperationIsHasFileCertificateSignature', 'documentId', documentId)
            const localVarPath = `/api/DownloadFilesBatchOperation/IsHasFileCertificateSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadFilesBatchOperationApi - functional programming interface
 * @export
 */
export const DownloadFilesBatchOperationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadFilesBatchOperationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET: /DownloadFilesBatchOperation/
         * @param {string} documentId Document ID
         * @param {boolean} includeMainFiles Include main files to list?
         * @param {boolean} includeAdditionalFiles Include additional files to list?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDownloadFilesBatchOperationGetDocumentFiles(documentId: string, includeMainFiles: boolean, includeAdditionalFiles: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDownloadFilesBatchOperationGetDocumentFiles(documentId, includeMainFiles, includeAdditionalFiles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /GetZipFiles/
         * @param {Array<string>} cardIds 
         * @param {boolean} includeAdditionalFiles 
         * @param {boolean} includeMainFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDownloadFilesBatchOperationGetZipFileList(cardIds: Array<string>, includeAdditionalFiles: boolean, includeMainFiles: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDownloadFilesBatchOperationGetZipFileList(cardIds, includeAdditionalFiles, includeMainFiles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /GetZipFiles/
         * @param {string} cardId 
         * @param {boolean} includeAdditionalFiles 
         * @param {boolean} includeMainFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDownloadFilesBatchOperationGetZipFiles(cardId: string, includeAdditionalFiles: boolean, includeMainFiles: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDownloadFilesBatchOperationGetZipFiles(cardId, includeAdditionalFiles, includeMainFiles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /IsHasFileCertificateSignature/
         * @param {string} documentId Document ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDownloadFilesBatchOperationId(documentId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDownloadFilesBatchOperationId(documentId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /IsHasFileCertificateSignature/
         * @param {string} documentId Document ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiDownloadFilesBatchOperationIsHasFileCertificateSignature(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiDownloadFilesBatchOperationIsHasFileCertificateSignature(documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DownloadFilesBatchOperationApi - factory interface
 * @export
 */
export const DownloadFilesBatchOperationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadFilesBatchOperationApiFp(configuration)
    return {
        /**
         * 
         * @summary GET: /DownloadFilesBatchOperation/
         * @param {string} documentId Document ID
         * @param {boolean} includeMainFiles Include main files to list?
         * @param {boolean} includeAdditionalFiles Include additional files to list?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationGetDocumentFiles(documentId: string, includeMainFiles: boolean, includeAdditionalFiles: boolean, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsDocumentFilesResponseModelDocsVisionWebClient> {
            return localVarFp.getApiDownloadFilesBatchOperationGetDocumentFiles(documentId, includeMainFiles, includeAdditionalFiles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /GetZipFiles/
         * @param {Array<string>} cardIds 
         * @param {boolean} includeAdditionalFiles 
         * @param {boolean} includeMainFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationGetZipFileList(cardIds: Array<string>, includeAdditionalFiles: boolean, includeMainFiles: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.getApiDownloadFilesBatchOperationGetZipFileList(cardIds, includeAdditionalFiles, includeMainFiles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /GetZipFiles/
         * @param {string} cardId 
         * @param {boolean} includeAdditionalFiles 
         * @param {boolean} includeMainFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationGetZipFiles(cardId: string, includeAdditionalFiles: boolean, includeMainFiles: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.getApiDownloadFilesBatchOperationGetZipFiles(cardId, includeAdditionalFiles, includeMainFiles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /IsHasFileCertificateSignature/
         * @param {string} documentId Document ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationId(documentId: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient> {
            return localVarFp.getApiDownloadFilesBatchOperationId(documentId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /IsHasFileCertificateSignature/
         * @param {string} documentId Document ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiDownloadFilesBatchOperationIsHasFileCertificateSignature(documentId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsIsHasFileCertificateSignatureModelDocsVisionWebClient> {
            return localVarFp.getApiDownloadFilesBatchOperationIsHasFileCertificateSignature(documentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadFilesBatchOperationApi - object-oriented interface
 * @export
 * @class DownloadFilesBatchOperationApi
 * @extends {BaseAPI}
 */
export class DownloadFilesBatchOperationApi extends BaseAPI {
    /**
     * 
     * @summary GET: /DownloadFilesBatchOperation/
     * @param {string} documentId Document ID
     * @param {boolean} includeMainFiles Include main files to list?
     * @param {boolean} includeAdditionalFiles Include additional files to list?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadFilesBatchOperationApi
     */
    public getApiDownloadFilesBatchOperationGetDocumentFiles(documentId: string, includeMainFiles: boolean, includeAdditionalFiles: boolean, options?: AxiosRequestConfig) {
        return DownloadFilesBatchOperationApiFp(this.configuration).getApiDownloadFilesBatchOperationGetDocumentFiles(documentId, includeMainFiles, includeAdditionalFiles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /GetZipFiles/
     * @param {Array<string>} cardIds 
     * @param {boolean} includeAdditionalFiles 
     * @param {boolean} includeMainFiles 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadFilesBatchOperationApi
     */
    public getApiDownloadFilesBatchOperationGetZipFileList(cardIds: Array<string>, includeAdditionalFiles: boolean, includeMainFiles: boolean, options?: AxiosRequestConfig) {
        return DownloadFilesBatchOperationApiFp(this.configuration).getApiDownloadFilesBatchOperationGetZipFileList(cardIds, includeAdditionalFiles, includeMainFiles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /GetZipFiles/
     * @param {string} cardId 
     * @param {boolean} includeAdditionalFiles 
     * @param {boolean} includeMainFiles 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadFilesBatchOperationApi
     */
    public getApiDownloadFilesBatchOperationGetZipFiles(cardId: string, includeAdditionalFiles: boolean, includeMainFiles: boolean, options?: AxiosRequestConfig) {
        return DownloadFilesBatchOperationApiFp(this.configuration).getApiDownloadFilesBatchOperationGetZipFiles(cardId, includeAdditionalFiles, includeMainFiles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /IsHasFileCertificateSignature/
     * @param {string} documentId Document ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadFilesBatchOperationApi
     */
    public getApiDownloadFilesBatchOperationId(documentId: string, id: string, options?: AxiosRequestConfig) {
        return DownloadFilesBatchOperationApiFp(this.configuration).getApiDownloadFilesBatchOperationId(documentId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /IsHasFileCertificateSignature/
     * @param {string} documentId Document ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadFilesBatchOperationApi
     */
    public getApiDownloadFilesBatchOperationIsHasFileCertificateSignature(documentId: string, options?: AxiosRequestConfig) {
        return DownloadFilesBatchOperationApiFp(this.configuration).getApiDownloadFilesBatchOperationIsHasFileCertificateSignature(documentId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EdiBaseApiApi - axios parameter creator
 * @export
 */
export const EdiBaseApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiBaseApiGetBoxes: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getApiEdiBaseApiGetBoxes', 'itemId', itemId)
            const localVarPath = `/api/EdiBaseApi/GetBoxes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiBaseApiGetEdiDocumentState: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiEdiBaseApiGetEdiDocumentState', 'cardId', cardId)
            const localVarPath = `/api/EdiBaseApi/GetEdiDocumentState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiBaseApiId: async (itemId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getApiEdiBaseApiId', 'itemId', itemId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiEdiBaseApiId', 'id', id)
            const localVarPath = `/api/EdiBaseApi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiBaseApiGetEdiMessageLogSignatureStatus: async (request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiBaseApiGetEdiMessageLogSignatureStatus', 'request', request)
            const localVarPath = `/api/EdiBaseApi/GetEdiMessageLogSignatureStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiBaseApiId: async (id: string, request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiEdiBaseApiId', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiBaseApiId', 'request', request)
            const localVarPath = `/api/EdiBaseApi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdiBaseApiApi - functional programming interface
 * @export
 */
export const EdiBaseApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdiBaseApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiBaseApiGetBoxes(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiBaseApiGetBoxes(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiBaseApiGetEdiDocumentState(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiBaseApiGetEdiDocumentState(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiBaseApiId(itemId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiBaseApiId(itemId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiBaseApiGetEdiMessageLogSignatureStatus(request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiBaseApiGetEdiMessageLogSignatureStatus(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiBaseApiId(id: string, request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiBaseApiId(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EdiBaseApiApi - factory interface
 * @export
 */
export const EdiBaseApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdiBaseApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiBaseApiGetBoxes(itemId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension> {
            return localVarFp.getApiEdiBaseApiGetBoxes(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiBaseApiGetEdiDocumentState(cardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionModelsEdiDocumentStateModelDocsVisionEdiWebClientServerExtension> {
            return localVarFp.getApiEdiBaseApiGetEdiDocumentState(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} itemId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiBaseApiId(itemId: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiBaseItemModelDocsVisionEdiWebClientServerExtension> {
            return localVarFp.getApiEdiBaseApiId(itemId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiBaseApiGetEdiMessageLogSignatureStatus(request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiBaseApiGetEdiMessageLogSignatureStatus(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiBaseApiId(id: string, request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiBaseApiId(id, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdiBaseApiApi - object-oriented interface
 * @export
 * @class EdiBaseApiApi
 * @extends {BaseAPI}
 */
export class EdiBaseApiApi extends BaseAPI {
    /**
     * 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiBaseApiApi
     */
    public getApiEdiBaseApiGetBoxes(itemId: string, options?: AxiosRequestConfig) {
        return EdiBaseApiApiFp(this.configuration).getApiEdiBaseApiGetBoxes(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiBaseApiApi
     */
    public getApiEdiBaseApiGetEdiDocumentState(cardId: string, options?: AxiosRequestConfig) {
        return EdiBaseApiApiFp(this.configuration).getApiEdiBaseApiGetEdiDocumentState(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} itemId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiBaseApiApi
     */
    public getApiEdiBaseApiId(itemId: string, id: string, options?: AxiosRequestConfig) {
        return EdiBaseApiApiFp(this.configuration).getApiEdiBaseApiId(itemId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiBaseApiApi
     */
    public postApiEdiBaseApiGetEdiMessageLogSignatureStatus(request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options?: AxiosRequestConfig) {
        return EdiBaseApiApiFp(this.configuration).postApiEdiBaseApiGetEdiMessageLogSignatureStatus(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiBaseApiApi
     */
    public postApiEdiBaseApiId(id: string, request: DocsVisionEdiWebClientServerExtensionModelsEdiLogSignatureStatusRequest, options?: AxiosRequestConfig) {
        return EdiBaseApiApiFp(this.configuration).postApiEdiBaseApiId(id, request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EdiDataApi - axios parameter creator
 * @export
 */
export const EdiDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiDataGetBoxes: async (unitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('getApiEdiDataGetBoxes', 'unitId', unitId)
            const localVarPath = `/api/EdiData/GetBoxes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (unitId !== undefined) {
                localVarQueryParameter['unitId'] = unitId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiDataGetDepartments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/EdiData/GetDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiDataId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiEdiDataId', 'id', id)
            const localVarPath = `/api/EdiData/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataApproveRevocation: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataApproveRevocation', 'data', data)
            const localVarPath = `/api/EdiData/ApproveRevocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckIncomingMessages: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataCheckIncomingMessages', 'data', data)
            const localVarPath = `/api/EdiData/CheckIncomingMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckMessagesToRevoke: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataCheckMessagesToRevoke', 'data', data)
            const localVarPath = `/api/EdiData/CheckMessagesToRevoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckReceiptMessages: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataCheckReceiptMessages', 'data', data)
            const localVarPath = `/api/EdiData/CheckReceiptMessages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckRecipients: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataCheckRecipients', 'data', data)
            const localVarPath = `/api/EdiData/CheckRecipients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckRevocationReplyAvailable: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataCheckRevocationReplyAvailable', 'data', data)
            const localVarPath = `/api/EdiData/CheckRevocationReplyAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetDocumentSignAndSendInfo: async (request: DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiDataGetDocumentSignAndSendInfo', 'request', request)
            const localVarPath = `/api/EdiData/GetDocumentSignAndSendInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToAccept: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataGetFilesToAccept', 'data', data)
            const localVarPath = `/api/EdiData/GetFilesToAccept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToApproveRevocation: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataGetFilesToApproveRevocation', 'data', data)
            const localVarPath = `/api/EdiData/GetFilesToApproveRevocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToReject: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataGetFilesToReject', 'data', data)
            const localVarPath = `/api/EdiData/GetFilesToReject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToRejectRevocation: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataGetFilesToRejectRevocation', 'data', data)
            const localVarPath = `/api/EdiData/GetFilesToRejectRevocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToRevoke: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataGetFilesToRevoke', 'data', data)
            const localVarPath = `/api/EdiData/GetFilesToRevoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetReceiptFiles: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataGetReceiptFiles', 'data', data)
            const localVarPath = `/api/EdiData/GetReceiptFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataReceipt: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataReceipt', 'data', data)
            const localVarPath = `/api/EdiData/Receipt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataRejectAndSendInvoice: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataRejectAndSendInvoice', 'data', data)
            const localVarPath = `/api/EdiData/RejectAndSendInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataRejectRevocation: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataRejectRevocation', 'data', data)
            const localVarPath = `/api/EdiData/RejectRevocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataRevoke: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataRevoke', 'data', data)
            const localVarPath = `/api/EdiData/Revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataSendDocument: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataSendDocument', 'data', data)
            const localVarPath = `/api/EdiData/SendDocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataSendIncoming: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataSendIncoming', 'data', data)
            const localVarPath = `/api/EdiData/SendIncoming`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataSignAndSendInvoice: async (data: DocsVisionEdiWebClientServerExtensionInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiEdiDataSignAndSendInvoice', 'data', data)
            const localVarPath = `/api/EdiData/SignAndSendInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdiDataApi - functional programming interface
 * @export
 */
export const EdiDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdiDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiDataGetBoxes(unitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiDataGetBoxes(unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiDataGetDepartments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiDataGetDepartments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiDataId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiDataId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataApproveRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataApproveRevocation(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataCheckIncomingMessages(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataCheckIncomingMessages(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataCheckMessagesToRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataCheckMessagesToRevoke(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataCheckReceiptMessages(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataCheckReceiptMessages(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataCheckRecipients(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataCheckRecipients(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataCheckRevocationReplyAvailable(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataCheckRevocationReplyAvailable(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataGetDocumentSignAndSendInfo(request: DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataGetDocumentSignAndSendInfo(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataGetFilesToAccept(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataGetFilesToAccept(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataGetFilesToApproveRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataGetFilesToApproveRevocation(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataGetFilesToReject(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataGetFilesToReject(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataGetFilesToRejectRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataGetFilesToRejectRevocation(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataGetFilesToRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataGetFilesToRevoke(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataGetReceiptFiles(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataGetReceiptFiles(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataReceipt(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataReceipt(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataRejectAndSendInvoice(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataRejectAndSendInvoice(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataRejectRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataRejectRevocation(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataRevoke(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataSendDocument(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataSendDocument(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataSendIncoming(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataSendIncoming(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiDataSignAndSendInvoice(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiDataSignAndSendInvoice(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EdiDataApi - factory interface
 * @export
 */
export const EdiDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdiDataApiFp(configuration)
    return {
        /**
         * 
         * @param {string} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiDataGetBoxes(unitId: string, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.getApiEdiDataGetBoxes(unitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiDataGetDepartments(options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.getApiEdiDataGetDepartments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiDataId(id: string, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionItemResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.getApiEdiDataId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataApproveRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataApproveRevocation(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckIncomingMessages(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataCheckIncomingMessages(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckMessagesToRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataCheckMessagesToRevoke(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckReceiptMessages(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataCheckReceiptMessages(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckRecipients(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataCheckRecipients(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataCheckRevocationReplyAvailable(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataCheckRevocationReplyAvailable(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetDocumentSignAndSendInfo(request: DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest, options?: any): AxiosPromise<DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfo> {
            return localVarFp.postApiEdiDataGetDocumentSignAndSendInfo(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToAccept(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataGetFilesToAccept(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToApproveRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataGetFilesToApproveRevocation(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToReject(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataGetFilesToReject(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToRejectRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataGetFilesToRejectRevocation(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetFilesToRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataGetFilesToRevoke(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataGetReceiptFiles(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionFilesResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataGetReceiptFiles(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataReceipt(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataReceipt(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataRejectAndSendInvoice(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataRejectAndSendInvoice(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataRejectRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataRejectRevocation(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataRevoke(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataSendDocument(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataSendDocument(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataSendIncoming(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataSendIncoming(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionInput} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiDataSignAndSendInvoice(data: DocsVisionEdiWebClientServerExtensionInput, options?: any): AxiosPromise<SystemWebHttpResultsJsonResultDocsVisionEdiWebClientServerExtensionBoolResultDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiDataSignAndSendInvoice(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdiDataApi - object-oriented interface
 * @export
 * @class EdiDataApi
 * @extends {BaseAPI}
 */
export class EdiDataApi extends BaseAPI {
    /**
     * 
     * @param {string} unitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public getApiEdiDataGetBoxes(unitId: string, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).getApiEdiDataGetBoxes(unitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public getApiEdiDataGetDepartments(options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).getApiEdiDataGetDepartments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public getApiEdiDataId(id: string, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).getApiEdiDataId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataApproveRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataApproveRevocation(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataCheckIncomingMessages(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataCheckIncomingMessages(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataCheckMessagesToRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataCheckMessagesToRevoke(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataCheckReceiptMessages(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataCheckReceiptMessages(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataCheckRecipients(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataCheckRecipients(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataCheckRevocationReplyAvailable(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataCheckRevocationReplyAvailable(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataGetDocumentSignAndSendInfo(request: DocsVisionEdiWebClientServerExtensionEdiDocumentSignAndSendInfoRequest, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataGetDocumentSignAndSendInfo(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataGetFilesToAccept(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataGetFilesToAccept(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataGetFilesToApproveRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataGetFilesToApproveRevocation(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataGetFilesToReject(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataGetFilesToReject(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataGetFilesToRejectRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataGetFilesToRejectRevocation(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataGetFilesToRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataGetFilesToRevoke(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataGetReceiptFiles(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataGetReceiptFiles(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataReceipt(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataReceipt(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataRejectAndSendInvoice(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataRejectAndSendInvoice(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataRejectRevocation(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataRejectRevocation(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataRevoke(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataRevoke(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataSendDocument(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataSendDocument(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataSendIncoming(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataSendIncoming(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionInput} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiDataApi
     */
    public postApiEdiDataSignAndSendInvoice(data: DocsVisionEdiWebClientServerExtensionInput, options?: AxiosRequestConfig) {
        return EdiDataApiFp(this.configuration).postApiEdiDataSignAndSendInvoice(data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EdiFileSyncApi - axios parameter creator
 * @export
 */
export const EdiFileSyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiFileSyncId: async (id: string, request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiEdiFileSyncId', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiFileSyncId', 'request', request)
            const localVarPath = `/api/EdiFileSync/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiFileSyncUpdateDocumentDataFromInvoice: async (request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiFileSyncUpdateDocumentDataFromInvoice', 'request', request)
            const localVarPath = `/api/EdiFileSync/UpdateDocumentDataFromInvoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdiFileSyncApi - functional programming interface
 * @export
 */
export const EdiFileSyncApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdiFileSyncApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiFileSyncId(id: string, request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiFileSyncId(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiFileSyncUpdateDocumentDataFromInvoice(request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiFileSyncUpdateDocumentDataFromInvoice(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EdiFileSyncApi - factory interface
 * @export
 */
export const EdiFileSyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdiFileSyncApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiFileSyncId(id: string, request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiEdiFileSyncId(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiFileSyncUpdateDocumentDataFromInvoice(request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiEdiFileSyncUpdateDocumentDataFromInvoice(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdiFileSyncApi - object-oriented interface
 * @export
 * @class EdiFileSyncApi
 * @extends {BaseAPI}
 */
export class EdiFileSyncApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiFileSyncApi
     */
    public postApiEdiFileSyncId(id: string, request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options?: AxiosRequestConfig) {
        return EdiFileSyncApiFp(this.configuration).postApiEdiFileSyncId(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionFileSyncRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiFileSyncApi
     */
    public postApiEdiFileSyncUpdateDocumentDataFromInvoice(request: DocsVisionEdiWebClientServerExtensionFileSyncRequest, options?: AxiosRequestConfig) {
        return EdiFileSyncApiFp(this.configuration).postApiEdiFileSyncUpdateDocumentDataFromInvoice(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EdiPowerOfAttorneyApi - axios parameter creator
 * @export
 */
export const EdiPowerOfAttorneyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney: async (request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney', 'request', request)
            const localVarPath = `/api/EdiPowerOfAttorney/DeleteEmployeePowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus: async (request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus', 'request', request)
            const localVarPath = `/api/EdiPowerOfAttorney/GetPowerOfAttorneyRegistrationStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration: async (request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration', 'request', request)
            const localVarPath = `/api/EdiPowerOfAttorney/SendPowerOfAttorneyToRegistration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdiPowerOfAttorneyApi - functional programming interface
 * @export
 */
export const EdiPowerOfAttorneyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdiPowerOfAttorneyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EdiPowerOfAttorneyApi - factory interface
 * @export
 */
export const EdiPowerOfAttorneyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdiPowerOfAttorneyApiFp(configuration)
    return {
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusDocsVisionEdiWebClientServerExtension> {
            return localVarFp.postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdiPowerOfAttorneyApi - object-oriented interface
 * @export
 * @class EdiPowerOfAttorneyApi
 * @extends {BaseAPI}
 */
export class EdiPowerOfAttorneyApi extends BaseAPI {
    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiPowerOfAttorneyApi
     */
    public postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRevokeRequest, options?: AxiosRequestConfig) {
        return EdiPowerOfAttorneyApiFp(this.configuration).postApiEdiPowerOfAttorneyDeleteEmployeePowerOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiPowerOfAttorneyApi
     */
    public postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationStatusRequest, options?: AxiosRequestConfig) {
        return EdiPowerOfAttorneyApiFp(this.configuration).postApiEdiPowerOfAttorneyGetPowerOfAttorneyRegistrationStatus(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiPowerOfAttorneyApi
     */
    public postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration(request: DocsVisionEdiWebClientServerExtensionPowerOfAttorneyRegistrationRequest, options?: AxiosRequestConfig) {
        return EdiPowerOfAttorneyApiFp(this.configuration).postApiEdiPowerOfAttorneySendPowerOfAttorneyToRegistration(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EdiPrintApi - axios parameter creator
 * @export
 */
export const EdiPrintApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} documentId 
         * @param {string} xsltAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiPrintGetInvoicePrintForm: async (documentId: string, xsltAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiEdiPrintGetInvoicePrintForm', 'documentId', documentId)
            // verify required parameter 'xsltAlias' is not null or undefined
            assertParamExists('getApiEdiPrintGetInvoicePrintForm', 'xsltAlias', xsltAlias)
            const localVarPath = `/api/EdiPrint/GetInvoicePrintForm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (xsltAlias !== undefined) {
                localVarQueryParameter['xsltAlias'] = xsltAlias;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} documentId 
         * @param {string} xsltAlias 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiPrintId: async (documentId: string, xsltAlias: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiEdiPrintId', 'documentId', documentId)
            // verify required parameter 'xsltAlias' is not null or undefined
            assertParamExists('getApiEdiPrintId', 'xsltAlias', xsltAlias)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiEdiPrintId', 'id', id)
            const localVarPath = `/api/EdiPrint/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (xsltAlias !== undefined) {
                localVarQueryParameter['xsltAlias'] = xsltAlias;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPrintGetInvoicePrintFormEx: async (request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiPrintGetInvoicePrintFormEx', 'request', request)
            const localVarPath = `/api/EdiPrint/GetInvoicePrintFormEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPrintId: async (id: string, request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiEdiPrintId', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiEdiPrintId', 'request', request)
            const localVarPath = `/api/EdiPrint/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EdiPrintApi - functional programming interface
 * @export
 */
export const EdiPrintApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EdiPrintApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} documentId 
         * @param {string} xsltAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiPrintGetInvoicePrintForm(documentId: string, xsltAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiPrintGetInvoicePrintForm(documentId, xsltAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} documentId 
         * @param {string} xsltAlias 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEdiPrintId(documentId: string, xsltAlias: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEdiPrintId(documentId, xsltAlias, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiPrintGetInvoicePrintFormEx(request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiPrintGetInvoicePrintFormEx(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEdiPrintId(id: string, request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEdiPrintId(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EdiPrintApi - factory interface
 * @export
 */
export const EdiPrintApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EdiPrintApiFp(configuration)
    return {
        /**
         * 
         * @param {string} documentId 
         * @param {string} xsltAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiPrintGetInvoicePrintForm(documentId: string, xsltAlias: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiEdiPrintGetInvoicePrintForm(documentId, xsltAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} documentId 
         * @param {string} xsltAlias 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEdiPrintId(documentId: string, xsltAlias: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiEdiPrintId(documentId, xsltAlias, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPrintGetInvoicePrintFormEx(request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiEdiPrintGetInvoicePrintFormEx(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEdiPrintId(id: string, request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiEdiPrintId(id, request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EdiPrintApi - object-oriented interface
 * @export
 * @class EdiPrintApi
 * @extends {BaseAPI}
 */
export class EdiPrintApi extends BaseAPI {
    /**
     * 
     * @param {string} documentId 
     * @param {string} xsltAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiPrintApi
     */
    public getApiEdiPrintGetInvoicePrintForm(documentId: string, xsltAlias: string, options?: AxiosRequestConfig) {
        return EdiPrintApiFp(this.configuration).getApiEdiPrintGetInvoicePrintForm(documentId, xsltAlias, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} documentId 
     * @param {string} xsltAlias 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiPrintApi
     */
    public getApiEdiPrintId(documentId: string, xsltAlias: string, id: string, options?: AxiosRequestConfig) {
        return EdiPrintApiFp(this.configuration).getApiEdiPrintId(documentId, xsltAlias, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiPrintApi
     */
    public postApiEdiPrintGetInvoicePrintFormEx(request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options?: AxiosRequestConfig) {
        return EdiPrintApiFp(this.configuration).postApiEdiPrintGetInvoicePrintFormEx(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DocsVisionEdiWebClientServerExtensionEdiPrintRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EdiPrintApi
     */
    public postApiEdiPrintId(id: string, request: DocsVisionEdiWebClientServerExtensionEdiPrintRequest, options?: AxiosRequestConfig) {
        return EdiPrintApiFp(this.configuration).postApiEdiPrintId(id, request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmailApi - axios parameter creator
 * @export
 */
export const EmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
         * @param {string} documentId Document identifier.
         * @param {string} cardLink Url for open card.
         * @param {string} templateAlias Whether or not to include link to card
         * @param {GetApiEmailGetEmlFileFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
         * @param {Array<string>} fileIds List of files identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEmailGetEmlFile: async (documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailGetEmlFileFileAttachmentsModeEnum, fileIds: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiEmailGetEmlFile', 'documentId', documentId)
            // verify required parameter 'cardLink' is not null or undefined
            assertParamExists('getApiEmailGetEmlFile', 'cardLink', cardLink)
            // verify required parameter 'templateAlias' is not null or undefined
            assertParamExists('getApiEmailGetEmlFile', 'templateAlias', templateAlias)
            // verify required parameter 'fileAttachmentsMode' is not null or undefined
            assertParamExists('getApiEmailGetEmlFile', 'fileAttachmentsMode', fileAttachmentsMode)
            // verify required parameter 'fileIds' is not null or undefined
            assertParamExists('getApiEmailGetEmlFile', 'fileIds', fileIds)
            const localVarPath = `/api/Email/GetEmlFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (cardLink !== undefined) {
                localVarQueryParameter['cardLink'] = cardLink;
            }

            if (templateAlias !== undefined) {
                localVarQueryParameter['templateAlias'] = templateAlias;
            }

            if (fileAttachmentsMode !== undefined) {
                localVarQueryParameter['fileAttachmentsMode'] = fileAttachmentsMode;
            }

            if (fileIds) {
                localVarQueryParameter['fileIds'] = fileIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
         * @param {string} documentId Document identifier.
         * @param {string} cardLink Url for open card.
         * @param {string} templateAlias Whether or not to include link to card
         * @param {GetApiEmailIdFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
         * @param {Array<string>} fileIds List of files identifiers
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEmailId: async (documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailIdFileAttachmentsModeEnum, fileIds: Array<string>, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiEmailId', 'documentId', documentId)
            // verify required parameter 'cardLink' is not null or undefined
            assertParamExists('getApiEmailId', 'cardLink', cardLink)
            // verify required parameter 'templateAlias' is not null or undefined
            assertParamExists('getApiEmailId', 'templateAlias', templateAlias)
            // verify required parameter 'fileAttachmentsMode' is not null or undefined
            assertParamExists('getApiEmailId', 'fileAttachmentsMode', fileAttachmentsMode)
            // verify required parameter 'fileIds' is not null or undefined
            assertParamExists('getApiEmailId', 'fileIds', fileIds)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiEmailId', 'id', id)
            const localVarPath = `/api/Email/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (cardLink !== undefined) {
                localVarQueryParameter['cardLink'] = cardLink;
            }

            if (templateAlias !== undefined) {
                localVarQueryParameter['templateAlias'] = templateAlias;
            }

            if (fileAttachmentsMode !== undefined) {
                localVarQueryParameter['fileAttachmentsMode'] = fileAttachmentsMode;
            }

            if (fileIds) {
                localVarQueryParameter['fileIds'] = fileIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailApi - functional programming interface
 * @export
 */
export const EmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
         * @param {string} documentId Document identifier.
         * @param {string} cardLink Url for open card.
         * @param {string} templateAlias Whether or not to include link to card
         * @param {GetApiEmailGetEmlFileFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
         * @param {Array<string>} fileIds List of files identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEmailGetEmlFile(documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailGetEmlFileFileAttachmentsModeEnum, fileIds: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEmailGetEmlFile(documentId, cardLink, templateAlias, fileAttachmentsMode, fileIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
         * @param {string} documentId Document identifier.
         * @param {string} cardLink Url for open card.
         * @param {string} templateAlias Whether or not to include link to card
         * @param {GetApiEmailIdFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
         * @param {Array<string>} fileIds List of files identifiers
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiEmailId(documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailIdFileAttachmentsModeEnum, fileIds: Array<string>, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiEmailId(documentId, cardLink, templateAlias, fileAttachmentsMode, fileIds, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailApi - factory interface
 * @export
 */
export const EmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
         * @param {string} documentId Document identifier.
         * @param {string} cardLink Url for open card.
         * @param {string} templateAlias Whether or not to include link to card
         * @param {GetApiEmailGetEmlFileFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
         * @param {Array<string>} fileIds List of files identifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEmailGetEmlFile(documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailGetEmlFileFileAttachmentsModeEnum, fileIds: Array<string>, options?: any): AxiosPromise<object> {
            return localVarFp.getApiEmailGetEmlFile(documentId, cardLink, templateAlias, fileAttachmentsMode, fileIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
         * @param {string} documentId Document identifier.
         * @param {string} cardLink Url for open card.
         * @param {string} templateAlias Whether or not to include link to card
         * @param {GetApiEmailIdFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
         * @param {Array<string>} fileIds List of files identifiers
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiEmailId(documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailIdFileAttachmentsModeEnum, fileIds: Array<string>, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiEmailId(documentId, cardLink, templateAlias, fileAttachmentsMode, fileIds, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
export class EmailApi extends BaseAPI {
    /**
     * 
     * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
     * @param {string} documentId Document identifier.
     * @param {string} cardLink Url for open card.
     * @param {string} templateAlias Whether or not to include link to card
     * @param {GetApiEmailGetEmlFileFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
     * @param {Array<string>} fileIds List of files identifiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public getApiEmailGetEmlFile(documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailGetEmlFileFileAttachmentsModeEnum, fileIds: Array<string>, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).getApiEmailGetEmlFile(documentId, cardLink, templateAlias, fileAttachmentsMode, fileIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generates and downloads EML file from {DocsVision.BackOffice.ObjectModel.Document}.
     * @param {string} documentId Document identifier.
     * @param {string} cardLink Url for open card.
     * @param {string} templateAlias Whether or not to include link to card
     * @param {GetApiEmailIdFileAttachmentsModeEnum} fileAttachmentsMode File attachments mode
     * @param {Array<string>} fileIds List of files identifiers
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public getApiEmailId(documentId: string, cardLink: string, templateAlias: string, fileAttachmentsMode: GetApiEmailIdFileAttachmentsModeEnum, fileIds: Array<string>, id: string, options?: AxiosRequestConfig) {
        return EmailApiFp(this.configuration).getApiEmailId(documentId, cardLink, templateAlias, fileAttachmentsMode, fileIds, id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiEmailGetEmlFileFileAttachmentsModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetApiEmailGetEmlFileFileAttachmentsModeEnum = typeof GetApiEmailGetEmlFileFileAttachmentsModeEnum[keyof typeof GetApiEmailGetEmlFileFileAttachmentsModeEnum];
/**
 * @export
 */
export const GetApiEmailIdFileAttachmentsModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetApiEmailIdFileAttachmentsModeEnum = typeof GetApiEmailIdFileAttachmentsModeEnum[keyof typeof GetApiEmailIdFileAttachmentsModeEnum];


/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get staff employee by id
         * @param {string} employeeId Employee identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEmployeeGetEmployee: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('postApiEmployeeGetEmployee', 'employeeId', employeeId)
            const localVarPath = `/api/Employee/GetEmployee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get staff employee by id with extra status information
         * @param {string} employeeId Employee identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEmployeeGetEmployeeStatus: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('postApiEmployeeGetEmployeeStatus', 'employeeId', employeeId)
            const localVarPath = `/api/Employee/GetEmployeeStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employees by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} employees 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEmployeeGetEmployees: async (employees: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employees' is not null or undefined
            assertParamExists('postApiEmployeeGetEmployees', 'employees', employees)
            const localVarPath = `/api/Employee/GetEmployees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employees, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get staff employee by id
         * @param {string} employeeId Employee identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEmployeeGetEmployee(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEmployeeGetEmployee(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get staff employee by id with extra status information
         * @param {string} employeeId Employee identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEmployeeGetEmployeeStatus(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEmployeeGetEmployeeStatus(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employees by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} employees 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiEmployeeGetEmployees(employees: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiEmployeeGetEmployees(employees, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get staff employee by id
         * @param {string} employeeId Employee identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEmployeeGetEmployee(employeeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiEmployeeGetEmployee(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get staff employee by id with extra status information
         * @param {string} employeeId Employee identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEmployeeGetEmployeeStatus(employeeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsEmployeeStatusModelDocsVisionWebClient> {
            return localVarFp.postApiEmployeeGetEmployeeStatus(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employees by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} employees 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiEmployeeGetEmployees(employees: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiEmployeeGetEmployees(employees, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @summary Get staff employee by id
     * @param {string} employeeId Employee identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public postApiEmployeeGetEmployee(employeeId: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).postApiEmployeeGetEmployee(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get staff employee by id with extra status information
     * @param {string} employeeId Employee identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public postApiEmployeeGetEmployeeStatus(employeeId: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).postApiEmployeeGetEmployeeStatus(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employees by list of ids.
     * @param {DocsVisionWebClientModelsCollectionRequestModelOfSystemString} employees 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public postApiEmployeeGetEmployees(employees: DocsVisionWebClientModelsCollectionRequestModelOfSystemString, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).postApiEmployeeGetEmployees(employees, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExtendedMetadataV1Api - axios parameter creator
 * @export
 */
export const ExtendedMetadataV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1MetadataExtendedCardTypeIdSectionId: async (cardTypeId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('deleteApiV1MetadataExtendedCardTypeIdSectionId', 'cardTypeId', cardTypeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteApiV1MetadataExtendedCardTypeIdSectionId', 'sectionId', sectionId)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}/{sectionId}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1MetadataExtendedCardTypeIdSectionIdField: async (cardTypeId: string, sectionId: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('deleteApiV1MetadataExtendedCardTypeIdSectionIdField', 'cardTypeId', cardTypeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteApiV1MetadataExtendedCardTypeIdSectionIdField', 'sectionId', sectionId)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('deleteApiV1MetadataExtendedCardTypeIdSectionIdField', 'field', field)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}/{sectionId}/{field}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1MetadataExtendedCardTypeIdSectionId: async (cardTypeId: string, sectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('getApiV1MetadataExtendedCardTypeIdSectionId', 'cardTypeId', cardTypeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1MetadataExtendedCardTypeIdSectionId', 'sectionId', sectionId)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}/{sectionId}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1MetadataExtendedCardTypeIdSectionIdField: async (cardTypeId: string, sectionId: string, field: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('getApiV1MetadataExtendedCardTypeIdSectionIdField', 'cardTypeId', cardTypeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1MetadataExtendedCardTypeIdSectionIdField', 'sectionId', sectionId)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('getApiV1MetadataExtendedCardTypeIdSectionIdField', 'field', field)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}/{sectionId}/{field}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1MetadataExtendedCardTypeIdSectionId: async (cardTypeId: string, sectionId: string, editParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('patchApiV1MetadataExtendedCardTypeIdSectionId', 'cardTypeId', cardTypeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('patchApiV1MetadataExtendedCardTypeIdSectionId', 'sectionId', sectionId)
            // verify required parameter 'editParameters' is not null or undefined
            assertParamExists('patchApiV1MetadataExtendedCardTypeIdSectionId', 'editParameters', editParameters)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}/{sectionId}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1MetadataExtendedCardTypeIdSectionIdField: async (cardTypeId: string, sectionId: string, field: string, editParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('patchApiV1MetadataExtendedCardTypeIdSectionIdField', 'cardTypeId', cardTypeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('patchApiV1MetadataExtendedCardTypeIdSectionIdField', 'sectionId', sectionId)
            // verify required parameter 'field' is not null or undefined
            assertParamExists('patchApiV1MetadataExtendedCardTypeIdSectionIdField', 'field', field)
            // verify required parameter 'editParameters' is not null or undefined
            assertParamExists('patchApiV1MetadataExtendedCardTypeIdSectionIdField', 'editParameters', editParameters)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}/{sectionId}/{field}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1MetadataExtendedCardTypeId: async (cardTypeId: string, createParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('postApiV1MetadataExtendedCardTypeId', 'cardTypeId', cardTypeId)
            // verify required parameter 'createParameters' is not null or undefined
            assertParamExists('postApiV1MetadataExtendedCardTypeId', 'createParameters', createParameters)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1MetadataExtendedCardTypeIdSectionId: async (cardTypeId: string, sectionId: string, createParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTypeId' is not null or undefined
            assertParamExists('postApiV1MetadataExtendedCardTypeIdSectionId', 'cardTypeId', cardTypeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('postApiV1MetadataExtendedCardTypeIdSectionId', 'sectionId', sectionId)
            // verify required parameter 'createParameters' is not null or undefined
            assertParamExists('postApiV1MetadataExtendedCardTypeIdSectionId', 'createParameters', createParameters)
            const localVarPath = `/api/v1/metadata/extended/{cardTypeId}/{sectionId}`
                .replace(`{${"cardTypeId"}}`, encodeURIComponent(String(cardTypeId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExtendedMetadataV1Api - functional programming interface
 * @export
 */
export const ExtendedMetadataV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExtendedMetadataV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsSectionMetadataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, editParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, editParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, editParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, editParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1MetadataExtendedCardTypeId(cardTypeId: string, createParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1MetadataExtendedCardTypeId(cardTypeId, createParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, createParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, createParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExtendedMetadataV1Api - factory interface
 * @export
 */
export const ExtendedMetadataV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExtendedMetadataV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsSectionMetadataModel> {
            return localVarFp.getApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsFieldMetadataFieldMetadataModel> {
            return localVarFp.getApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, editParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters, options?: any): AxiosPromise<void> {
            return localVarFp.patchApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, editParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {string} field 
         * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters} editParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, editParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters, options?: any): AxiosPromise<void> {
            return localVarFp.patchApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, editParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1MetadataExtendedCardTypeId(cardTypeId: string, createParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters, options?: any): AxiosPromise<string> {
            return localVarFp.postApiV1MetadataExtendedCardTypeId(cardTypeId, createParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardTypeId 
         * @param {string} sectionId 
         * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters} createParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, createParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters, options?: any): AxiosPromise<string> {
            return localVarFp.postApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, createParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExtendedMetadataV1Api - object-oriented interface
 * @export
 * @class ExtendedMetadataV1Api
 * @extends {BaseAPI}
 */
export class ExtendedMetadataV1Api extends BaseAPI {
    /**
     * 
     * @param {string} cardTypeId 
     * @param {string} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public deleteApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).deleteApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {string} sectionId 
     * @param {string} field 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public deleteApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).deleteApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {string} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public getApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).getApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {string} sectionId 
     * @param {string} field 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public getApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).getApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {string} sectionId 
     * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters} editParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public patchApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, editParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataEditParameters, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).patchApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, editParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {string} sectionId 
     * @param {string} field 
     * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters} editParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public patchApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId: string, sectionId: string, field: string, editParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataEditParameters, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).patchApiV1MetadataExtendedCardTypeIdSectionIdField(cardTypeId, sectionId, field, editParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters} createParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public postApiV1MetadataExtendedCardTypeId(cardTypeId: string, createParameters: DocsVisionWebClientWebApiModificationModelsSectionMetadataSectionMetadataCreateParameters, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).postApiV1MetadataExtendedCardTypeId(cardTypeId, createParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardTypeId 
     * @param {string} sectionId 
     * @param {DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters} createParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedMetadataV1Api
     */
    public postApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId: string, sectionId: string, createParameters: DocsVisionWebClientWebApiModificationModelsFieldMetadataFieldMetadataCreateParameters, options?: AxiosRequestConfig) {
        return ExtendedMetadataV1ApiFp(this.configuration).postApiV1MetadataExtendedCardTypeIdSectionId(cardTypeId, sectionId, createParameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExtensionsApi - axios parameter creator
 * @export
 */
export const ExtensionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /Api/Extensions/Get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiExtensionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Extensions/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /Api/Extensions/Get
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiExtensionsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiExtensionsId', 'id', id)
            const localVarPath = `/api/Extensions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExtensionsApi - functional programming interface
 * @export
 */
export const ExtensionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExtensionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary /Api/Extensions/Get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiExtensionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiExtensionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /Api/Extensions/Get
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiExtensionsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiExtensionsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExtensionsApi - factory interface
 * @export
 */
export const ExtensionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExtensionsApiFp(configuration)
    return {
        /**
         * 
         * @summary /Api/Extensions/Get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiExtensionsGet(options?: any): AxiosPromise<object> {
            return localVarFp.getApiExtensionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /Api/Extensions/Get
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiExtensionsId(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiExtensionsId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExtensionsApi - object-oriented interface
 * @export
 * @class ExtensionsApi
 * @extends {BaseAPI}
 */
export class ExtensionsApi extends BaseAPI {
    /**
     * 
     * @summary /Api/Extensions/Get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtensionsApi
     */
    public getApiExtensionsGet(options?: AxiosRequestConfig) {
        return ExtensionsApiFp(this.configuration).getApiExtensionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /Api/Extensions/Get
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtensionsApi
     */
    public getApiExtensionsId(id: string, options?: AxiosRequestConfig) {
        return ExtensionsApiFp(this.configuration).getApiExtensionsId(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FavoritesApi - axios parameter creator
 * @export
 */
export const FavoritesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFavoritesCheckFavoriteCard: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiFavoritesCheckFavoriteCard', 'cardId', cardId)
            const localVarPath = `/api/Favorites/CheckFavoriteCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFavoritesId: async (cardId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiFavoritesId', 'cardId', cardId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiFavoritesId', 'id', id)
            const localVarPath = `/api/Favorites/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFavoritesAddFavoriteCard: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiFavoritesAddFavoriteCard', 'cardId', cardId)
            const localVarPath = `/api/Favorites/AddFavoriteCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFavoritesRemoveFavoriteCard: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiFavoritesRemoveFavoriteCard', 'cardId', cardId)
            const localVarPath = `/api/Favorites/RemoveFavoriteCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FavoritesApi - functional programming interface
 * @export
 */
export const FavoritesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FavoritesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiFavoritesCheckFavoriteCard(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiFavoritesCheckFavoriteCard(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiFavoritesId(cardId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiFavoritesId(cardId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFavoritesAddFavoriteCard(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiFavoritesAddFavoriteCard(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFavoritesRemoveFavoriteCard(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiFavoritesRemoveFavoriteCard(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FavoritesApi - factory interface
 * @export
 */
export const FavoritesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FavoritesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFavoritesCheckFavoriteCard(cardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiFavoritesCheckFavoriteCard(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFavoritesId(cardId: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiFavoritesId(cardId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFavoritesAddFavoriteCard(cardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiFavoritesAddFavoriteCard(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFavoritesRemoveFavoriteCard(cardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiFavoritesRemoveFavoriteCard(cardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FavoritesApi - object-oriented interface
 * @export
 * @class FavoritesApi
 * @extends {BaseAPI}
 */
export class FavoritesApi extends BaseAPI {
    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public getApiFavoritesCheckFavoriteCard(cardId: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).getApiFavoritesCheckFavoriteCard(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public getApiFavoritesId(cardId: string, id: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).getApiFavoritesId(cardId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public postApiFavoritesAddFavoriteCard(cardId: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).postApiFavoritesAddFavoriteCard(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    public postApiFavoritesRemoveFavoriteCard(cardId: string, options?: AxiosRequestConfig) {
        return FavoritesApiFp(this.configuration).postApiFavoritesRemoveFavoriteCard(cardId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilePickerApi - axios parameter creator
 * @export
 */
export const FilePickerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST: /FilePicker/AddFileVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerAddFileVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FilePicker/AddFileVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /FilePicker/AddFiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerCreateFile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FilePicker/CreateFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /FilePicker/GetFile
         * @param {DocsVisionWebClientModelsFilePickerGetFileRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerGetFile: async (request: DocsVisionWebClientModelsFilePickerGetFileRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiFilePickerGetFile', 'request', request)
            const localVarPath = `/api/FilePicker/GetFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /FilePicker/GetFile
         * @param {DocsVisionWebClientModelsFilePickerRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerPrepareFileDownload: async (request: DocsVisionWebClientModelsFilePickerRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiFilePickerPrepareFileDownload', 'request', request)
            const localVarPath = `/api/FilePicker/PrepareFileDownload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /FilePicker/ReplaceFile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerReplaceFile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FilePicker/ReplaceFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilePickerApi - functional programming interface
 * @export
 */
export const FilePickerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilePickerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST: /FilePicker/AddFileVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFilePickerAddFileVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiFilePickerAddFileVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /FilePicker/AddFiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFilePickerCreateFile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiFilePickerCreateFile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /FilePicker/GetFile
         * @param {DocsVisionWebClientModelsFilePickerGetFileRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFilePickerGetFile(request: DocsVisionWebClientModelsFilePickerGetFileRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiFilePickerGetFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /FilePicker/GetFile
         * @param {DocsVisionWebClientModelsFilePickerRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFilePickerPrepareFileDownload(request: DocsVisionWebClientModelsFilePickerRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiFilePickerPrepareFileDownload(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /FilePicker/ReplaceFile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFilePickerReplaceFile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiFilePickerReplaceFile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilePickerApi - factory interface
 * @export
 */
export const FilePickerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilePickerApiFp(configuration)
    return {
        /**
         * 
         * @summary POST: /FilePicker/AddFileVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerAddFileVersion(options?: any): AxiosPromise<object> {
            return localVarFp.postApiFilePickerAddFileVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /FilePicker/AddFiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerCreateFile(options?: any): AxiosPromise<object> {
            return localVarFp.postApiFilePickerCreateFile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /FilePicker/GetFile
         * @param {DocsVisionWebClientModelsFilePickerGetFileRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerGetFile(request: DocsVisionWebClientModelsFilePickerGetFileRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFileFileCardModelDocsVisionPlatformWebClient> {
            return localVarFp.postApiFilePickerGetFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /FilePicker/GetFile
         * @param {DocsVisionWebClientModelsFilePickerRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerPrepareFileDownload(request: DocsVisionWebClientModelsFilePickerRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiFilePickerPrepareFileDownload(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /FilePicker/ReplaceFile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFilePickerReplaceFile(options?: any): AxiosPromise<object> {
            return localVarFp.postApiFilePickerReplaceFile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilePickerApi - object-oriented interface
 * @export
 * @class FilePickerApi
 * @extends {BaseAPI}
 */
export class FilePickerApi extends BaseAPI {
    /**
     * 
     * @summary POST: /FilePicker/AddFileVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilePickerApi
     */
    public postApiFilePickerAddFileVersion(options?: AxiosRequestConfig) {
        return FilePickerApiFp(this.configuration).postApiFilePickerAddFileVersion(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /FilePicker/AddFiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilePickerApi
     */
    public postApiFilePickerCreateFile(options?: AxiosRequestConfig) {
        return FilePickerApiFp(this.configuration).postApiFilePickerCreateFile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /FilePicker/GetFile
     * @param {DocsVisionWebClientModelsFilePickerGetFileRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilePickerApi
     */
    public postApiFilePickerGetFile(request: DocsVisionWebClientModelsFilePickerGetFileRequestModel, options?: AxiosRequestConfig) {
        return FilePickerApiFp(this.configuration).postApiFilePickerGetFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /FilePicker/GetFile
     * @param {DocsVisionWebClientModelsFilePickerRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilePickerApi
     */
    public postApiFilePickerPrepareFileDownload(request: DocsVisionWebClientModelsFilePickerRequestModel, options?: AxiosRequestConfig) {
        return FilePickerApiFp(this.configuration).postApiFilePickerPrepareFileDownload(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /FilePicker/ReplaceFile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilePickerApi
     */
    public postApiFilePickerReplaceFile(options?: AxiosRequestConfig) {
        return FilePickerApiFp(this.configuration).postApiFilePickerReplaceFile(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FilesV1Api - axios parameter creator
 * @export
 */
export const FilesV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1FilesFileId: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteApiV1FilesFileId', 'fileId', fileId)
            const localVarPath = `/api/v1/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1FilesFileId: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getApiV1FilesFileId', 'fileId', fileId)
            const localVarPath = `/api/v1/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1FilesFileIdData: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getApiV1FilesFileIdData', 'fileId', fileId)
            const localVarPath = `/api/v1/files/{fileId}/data`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsFileCreateParameters} attributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Files: async (attributes: DocsVisionWebClientWebApiModificationModelsFileCreateParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attributes' is not null or undefined
            assertParamExists('postApiV1Files', 'attributes', attributes)
            const localVarPath = `/api/v1/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1FilesFileIdData: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('postApiV1FilesFileIdData', 'fileId', fileId)
            const localVarPath = `/api/v1/files/{fileId}/data`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesV1Api - functional programming interface
 * @export
 */
export const FilesV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1FilesFileId(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1FilesFileId(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1FilesFileId(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsFileDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1FilesFileId(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1FilesFileIdData(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1FilesFileIdData(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsFileCreateParameters} attributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1Files(attributes: DocsVisionWebClientWebApiModificationModelsFileCreateParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1Files(attributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1FilesFileIdData(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1FilesFileIdData(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesV1Api - factory interface
 * @export
 */
export const FilesV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1FilesFileId(fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1FilesFileId(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1FilesFileId(fileId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsFileDataModel> {
            return localVarFp.getApiV1FilesFileId(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1FilesFileIdData(fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getApiV1FilesFileIdData(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsFileCreateParameters} attributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Files(attributes: DocsVisionWebClientWebApiModificationModelsFileCreateParameters, options?: any): AxiosPromise<string> {
            return localVarFp.postApiV1Files(attributes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1FilesFileIdData(fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1FilesFileIdData(fileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesV1Api - object-oriented interface
 * @export
 * @class FilesV1Api
 * @extends {BaseAPI}
 */
export class FilesV1Api extends BaseAPI {
    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesV1Api
     */
    public deleteApiV1FilesFileId(fileId: string, options?: AxiosRequestConfig) {
        return FilesV1ApiFp(this.configuration).deleteApiV1FilesFileId(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesV1Api
     */
    public getApiV1FilesFileId(fileId: string, options?: AxiosRequestConfig) {
        return FilesV1ApiFp(this.configuration).getApiV1FilesFileId(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesV1Api
     */
    public getApiV1FilesFileIdData(fileId: string, options?: AxiosRequestConfig) {
        return FilesV1ApiFp(this.configuration).getApiV1FilesFileIdData(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientWebApiModificationModelsFileCreateParameters} attributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesV1Api
     */
    public postApiV1Files(attributes: DocsVisionWebClientWebApiModificationModelsFileCreateParameters, options?: AxiosRequestConfig) {
        return FilesV1ApiFp(this.configuration).postApiV1Files(attributes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesV1Api
     */
    public postApiV1FilesFileIdData(fileId: string, options?: AxiosRequestConfig) {
        return FilesV1ApiFp(this.configuration).postApiV1FilesFileIdData(fileId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FolderTypesApi - axios parameter creator
 * @export
 */
export const FolderTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary HTTP: /FolderTypes/GetFolderTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFolderTypesGetFolderTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FolderTypes/GetFolderTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /FolderTypes/GetFolderTypes
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFolderTypesId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiFolderTypesId', 'id', id)
            const localVarPath = `/api/FolderTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FolderTypesApi - functional programming interface
 * @export
 */
export const FolderTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FolderTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary HTTP: /FolderTypes/GetFolderTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiFolderTypesGetFolderTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiFolderTypesGetFolderTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /FolderTypes/GetFolderTypes
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiFolderTypesId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiFolderTypesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FolderTypesApi - factory interface
 * @export
 */
export const FolderTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FolderTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary HTTP: /FolderTypes/GetFolderTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFolderTypesGetFolderTypes(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient> {
            return localVarFp.getApiFolderTypesGetFolderTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /FolderTypes/GetFolderTypes
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFolderTypesId(id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFolderTypeInfoDocsVisionPlatformWebClient> {
            return localVarFp.getApiFolderTypesId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FolderTypesApi - object-oriented interface
 * @export
 * @class FolderTypesApi
 * @extends {BaseAPI}
 */
export class FolderTypesApi extends BaseAPI {
    /**
     * 
     * @summary HTTP: /FolderTypes/GetFolderTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderTypesApi
     */
    public getApiFolderTypesGetFolderTypes(options?: AxiosRequestConfig) {
        return FolderTypesApiFp(this.configuration).getApiFolderTypesGetFolderTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /FolderTypes/GetFolderTypes
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FolderTypesApi
     */
    public getApiFolderTypesId(id: string, options?: AxiosRequestConfig) {
        return FolderTypesApiFp(this.configuration).getApiFolderTypesId(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FoldersV1Api - axios parameter creator
 * @export
 */
export const FoldersV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1FoldersFolderId: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteApiV1FoldersFolderId', 'folderId', folderId)
            const localVarPath = `/api/v1/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1FoldersFolderIdPermanently: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteApiV1FoldersFolderIdPermanently', 'folderId', folderId)
            const localVarPath = `/api/v1/folders/{folderId}/permanently`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Folders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1FoldersFolderId: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiV1FoldersFolderId', 'folderId', folderId)
            const localVarPath = `/api/v1/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsFolderCreateParameters} parameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Folders: async (parameters: DocsVisionWebClientWebApiModificationModelsFolderCreateParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parameters' is not null or undefined
            assertParamExists('postApiV1Folders', 'parameters', parameters)
            const localVarPath = `/api/v1/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {DocsVisionWebClientWebApiModificationModelsFolderEditParameters} modifyParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1FoldersFolderId: async (folderId: string, modifyParameters: DocsVisionWebClientWebApiModificationModelsFolderEditParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('putApiV1FoldersFolderId', 'folderId', folderId)
            // verify required parameter 'modifyParameters' is not null or undefined
            assertParamExists('putApiV1FoldersFolderId', 'modifyParameters', modifyParameters)
            const localVarPath = `/api/v1/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersV1Api - functional programming interface
 * @export
 */
export const FoldersV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1FoldersFolderId(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1FoldersFolderId(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1FoldersFolderIdPermanently(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1FoldersFolderIdPermanently(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1Folders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsFolderModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1Folders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1FoldersFolderId(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsFolderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1FoldersFolderId(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsFolderCreateParameters} parameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1Folders(parameters: DocsVisionWebClientWebApiModificationModelsFolderCreateParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1Folders(parameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {DocsVisionWebClientWebApiModificationModelsFolderEditParameters} modifyParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1FoldersFolderId(folderId: string, modifyParameters: DocsVisionWebClientWebApiModificationModelsFolderEditParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1FoldersFolderId(folderId, modifyParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersV1Api - factory interface
 * @export
 */
export const FoldersV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1FoldersFolderId(folderId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1FoldersFolderId(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1FoldersFolderIdPermanently(folderId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1FoldersFolderIdPermanently(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Folders(options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsFolderModel>> {
            return localVarFp.getApiV1Folders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1FoldersFolderId(folderId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsFolderModel> {
            return localVarFp.getApiV1FoldersFolderId(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModificationModelsFolderCreateParameters} parameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Folders(parameters: DocsVisionWebClientWebApiModificationModelsFolderCreateParameters, options?: any): AxiosPromise<string> {
            return localVarFp.postApiV1Folders(parameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {DocsVisionWebClientWebApiModificationModelsFolderEditParameters} modifyParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1FoldersFolderId(folderId: string, modifyParameters: DocsVisionWebClientWebApiModificationModelsFolderEditParameters, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1FoldersFolderId(folderId, modifyParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FoldersV1Api - object-oriented interface
 * @export
 * @class FoldersV1Api
 * @extends {BaseAPI}
 */
export class FoldersV1Api extends BaseAPI {
    /**
     * 
     * @param {string} folderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersV1Api
     */
    public deleteApiV1FoldersFolderId(folderId: string, options?: AxiosRequestConfig) {
        return FoldersV1ApiFp(this.configuration).deleteApiV1FoldersFolderId(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersV1Api
     */
    public deleteApiV1FoldersFolderIdPermanently(folderId: string, options?: AxiosRequestConfig) {
        return FoldersV1ApiFp(this.configuration).deleteApiV1FoldersFolderIdPermanently(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersV1Api
     */
    public getApiV1Folders(options?: AxiosRequestConfig) {
        return FoldersV1ApiFp(this.configuration).getApiV1Folders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersV1Api
     */
    public getApiV1FoldersFolderId(folderId: string, options?: AxiosRequestConfig) {
        return FoldersV1ApiFp(this.configuration).getApiV1FoldersFolderId(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientWebApiModificationModelsFolderCreateParameters} parameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersV1Api
     */
    public postApiV1Folders(parameters: DocsVisionWebClientWebApiModificationModelsFolderCreateParameters, options?: AxiosRequestConfig) {
        return FoldersV1ApiFp(this.configuration).postApiV1Folders(parameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {DocsVisionWebClientWebApiModificationModelsFolderEditParameters} modifyParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersV1Api
     */
    public putApiV1FoldersFolderId(folderId: string, modifyParameters: DocsVisionWebClientWebApiModificationModelsFolderEditParameters, options?: AxiosRequestConfig) {
        return FoldersV1ApiFp(this.configuration).putApiV1FoldersFolderId(folderId, modifyParameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GridApi - axios parameter creator
 * @export
 */
export const GridApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Ordered Columns
         * @param {string} viewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGridGetColumns: async (viewId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'viewId' is not null or undefined
            assertParamExists('getApiGridGetColumns', 'viewId', viewId)
            const localVarPath = `/api/Grid/GetColumns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (viewId !== undefined) {
                localVarQueryParameter['viewId'] = viewId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Grid User Settings Data
         * @param {string} folderId 
         * @param {string} viewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGridGetGridUserSettingsData: async (folderId: string, viewId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiGridGetGridUserSettingsData', 'folderId', folderId)
            // verify required parameter 'viewId' is not null or undefined
            assertParamExists('getApiGridGetGridUserSettingsData', 'viewId', viewId)
            const localVarPath = `/api/Grid/GetGridUserSettingsData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }

            if (viewId !== undefined) {
                localVarQueryParameter['viewId'] = viewId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Grid User Settings Data
         * @param {string} folderId 
         * @param {string} viewId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGridId: async (folderId: string, viewId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiGridId', 'folderId', folderId)
            // verify required parameter 'viewId' is not null or undefined
            assertParamExists('getApiGridId', 'viewId', viewId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiGridId', 'id', id)
            const localVarPath = `/api/Grid/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }

            if (viewId !== undefined) {
                localVarQueryParameter['viewId'] = viewId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * TODO: make http get
         * @summary Get card list
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetCardList: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridGetCardList', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/GetCardList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDistinctValuesDiagramRequestModel} diagramRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetDiagramDistinctValuesModel: async (diagramRequestModel: DocsVisionWebClientModelsDistinctValuesDiagramRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'diagramRequestModel' is not null or undefined
            assertParamExists('postApiGridGetDiagramDistinctValuesModel', 'diagramRequestModel', diagramRequestModel)
            const localVarPath = `/api/Grid/GetDiagramDistinctValuesModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(diagramRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get grid filter layout model
         * @param {DocsVisionWebClientModelsGridFilterRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetFilter: async (requestModel: DocsVisionWebClientModelsGridFilterRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridGetFilter', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/GetFilter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in filtration
         * @param {DocsVisionWebClientModelsFilterDistinctValuesRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetFilterDistinctValues: async (request: DocsVisionWebClientModelsFilterDistinctValuesRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiGridGetFilterDistinctValues', 'request', request)
            const localVarPath = `/api/Grid/GetFilterDistinctValues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get grid aggregates model
         * @param {DocsVisionWebClientModelsGridAggregateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetGridAggregatesModel: async (request: DocsVisionWebClientModelsGridAggregateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiGridGetGridAggregatesModel', 'request', request)
            const localVarPath = `/api/Grid/GetGridAggregatesModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get grid data
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetGridData: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridGetGridData', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/GetGridData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get grid data
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiGridGetGridDataEx: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridGetGridDataEx', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/GetGridDataEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get grid data silently
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetGridDataSilent: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridGetGridDataSilent', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/GetGridDataSilent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in grouping
         * @param {DocsVisionWebClientModelsDistinctValuesRequestModel} distinctValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetViewDistinctValues: async (distinctValuesRequest: DocsVisionWebClientModelsDistinctValuesRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distinctValuesRequest' is not null or undefined
            assertParamExists('postApiGridGetViewDistinctValues', 'distinctValuesRequest', distinctValuesRequest)
            const localVarPath = `/api/Grid/GetViewDistinctValues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(distinctValuesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get View List
         * @param {DocsVisionPlatformWebClientModelsFolderIdentityModel} folderInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetViewList: async (folderInfo: DocsVisionPlatformWebClientModelsFolderIdentityModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderInfo' is not null or undefined
            assertParamExists('postApiGridGetViewList', 'folderInfo', folderInfo)
            const localVarPath = `/api/Grid/GetViewList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(folderInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary load all pages
         * @param {string} baseCursorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridLoadAllPages: async (baseCursorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseCursorId' is not null or undefined
            assertParamExists('postApiGridLoadAllPages', 'baseCursorId', baseCursorId)
            const localVarPath = `/api/Grid/LoadAllPages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseCursorId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Force unread counter recalculation.
         * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridRefreshUnreadCounter: async (requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridRefreshUnreadCounter', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/RefreshUnreadCounter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Force unread counter recalculation.
         * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiGridRefreshUnreadCounterEx: async (requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridRefreshUnreadCounterEx', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/RefreshUnreadCounterEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves grid user settings data
         * @param {DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridSaveGridUserSettingsData: async (requestModel: DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridSaveGridUserSettingsData', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/SaveGridUserSettingsData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves grid user settings data
         * @param {DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridSaveGridUserSettingsFolderData: async (requestModel: DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiGridSaveGridUserSettingsFolderData', 'requestModel', requestModel)
            const localVarPath = `/api/Grid/SaveGridUserSettingsFolderData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Seat all cards read status
         * @param {DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel} saveAllCardsReadStatusModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridSetAllCardsReadStatus: async (saveAllCardsReadStatusModel: DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saveAllCardsReadStatusModel' is not null or undefined
            assertParamExists('postApiGridSetAllCardsReadStatus', 'saveAllCardsReadStatusModel', saveAllCardsReadStatusModel)
            const localVarPath = `/api/Grid/SetAllCardsReadStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAllCardsReadStatusModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GridApi - functional programming interface
 * @export
 */
export const GridApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GridApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Ordered Columns
         * @param {string} viewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiGridGetColumns(viewId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionPlatformWebClientModelsFolderViewViewColumnModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiGridGetColumns(viewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Grid User Settings Data
         * @param {string} folderId 
         * @param {string} viewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiGridGetGridUserSettingsData(folderId: string, viewId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiGridGetGridUserSettingsData(folderId, viewId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Grid User Settings Data
         * @param {string} folderId 
         * @param {string} viewId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiGridId(folderId: string, viewId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiGridId(folderId, viewId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * TODO: make http get
         * @summary Get card list
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetCardList(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsCardListViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetCardList(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDistinctValuesDiagramRequestModel} diagramRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetDiagramDistinctValuesModel(diagramRequestModel: DocsVisionWebClientModelsDistinctValuesDiagramRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewDistinctDiagramValuesModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetDiagramDistinctValuesModel(diagramRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get grid filter layout model
         * @param {DocsVisionWebClientModelsGridFilterRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetFilter(requestModel: DocsVisionWebClientModelsGridFilterRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetFilter(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in filtration
         * @param {DocsVisionWebClientModelsFilterDistinctValuesRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetFilterDistinctValues(request: DocsVisionWebClientModelsFilterDistinctValuesRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetFilterDistinctValues(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get grid aggregates model
         * @param {DocsVisionWebClientModelsGridAggregateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetGridAggregatesModel(request: DocsVisionWebClientModelsGridAggregateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientModelsGridAggregateModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetGridAggregatesModel(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get grid data
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetGridData(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsGridGridViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetGridData(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get grid data
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiGridGetGridDataEx(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsGridGridViewModelEx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetGridDataEx(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get grid data silently
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetGridDataSilent(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsGridGridViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetGridDataSilent(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in grouping
         * @param {DocsVisionWebClientModelsDistinctValuesRequestModel} distinctValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetViewDistinctValues(distinctValuesRequest: DocsVisionWebClientModelsDistinctValuesRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetViewDistinctValues(distinctValuesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get View List
         * @param {DocsVisionPlatformWebClientModelsFolderIdentityModel} folderInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridGetViewList(folderInfo: DocsVisionPlatformWebClientModelsFolderIdentityModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsFolderViewInfosModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridGetViewList(folderInfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary load all pages
         * @param {string} baseCursorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridLoadAllPages(baseCursorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridLoadAllPages(baseCursorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Force unread counter recalculation.
         * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridRefreshUnreadCounter(requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridRefreshUnreadCounter(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Force unread counter recalculation.
         * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async postApiGridRefreshUnreadCounterEx(requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridRefreshUnreadCounterEx(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves grid user settings data
         * @param {DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridSaveGridUserSettingsData(requestModel: DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridSaveGridUserSettingsData(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves grid user settings data
         * @param {DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridSaveGridUserSettingsFolderData(requestModel: DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridSaveGridUserSettingsFolderData(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Seat all cards read status
         * @param {DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel} saveAllCardsReadStatusModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiGridSetAllCardsReadStatus(saveAllCardsReadStatusModel: DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiGridSetAllCardsReadStatus(saveAllCardsReadStatusModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GridApi - factory interface
 * @export
 */
export const GridApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GridApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Ordered Columns
         * @param {string} viewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGridGetColumns(viewId: string, options?: any): AxiosPromise<Array<DocsVisionPlatformWebClientModelsFolderViewViewColumnModel>> {
            return localVarFp.getApiGridGetColumns(viewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Grid User Settings Data
         * @param {string} folderId 
         * @param {string} viewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGridGetGridUserSettingsData(folderId: string, viewId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData> {
            return localVarFp.getApiGridGetGridUserSettingsData(folderId, viewId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Grid User Settings Data
         * @param {string} folderId 
         * @param {string} viewId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiGridId(folderId: string, viewId: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewGridUserSettingsData> {
            return localVarFp.getApiGridId(folderId, viewId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * TODO: make http get
         * @summary Get card list
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetCardList(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsCardListViewModel> {
            return localVarFp.postApiGridGetCardList(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsDistinctValuesDiagramRequestModel} diagramRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetDiagramDistinctValuesModel(diagramRequestModel: DocsVisionWebClientModelsDistinctValuesDiagramRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewDistinctDiagramValuesModel> {
            return localVarFp.postApiGridGetDiagramDistinctValuesModel(diagramRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get grid filter layout model
         * @param {DocsVisionWebClientModelsGridFilterRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetFilter(requestModel: DocsVisionWebClientModelsGridFilterRequestModel, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel> {
            return localVarFp.postApiGridGetFilter(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in filtration
         * @param {DocsVisionWebClientModelsFilterDistinctValuesRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetFilterDistinctValues(request: DocsVisionWebClientModelsFilterDistinctValuesRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel> {
            return localVarFp.postApiGridGetFilterDistinctValues(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get grid aggregates model
         * @param {DocsVisionWebClientModelsGridAggregateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetGridAggregatesModel(request: DocsVisionWebClientModelsGridAggregateRequest, options?: any): AxiosPromise<Array<DocsVisionWebClientModelsGridAggregateModel>> {
            return localVarFp.postApiGridGetGridAggregatesModel(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get grid data
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetGridData(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsGridGridViewModel> {
            return localVarFp.postApiGridGetGridData(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get grid data
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiGridGetGridDataEx(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsGridGridViewModelEx> {
            return localVarFp.postApiGridGetGridDataEx(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get grid data silently
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetGridDataSilent(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsGridGridViewModel> {
            return localVarFp.postApiGridGetGridDataSilent(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in grouping
         * @param {DocsVisionWebClientModelsDistinctValuesRequestModel} distinctValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetViewDistinctValues(distinctValuesRequest: DocsVisionWebClientModelsDistinctValuesRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFolderViewDistinctValuesModel> {
            return localVarFp.postApiGridGetViewDistinctValues(distinctValuesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get View List
         * @param {DocsVisionPlatformWebClientModelsFolderIdentityModel} folderInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridGetViewList(folderInfo: DocsVisionPlatformWebClientModelsFolderIdentityModel, options?: any): AxiosPromise<DocsVisionWebClientModelsFolderViewInfosModel> {
            return localVarFp.postApiGridGetViewList(folderInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary load all pages
         * @param {string} baseCursorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridLoadAllPages(baseCursorId: string, options?: any): AxiosPromise<number> {
            return localVarFp.postApiGridLoadAllPages(baseCursorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Force unread counter recalculation.
         * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridRefreshUnreadCounter(requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postApiGridRefreshUnreadCounter(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Force unread counter recalculation.
         * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        postApiGridRefreshUnreadCounterEx(requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postApiGridRefreshUnreadCounterEx(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves grid user settings data
         * @param {DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridSaveGridUserSettingsData(requestModel: DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiGridSaveGridUserSettingsData(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves grid user settings data
         * @param {DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridSaveGridUserSettingsFolderData(requestModel: DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiGridSaveGridUserSettingsFolderData(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Seat all cards read status
         * @param {DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel} saveAllCardsReadStatusModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiGridSetAllCardsReadStatus(saveAllCardsReadStatusModel: DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiGridSetAllCardsReadStatus(saveAllCardsReadStatusModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GridApi - object-oriented interface
 * @export
 * @class GridApi
 * @extends {BaseAPI}
 */
export class GridApi extends BaseAPI {
    /**
     * 
     * @summary Get Ordered Columns
     * @param {string} viewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public getApiGridGetColumns(viewId: string, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).getApiGridGetColumns(viewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Grid User Settings Data
     * @param {string} folderId 
     * @param {string} viewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public getApiGridGetGridUserSettingsData(folderId: string, viewId: string, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).getApiGridGetGridUserSettingsData(folderId, viewId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Grid User Settings Data
     * @param {string} folderId 
     * @param {string} viewId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public getApiGridId(folderId: string, viewId: string, id: string, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).getApiGridId(folderId, viewId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * TODO: make http get
     * @summary Get card list
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetCardList(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetCardList(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientModelsDistinctValuesDiagramRequestModel} diagramRequestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetDiagramDistinctValuesModel(diagramRequestModel: DocsVisionWebClientModelsDistinctValuesDiagramRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetDiagramDistinctValuesModel(diagramRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get grid filter layout model
     * @param {DocsVisionWebClientModelsGridFilterRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetFilter(requestModel: DocsVisionWebClientModelsGridFilterRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetFilter(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in filtration
     * @param {DocsVisionWebClientModelsFilterDistinctValuesRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetFilterDistinctValues(request: DocsVisionWebClientModelsFilterDistinctValuesRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetFilterDistinctValues(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get grid aggregates model
     * @param {DocsVisionWebClientModelsGridAggregateRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetGridAggregatesModel(request: DocsVisionWebClientModelsGridAggregateRequest, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetGridAggregatesModel(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get grid data
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetGridData(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetGridData(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get grid data
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetGridDataEx(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetGridDataEx(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get grid data silently
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetGridDataSilent(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetGridDataSilent(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of {DocsVision.Platform.WebClient.Models.FolderView.ViewDistinctValue} for usage in grouping
     * @param {DocsVisionWebClientModelsDistinctValuesRequestModel} distinctValuesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetViewDistinctValues(distinctValuesRequest: DocsVisionWebClientModelsDistinctValuesRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetViewDistinctValues(distinctValuesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get View List
     * @param {DocsVisionPlatformWebClientModelsFolderIdentityModel} folderInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridGetViewList(folderInfo: DocsVisionPlatformWebClientModelsFolderIdentityModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridGetViewList(folderInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary load all pages
     * @param {string} baseCursorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridLoadAllPages(baseCursorId: string, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridLoadAllPages(baseCursorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Force unread counter recalculation.
     * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridRefreshUnreadCounter(requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridRefreshUnreadCounter(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Force unread counter recalculation.
     * @param {DocsVisionWebClientModelsRefreshUnreadCounterRequest} requestModel 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridRefreshUnreadCounterEx(requestModel: DocsVisionWebClientModelsRefreshUnreadCounterRequest, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridRefreshUnreadCounterEx(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves grid user settings data
     * @param {DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridSaveGridUserSettingsData(requestModel: DocsVisionWebClientModelsSaveGridUserSettingsDataRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridSaveGridUserSettingsData(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves grid user settings data
     * @param {DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridSaveGridUserSettingsFolderData(requestModel: DocsVisionWebClientModelsSaveGridUserSettingsFolderDataRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridSaveGridUserSettingsFolderData(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Seat all cards read status
     * @param {DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel} saveAllCardsReadStatusModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GridApi
     */
    public postApiGridSetAllCardsReadStatus(saveAllCardsReadStatusModel: DocsVisionWebClientModelsSaveAllCardsReadStatusRequestModel, options?: AxiosRequestConfig) {
        return GridApiFp(this.configuration).postApiGridSetAllCardsReadStatus(saveAllCardsReadStatusModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutApi - axios parameter creator
 * @export
 */
export const LayoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get layout
         * @param {string} locationName Position name
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutGet: async (locationName: string, cardId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationName' is not null or undefined
            assertParamExists('getApiLayoutGet', 'locationName', locationName)
            const localVarPath = `/api/Layout/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locationName !== undefined) {
                localVarQueryParameter['locationName'] = locationName;
            }

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {string} locationName Position name
         * @param {string} controlName Control name
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutGetPart: async (locationName: string, controlName: string, cardId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationName' is not null or undefined
            assertParamExists('getApiLayoutGetPart', 'locationName', locationName)
            // verify required parameter 'controlName' is not null or undefined
            assertParamExists('getApiLayoutGetPart', 'controlName', controlName)
            const localVarPath = `/api/Layout/GetPart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locationName !== undefined) {
                localVarQueryParameter['locationName'] = locationName;
            }

            if (controlName !== undefined) {
                localVarQueryParameter['controlName'] = controlName;
            }

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets root layout
         * @param {string} location 
         * @param {string} [cacheVary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutGetRootLayout: async (location: string, cacheVary?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'location' is not null or undefined
            assertParamExists('getApiLayoutGetRootLayout', 'location', location)
            const localVarPath = `/api/Layout/GetRootLayout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (cacheVary !== undefined) {
                localVarQueryParameter['cacheVary'] = cacheVary;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get layout
         * @param {string} locationName Position name
         * @param {string} id 
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutId: async (locationName: string, id: string, cardId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationName' is not null or undefined
            assertParamExists('getApiLayoutId', 'locationName', locationName)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutId', 'id', id)
            const localVarPath = `/api/Layout/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locationName !== undefined) {
                localVarQueryParameter['locationName'] = locationName;
            }

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutGetPartWithParams: async (request: DocsVisionControllersLayoutControllerModelsGetPartRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutGetPartWithParams', 'request', request)
            const localVarPath = `/api/Layout/GetPartWithParams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutGetPartWithParamsEx: async (request: DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutGetPartWithParamsEx', 'request', request)
            const localVarPath = `/api/Layout/GetPartWithParamsEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get layout
         * @param {DocsVisionControllersLayoutControllerModelsGetRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutGetWithParams: async (request: DocsVisionControllersLayoutControllerModelsGetRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutGetWithParams', 'request', request)
            const localVarPath = `/api/Layout/GetWithParams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Layout/Save
         * @param {DocsVisionControllersLayoutControllerModelsSaveRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutSave: async (model: DocsVisionControllersLayoutControllerModelsSaveRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutSave', 'model', model)
            const localVarPath = `/api/Layout/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutApi - functional programming interface
 * @export
 */
export const LayoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get layout
         * @param {string} locationName Position name
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutGet(locationName: string, cardId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutGet(locationName, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {string} locationName Position name
         * @param {string} controlName Control name
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutGetPart(locationName: string, controlName: string, cardId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutGetPart(locationName, controlName, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets root layout
         * @param {string} location 
         * @param {string} [cacheVary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutGetRootLayout(location: string, cacheVary?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutGetRootLayout(location, cacheVary, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get layout
         * @param {string} locationName Position name
         * @param {string} id 
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutId(locationName: string, id: string, cardId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutId(locationName, id, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutGetPartWithParams(request: DocsVisionControllersLayoutControllerModelsGetPartRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutGetPartWithParams(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutGetPartWithParamsEx(request: DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutGetPartWithParamsEx(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get layout
         * @param {DocsVisionControllersLayoutControllerModelsGetRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutGetWithParams(request: DocsVisionControllersLayoutControllerModelsGetRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutGetWithParams(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Layout/Save
         * @param {DocsVisionControllersLayoutControllerModelsSaveRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutSave(model: DocsVisionControllersLayoutControllerModelsSaveRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutSave(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutApi - factory interface
 * @export
 */
export const LayoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutApiFp(configuration)
    return {
        /**
         * 
         * @summary Get layout
         * @param {string} locationName Position name
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutGet(locationName: string, cardId?: string, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel> {
            return localVarFp.getApiLayoutGet(locationName, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {string} locationName Position name
         * @param {string} controlName Control name
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutGetPart(locationName: string, controlName: string, cardId?: string, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel> {
            return localVarFp.getApiLayoutGetPart(locationName, controlName, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets root layout
         * @param {string} location 
         * @param {string} [cacheVary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutGetRootLayout(location: string, cacheVary?: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutGetRootLayout(location, cacheVary, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get layout
         * @param {string} locationName Position name
         * @param {string} id 
         * @param {string} [cardId] Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutId(locationName: string, id: string, cardId?: string, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel> {
            return localVarFp.getApiLayoutId(locationName, id, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutGetPartWithParams(request: DocsVisionControllersLayoutControllerModelsGetPartRequestModel, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel> {
            return localVarFp.postApiLayoutGetPartWithParams(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get specified control info from whole layout
         * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutGetPartWithParamsEx(request: DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel> {
            return localVarFp.postApiLayoutGetPartWithParamsEx(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get layout
         * @param {DocsVisionControllersLayoutControllerModelsGetRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutGetWithParams(request: DocsVisionControllersLayoutControllerModelsGetRequestModel, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutViewModel> {
            return localVarFp.postApiLayoutGetWithParams(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Layout/Save
         * @param {DocsVisionControllersLayoutControllerModelsSaveRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutSave(model: DocsVisionControllersLayoutControllerModelsSaveRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutSave(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutApi - object-oriented interface
 * @export
 * @class LayoutApi
 * @extends {BaseAPI}
 */
export class LayoutApi extends BaseAPI {
    /**
     * 
     * @summary Get layout
     * @param {string} locationName Position name
     * @param {string} [cardId] Card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getApiLayoutGet(locationName: string, cardId?: string, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).getApiLayoutGet(locationName, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specified control info from whole layout
     * @param {string} locationName Position name
     * @param {string} controlName Control name
     * @param {string} [cardId] Card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getApiLayoutGetPart(locationName: string, controlName: string, cardId?: string, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).getApiLayoutGetPart(locationName, controlName, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets root layout
     * @param {string} location 
     * @param {string} [cacheVary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getApiLayoutGetRootLayout(location: string, cacheVary?: string, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).getApiLayoutGetRootLayout(location, cacheVary, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get layout
     * @param {string} locationName Position name
     * @param {string} id 
     * @param {string} [cardId] Card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public getApiLayoutId(locationName: string, id: string, cardId?: string, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).getApiLayoutId(locationName, id, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specified control info from whole layout
     * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public postApiLayoutGetPartWithParams(request: DocsVisionControllersLayoutControllerModelsGetPartRequestModel, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).postApiLayoutGetPartWithParams(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get specified control info from whole layout
     * @param {DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public postApiLayoutGetPartWithParamsEx(request: DocsVisionControllersLayoutControllerModelsGetPartRequestModelEx, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).postApiLayoutGetPartWithParamsEx(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get layout
     * @param {DocsVisionControllersLayoutControllerModelsGetRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public postApiLayoutGetWithParams(request: DocsVisionControllersLayoutControllerModelsGetRequestModel, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).postApiLayoutGetWithParams(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Layout/Save
     * @param {DocsVisionControllersLayoutControllerModelsSaveRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    public postApiLayoutSave(model: DocsVisionControllersLayoutControllerModelsSaveRequestModel, options?: AxiosRequestConfig) {
        return LayoutApiFp(this.configuration).postApiLayoutSave(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutAgreementApi - axios parameter creator
 * @export
 */
export const LayoutAgreementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Finish agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementFinish: async (documentCardId: string, reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementFinish', 'documentCardId', documentCardId)
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementFinish', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/LayoutAgreement/AgreementFinish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentCardId !== undefined) {
                localVarQueryParameter['documentCardId'] = documentCardId;
            }

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pause agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementPause: async (documentCardId: string, reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementPause', 'documentCardId', documentCardId)
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementPause', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/LayoutAgreement/AgreementPause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentCardId !== undefined) {
                localVarQueryParameter['documentCardId'] = documentCardId;
            }

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resume agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementResume: async (documentCardId: string, reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementResume', 'documentCardId', documentCardId)
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementResume', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/LayoutAgreement/AgreementResume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentCardId !== undefined) {
                localVarQueryParameter['documentCardId'] = documentCardId;
            }

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementStop: async (documentCardId: string, reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementStop', 'documentCardId', documentCardId)
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementAgreementStop', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/LayoutAgreement/AgreementStop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentCardId !== undefined) {
                localVarQueryParameter['documentCardId'] = documentCardId;
            }

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get agreement history
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementHistory: async (reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementGetAgreementHistory', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/LayoutAgreement/GetAgreementHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get agreement list
         * @param {string} cardId Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementList: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementGetAgreementList', 'cardId', cardId)
            const localVarPath = `/api/LayoutAgreement/GetAgreementList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets model for the edit agreement in AgreementManagementControl
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementManagementEditModel: async (documentCardId: string, reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementGetAgreementManagementEditModel', 'documentCardId', documentCardId)
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementGetAgreementManagementEditModel', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/LayoutAgreement/GetAgreementManagementEditModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentCardId !== undefined) {
                localVarQueryParameter['documentCardId'] = documentCardId;
            }

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets model for the start agreement in AgreementManagementControl
         * @param {string} documentCardId Document card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementManagementStartModel: async (documentCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementGetAgreementManagementStartModel', 'documentCardId', documentCardId)
            const localVarPath = `/api/LayoutAgreement/GetAgreementManagementStartModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentCardId !== undefined) {
                localVarQueryParameter['documentCardId'] = documentCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets template stages AgreementManagementControl
         * @param {string} documentId Document id
         * @param {string} templateId Template id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementTemplateStages: async (documentId: string, templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiLayoutAgreementGetAgreementTemplateStages', 'documentId', documentId)
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getApiLayoutAgreementGetAgreementTemplateStages', 'templateId', templateId)
            const localVarPath = `/api/LayoutAgreement/GetAgreementTemplateStages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (templateId !== undefined) {
                localVarQueryParameter['templateId'] = templateId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get agreement list
         * @param {string} cardId Card id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementId: async (cardId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementId', 'cardId', cardId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutAgreementId', 'id', id)
            const localVarPath = `/api/LayoutAgreement/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Interrupt current stages
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementInterruptCurrentStages: async (documentCardId: string, reconcileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementInterruptCurrentStages', 'documentCardId', documentCardId)
            // verify required parameter 'reconcileCardId' is not null or undefined
            assertParamExists('getApiLayoutAgreementInterruptCurrentStages', 'reconcileCardId', reconcileCardId)
            const localVarPath = `/api/LayoutAgreement/InterruptCurrentStages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentCardId !== undefined) {
                localVarQueryParameter['documentCardId'] = documentCardId;
            }

            if (reconcileCardId !== undefined) {
                localVarQueryParameter['reconcileCardId'] = reconcileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Reconciliation
         * @param {DocsVisionApprovalWebClientModelsReconcilationEditModel} model Reconcilation edit model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutAgreementChangeStages: async (model: DocsVisionApprovalWebClientModelsReconcilationEditModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutAgreementChangeStages', 'model', model)
            const localVarPath = `/api/LayoutAgreement/ChangeStages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Reconciliation
         * @param {DocsVisionApprovalWebClientModelsReconcilationCreationModel} model Reconcilation creation model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutAgreementCreateReconciliation: async (model: DocsVisionApprovalWebClientModelsReconcilationCreationModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutAgreementCreateReconciliation', 'model', model)
            const localVarPath = `/api/LayoutAgreement/CreateReconciliation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutAgreementApi - functional programming interface
 * @export
 */
export const LayoutAgreementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutAgreementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Finish agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementAgreementFinish(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementAgreementFinish(documentCardId, reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pause agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementAgreementPause(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementAgreementPause(documentCardId, reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Resume agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementAgreementResume(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementAgreementResume(documentCardId, reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stop agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementAgreementStop(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementAgreementStop(documentCardId, reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get agreement history
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementGetAgreementHistory(reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementGetAgreementHistory(reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get agreement list
         * @param {string} cardId Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementGetAgreementList(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementGetAgreementList(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets model for the edit agreement in AgreementManagementControl
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementGetAgreementManagementEditModel(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementGetAgreementManagementEditModel(documentCardId, reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets model for the start agreement in AgreementManagementControl
         * @param {string} documentCardId Document card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementGetAgreementManagementStartModel(documentCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementGetAgreementManagementStartModel(documentCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets template stages AgreementManagementControl
         * @param {string} documentId Document id
         * @param {string} templateId Template id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementGetAgreementTemplateStages(documentId: string, templateId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementGetAgreementTemplateStages(documentId, templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get agreement list
         * @param {string} cardId Card id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementId(cardId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementId(cardId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Interrupt current stages
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutAgreementInterruptCurrentStages(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutAgreementInterruptCurrentStages(documentCardId, reconcileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Reconciliation
         * @param {DocsVisionApprovalWebClientModelsReconcilationEditModel} model Reconcilation edit model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutAgreementChangeStages(model: DocsVisionApprovalWebClientModelsReconcilationEditModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutAgreementChangeStages(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Reconciliation
         * @param {DocsVisionApprovalWebClientModelsReconcilationCreationModel} model Reconcilation creation model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutAgreementCreateReconciliation(model: DocsVisionApprovalWebClientModelsReconcilationCreationModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutAgreementCreateReconciliation(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutAgreementApi - factory interface
 * @export
 */
export const LayoutAgreementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutAgreementApiFp(configuration)
    return {
        /**
         * 
         * @summary Finish agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementFinish(documentCardId: string, reconcileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutAgreementAgreementFinish(documentCardId, reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pause agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementPause(documentCardId: string, reconcileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutAgreementAgreementPause(documentCardId, reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resume agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementResume(documentCardId: string, reconcileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutAgreementAgreementResume(documentCardId, reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop agreement
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementAgreementStop(documentCardId: string, reconcileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutAgreementAgreementStop(documentCardId, reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get agreement history
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementHistory(reconcileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalHistoryViewModelDocsVisionApprovalWebClient> {
            return localVarFp.getApiLayoutAgreementGetAgreementHistory(reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get agreement list
         * @param {string} cardId Card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementList(cardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient> {
            return localVarFp.getApiLayoutAgreementGetAgreementList(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets model for the edit agreement in AgreementManagementControl
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementManagementEditModel(documentCardId: string, reconcileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementEditModelDocsVisionApprovalWebClient> {
            return localVarFp.getApiLayoutAgreementGetAgreementManagementEditModel(documentCardId, reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets model for the start agreement in AgreementManagementControl
         * @param {string} documentCardId Document card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementManagementStartModel(documentCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementManagementStartModelDocsVisionApprovalWebClient> {
            return localVarFp.getApiLayoutAgreementGetAgreementManagementStartModel(documentCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets template stages AgreementManagementControl
         * @param {string} documentId Document id
         * @param {string} templateId Template id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementGetAgreementTemplateStages(documentId: string, templateId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionApprovalWebClientModelsStageModelDocsVisionApprovalWebClient> {
            return localVarFp.getApiLayoutAgreementGetAgreementTemplateStages(documentId, templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get agreement list
         * @param {string} cardId Card id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementId(cardId: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsAgreementListModelDocsVisionApprovalWebClient> {
            return localVarFp.getApiLayoutAgreementId(cardId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Interrupt current stages
         * @param {string} documentCardId Document card id
         * @param {string} reconcileCardId Reconcile card id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutAgreementInterruptCurrentStages(documentCardId: string, reconcileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutAgreementInterruptCurrentStages(documentCardId, reconcileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Reconciliation
         * @param {DocsVisionApprovalWebClientModelsReconcilationEditModel} model Reconcilation edit model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutAgreementChangeStages(model: DocsVisionApprovalWebClientModelsReconcilationEditModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutAgreementChangeStages(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Reconciliation
         * @param {DocsVisionApprovalWebClientModelsReconcilationCreationModel} model Reconcilation creation model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutAgreementCreateReconciliation(model: DocsVisionApprovalWebClientModelsReconcilationCreationModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.postApiLayoutAgreementCreateReconciliation(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutAgreementApi - object-oriented interface
 * @export
 * @class LayoutAgreementApi
 * @extends {BaseAPI}
 */
export class LayoutAgreementApi extends BaseAPI {
    /**
     * 
     * @summary Finish agreement
     * @param {string} documentCardId Document card id
     * @param {string} reconcileCardId Reconcile card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementAgreementFinish(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementAgreementFinish(documentCardId, reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pause agreement
     * @param {string} documentCardId Document card id
     * @param {string} reconcileCardId Reconcile card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementAgreementPause(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementAgreementPause(documentCardId, reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resume agreement
     * @param {string} documentCardId Document card id
     * @param {string} reconcileCardId Reconcile card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementAgreementResume(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementAgreementResume(documentCardId, reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop agreement
     * @param {string} documentCardId Document card id
     * @param {string} reconcileCardId Reconcile card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementAgreementStop(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementAgreementStop(documentCardId, reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get agreement history
     * @param {string} reconcileCardId Reconcile card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementGetAgreementHistory(reconcileCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementGetAgreementHistory(reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get agreement list
     * @param {string} cardId Card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementGetAgreementList(cardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementGetAgreementList(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets model for the edit agreement in AgreementManagementControl
     * @param {string} documentCardId Document card id
     * @param {string} reconcileCardId Reconcile card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementGetAgreementManagementEditModel(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementGetAgreementManagementEditModel(documentCardId, reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets model for the start agreement in AgreementManagementControl
     * @param {string} documentCardId Document card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementGetAgreementManagementStartModel(documentCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementGetAgreementManagementStartModel(documentCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets template stages AgreementManagementControl
     * @param {string} documentId Document id
     * @param {string} templateId Template id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementGetAgreementTemplateStages(documentId: string, templateId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementGetAgreementTemplateStages(documentId, templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get agreement list
     * @param {string} cardId Card id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementId(cardId: string, id: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementId(cardId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Interrupt current stages
     * @param {string} documentCardId Document card id
     * @param {string} reconcileCardId Reconcile card id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public getApiLayoutAgreementInterruptCurrentStages(documentCardId: string, reconcileCardId: string, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).getApiLayoutAgreementInterruptCurrentStages(documentCardId, reconcileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Reconciliation
     * @param {DocsVisionApprovalWebClientModelsReconcilationEditModel} model Reconcilation edit model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public postApiLayoutAgreementChangeStages(model: DocsVisionApprovalWebClientModelsReconcilationEditModel, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).postApiLayoutAgreementChangeStages(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Reconciliation
     * @param {DocsVisionApprovalWebClientModelsReconcilationCreationModel} model Reconcilation creation model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutAgreementApi
     */
    public postApiLayoutAgreementCreateReconciliation(model: DocsVisionApprovalWebClientModelsReconcilationCreationModel, options?: AxiosRequestConfig) {
        return LayoutAgreementApiFp(this.configuration).postApiLayoutAgreementCreateReconciliation(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutCardApi - axios parameter creator
 * @export
 */
export const LayoutCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary HTTP: /LayoutCard/CheckAccess
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardCheckAccess: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutCardCheckAccess', 'cardId', cardId)
            const localVarPath = `/api/LayoutCard/CheckAccess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {number} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardCheckModifiedAndLocked: async (cardId: string, timestamp: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutCardCheckModifiedAndLocked', 'cardId', cardId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiLayoutCardCheckModifiedAndLocked', 'timestamp', timestamp)
            const localVarPath = `/api/LayoutCard/CheckModifiedAndLocked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Edit
         * @param {string} cardId 
         * @param {string} layoutMode 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardEdit: async (cardId: string, layoutMode: string, refresh?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutCardEdit', 'cardId', cardId)
            // verify required parameter 'layoutMode' is not null or undefined
            assertParamExists('getApiLayoutCardEdit', 'layoutMode', layoutMode)
            const localVarPath = `/api/LayoutCard/Edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (layoutMode !== undefined) {
                localVarQueryParameter['layoutMode'] = layoutMode;
            }

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [cardLayoutParamsCardId] 
         * @param {boolean} [cardLayoutParamsAddToRecent] 
         * @param {boolean} [cardLayoutParamsAddCardLogMessage] 
         * @param {boolean} [cardLayoutParamsMarkAsRead] 
         * @param {Array<object>} [cardLayoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardGetLayout: async (cardLayoutParamsCardId?: string, cardLayoutParamsAddToRecent?: boolean, cardLayoutParamsAddCardLogMessage?: boolean, cardLayoutParamsMarkAsRead?: boolean, cardLayoutParamsLayoutParams?: Array<object>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutCard/GetLayout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardLayoutParamsCardId !== undefined) {
                localVarQueryParameter['cardLayoutParams.cardId'] = cardLayoutParamsCardId;
            }

            if (cardLayoutParamsAddToRecent !== undefined) {
                localVarQueryParameter['cardLayoutParams.addToRecent'] = cardLayoutParamsAddToRecent;
            }

            if (cardLayoutParamsAddCardLogMessage !== undefined) {
                localVarQueryParameter['cardLayoutParams.addCardLogMessage'] = cardLayoutParamsAddCardLogMessage;
            }

            if (cardLayoutParamsMarkAsRead !== undefined) {
                localVarQueryParameter['cardLayoutParams.markAsRead'] = cardLayoutParamsMarkAsRead;
            }

            if (cardLayoutParamsLayoutParams) {
                localVarQueryParameter['cardLayoutParams.layoutParams'] = cardLayoutParamsLayoutParams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [layoutPartParamsCardId] 
         * @param {string} [layoutPartParamsLayoutMode] 
         * @param {string} [layoutPartParamsRootControlName] 
         * @param {boolean} [layoutPartParamsIncludeRootControl] 
         * @param {object} [layoutPartParamsContextData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardGetLayoutPart: async (layoutPartParamsCardId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsContextData?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutCard/GetLayoutPart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (layoutPartParamsCardId !== undefined) {
                localVarQueryParameter['layoutPartParams.cardId'] = layoutPartParamsCardId;
            }

            if (layoutPartParamsLayoutMode !== undefined) {
                localVarQueryParameter['layoutPartParams.layoutMode'] = layoutPartParamsLayoutMode;
            }

            if (layoutPartParamsRootControlName !== undefined) {
                localVarQueryParameter['layoutPartParams.rootControlName'] = layoutPartParamsRootControlName;
            }

            if (layoutPartParamsIncludeRootControl !== undefined) {
                localVarQueryParameter['layoutPartParams.includeRootControl'] = layoutPartParamsIncludeRootControl;
            }

            if (layoutPartParamsContextData !== undefined) {
                localVarQueryParameter['layoutPartParams.contextData'] = layoutPartParamsContextData;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
         * @param {string} folderId 
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardId: async (folderId: string, cardId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiLayoutCardId', 'folderId', folderId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutCardId', 'cardId', cardId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutCardId', 'id', id)
            const localVarPath = `/api/LayoutCard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/NewCard
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardNewCard: async (createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutCard/NewCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createParamsCardTypeId !== undefined) {
                localVarQueryParameter['createParams.cardTypeId'] = createParamsCardTypeId;
            }

            if (createParamsKindId !== undefined) {
                localVarQueryParameter['createParams.kindId'] = createParamsKindId;
            }

            if (createParamsFolderId !== undefined) {
                localVarQueryParameter['createParams.folderId'] = createParamsFolderId;
            }

            if (createParamsTemplateId !== undefined) {
                localVarQueryParameter['createParams.templateId'] = createParamsTemplateId;
            }

            if (createParamsParentCardId !== undefined) {
                localVarQueryParameter['createParams.parentCardId'] = createParamsParentCardId;
            }

            if (createParamsLayoutMode !== undefined) {
                localVarQueryParameter['createParams.layoutMode'] = createParamsLayoutMode;
            }

            if (createParamsCreateAsLinkSourceCardId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.sourceCardId'] = createParamsCreateAsLinkSourceCardId;
            }

            if (createParamsCreateAsLinkSourceCardTimestamp !== undefined) {
                localVarQueryParameter['createParams.createAsLink.sourceCardTimestamp'] = createParamsCreateAsLinkSourceCardTimestamp;
            }

            if (createParamsCreateAsLinkLinkTypeId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linkTypeId'] = createParamsCreateAsLinkLinkTypeId;
            }

            if (createParamsCreateAsLinkLinksBindingDataSourceResolverId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.dataSourceResolverId'] = createParamsCreateAsLinkLinksBindingDataSourceResolverId;
            }

            if (createParamsCreateAsLinkLinksBindingSectionId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.sectionId'] = createParamsCreateAsLinkLinksBindingSectionId;
            }

            if (createParamsCreateAsLinkLinksBindingFieldAlias !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.fieldAlias'] = createParamsCreateAsLinkLinksBindingFieldAlias;
            }

            if (createParamsCreateAsLinkSaveHardLink !== undefined) {
                localVarQueryParameter['createParams.createAsLink.saveHardLink'] = createParamsCreateAsLinkSaveHardLink;
            }

            if (createParamsCreateAsLinkIsReport !== undefined) {
                localVarQueryParameter['createParams.createAsLink.isReport'] = createParamsCreateAsLinkIsReport;
            }

            if (createParamsCreateAsLinkEditOperation !== undefined) {
                localVarQueryParameter['createParams.createAsLink.editOperation'] = createParamsCreateAsLinkEditOperation;
            }

            if (createParamsRelatedCreatorCardInfoInitialCardId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.initialCardId'] = createParamsRelatedCreatorCardInfoInitialCardId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.id'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.displayName'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.operationId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.templateId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.folderId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.linkTypeId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.cardKindId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.cardTypeId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.location'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.operationContext'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext;
            }

            if (createParamsRelatedCreatorCardInfoParameters) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.parameters'] = createParamsRelatedCreatorCardInfoParameters;
            }

            if (createParamsLayoutParams) {
                localVarQueryParameter['createParams.layoutParams'] = createParamsLayoutParams;
            }

            if (createParamsSourceLayoutMode !== undefined) {
                localVarQueryParameter['createParams.sourceLayoutMode'] = createParamsSourceLayoutMode;
            }

            if (createParamsCustomContext !== undefined) {
                localVarQueryParameter['createParams.customContext'] = createParamsCustomContext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
         * @param {string} folderId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardRemoveShortcutsFromFolder: async (folderId: string, cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiLayoutCardRemoveShortcutsFromFolder', 'folderId', folderId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutCardRemoveShortcutsFromFolder', 'cardId', cardId)
            const localVarPath = `/api/LayoutCard/RemoveShortcutsFromFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/View
         * @param {string} cardId 
         * @param {string} layoutMode 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardView: async (cardId: string, layoutMode: string, refresh?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutCardView', 'cardId', cardId)
            // verify required parameter 'layoutMode' is not null or undefined
            assertParamExists('getApiLayoutCardView', 'layoutMode', layoutMode)
            const localVarPath = `/api/LayoutCard/View`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (layoutMode !== undefined) {
                localVarQueryParameter['layoutMode'] = layoutMode;
            }

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ChangeState
         * @param {DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams} changeStateDataModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardChangeState: async (changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeStateDataModel' is not null or undefined
            assertParamExists('postApiLayoutCardChangeState', 'changeStateDataModel', changeStateDataModel)
            const localVarPath = `/api/LayoutCard/ChangeState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStateDataModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ChangeStateEx
         * @param {DocsVisionLayoutWebClientModelsChangeStateDataModel} changeStateDataModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardChangeStateEx: async (changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeStateDataModel' is not null or undefined
            assertParamExists('postApiLayoutCardChangeStateEx', 'changeStateDataModel', changeStateDataModel)
            const localVarPath = `/api/LayoutCard/ChangeStateEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStateDataModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/CopyShortcutsToFolder
         * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardCopyShortcutsToFolder: async (request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutCardCopyShortcutsToFolder', 'request', request)
            const localVarPath = `/api/LayoutCard/CopyShortcutsToFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Delete
         * @param {DocsVisionWebClientModelsDeleteCardRequestModel} deleteCardRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardDelete: async (deleteCardRequestModel: DocsVisionWebClientModelsDeleteCardRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCardRequestModel' is not null or undefined
            assertParamExists('postApiLayoutCardDelete', 'deleteCardRequestModel', deleteCardRequestModel)
            const localVarPath = `/api/LayoutCard/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCardRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/EditEx
         * @param {DocsVisionWebClientModelsEditCardLayoutRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardEditEx: async (request: DocsVisionWebClientModelsEditCardLayoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutCardEditEx', 'request', request)
            const localVarPath = `/api/LayoutCard/EditEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/MoveShortcutsToFolder
         * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardMoveShortcutsToFolder: async (request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutCardMoveShortcutsToFolder', 'request', request)
            const localVarPath = `/api/LayoutCard/MoveShortcutsToFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Save
         * @param {DocsVisionLayoutWebClientModelsSaveControlDataModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardSave: async (model: DocsVisionLayoutWebClientModelsSaveControlDataModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutCardSave', 'model', model)
            const localVarPath = `/api/LayoutCard/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ViewEx
         * @param {DocsVisionWebClientModelsViewCardLayoutRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardViewEx: async (request: DocsVisionWebClientModelsViewCardLayoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutCardViewEx', 'request', request)
            const localVarPath = `/api/LayoutCard/ViewEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutCardApi - functional programming interface
 * @export
 */
export const LayoutCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutCardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary HTTP: /LayoutCard/CheckAccess
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardCheckAccess(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardCheckAccess(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {number} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardCheckModifiedAndLocked(cardId: string, timestamp: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardCheckModifiedAndLocked(cardId, timestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Edit
         * @param {string} cardId 
         * @param {string} layoutMode 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardEdit(cardId: string, layoutMode: string, refresh?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardEdit(cardId, layoutMode, refresh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [cardLayoutParamsCardId] 
         * @param {boolean} [cardLayoutParamsAddToRecent] 
         * @param {boolean} [cardLayoutParamsAddCardLogMessage] 
         * @param {boolean} [cardLayoutParamsMarkAsRead] 
         * @param {Array<object>} [cardLayoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardGetLayout(cardLayoutParamsCardId?: string, cardLayoutParamsAddToRecent?: boolean, cardLayoutParamsAddCardLogMessage?: boolean, cardLayoutParamsMarkAsRead?: boolean, cardLayoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardGetLayout(cardLayoutParamsCardId, cardLayoutParamsAddToRecent, cardLayoutParamsAddCardLogMessage, cardLayoutParamsMarkAsRead, cardLayoutParamsLayoutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [layoutPartParamsCardId] 
         * @param {string} [layoutPartParamsLayoutMode] 
         * @param {string} [layoutPartParamsRootControlName] 
         * @param {boolean} [layoutPartParamsIncludeRootControl] 
         * @param {object} [layoutPartParamsContextData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardGetLayoutPart(layoutPartParamsCardId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsContextData?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardGetLayoutPart(layoutPartParamsCardId, layoutPartParamsLayoutMode, layoutPartParamsRootControlName, layoutPartParamsIncludeRootControl, layoutPartParamsContextData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
         * @param {string} folderId 
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardId(folderId: string, cardId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardId(folderId, cardId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/NewCard
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardNewCard(createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardNewCard(createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
         * @param {string} folderId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardRemoveShortcutsFromFolder(folderId: string, cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardRemoveShortcutsFromFolder(folderId, cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/View
         * @param {string} cardId 
         * @param {string} layoutMode 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardView(cardId: string, layoutMode: string, refresh?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardView(cardId, layoutMode, refresh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ChangeState
         * @param {DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams} changeStateDataModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardChangeState(changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardChangeState(changeStateDataModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ChangeStateEx
         * @param {DocsVisionLayoutWebClientModelsChangeStateDataModel} changeStateDataModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardChangeStateEx(changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardChangeStateEx(changeStateDataModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/CopyShortcutsToFolder
         * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardCopyShortcutsToFolder(request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardCopyShortcutsToFolder(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Delete
         * @param {DocsVisionWebClientModelsDeleteCardRequestModel} deleteCardRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardDelete(deleteCardRequestModel: DocsVisionWebClientModelsDeleteCardRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardDelete(deleteCardRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/EditEx
         * @param {DocsVisionWebClientModelsEditCardLayoutRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardEditEx(request: DocsVisionWebClientModelsEditCardLayoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardEditEx(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/MoveShortcutsToFolder
         * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardMoveShortcutsToFolder(request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardMoveShortcutsToFolder(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Save
         * @param {DocsVisionLayoutWebClientModelsSaveControlDataModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardSave(model: DocsVisionLayoutWebClientModelsSaveControlDataModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardSave(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ViewEx
         * @param {DocsVisionWebClientModelsViewCardLayoutRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutCardViewEx(request: DocsVisionWebClientModelsViewCardLayoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutCardViewEx(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutCardApi - factory interface
 * @export
 */
export const LayoutCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutCardApiFp(configuration)
    return {
        /**
         * 
         * @summary HTTP: /LayoutCard/CheckAccess
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardCheckAccess(cardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutCardCheckAccess(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {number} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardCheckModifiedAndLocked(cardId: string, timestamp: number, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutCardCheckModifiedAndLocked(cardId, timestamp, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Edit
         * @param {string} cardId 
         * @param {string} layoutMode 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardEdit(cardId: string, layoutMode: string, refresh?: boolean, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel> {
            return localVarFp.getApiLayoutCardEdit(cardId, layoutMode, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [cardLayoutParamsCardId] 
         * @param {boolean} [cardLayoutParamsAddToRecent] 
         * @param {boolean} [cardLayoutParamsAddCardLogMessage] 
         * @param {boolean} [cardLayoutParamsMarkAsRead] 
         * @param {Array<object>} [cardLayoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardGetLayout(cardLayoutParamsCardId?: string, cardLayoutParamsAddToRecent?: boolean, cardLayoutParamsAddCardLogMessage?: boolean, cardLayoutParamsMarkAsRead?: boolean, cardLayoutParamsLayoutParams?: Array<object>, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient> {
            return localVarFp.getApiLayoutCardGetLayout(cardLayoutParamsCardId, cardLayoutParamsAddToRecent, cardLayoutParamsAddCardLogMessage, cardLayoutParamsMarkAsRead, cardLayoutParamsLayoutParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [layoutPartParamsCardId] 
         * @param {string} [layoutPartParamsLayoutMode] 
         * @param {string} [layoutPartParamsRootControlName] 
         * @param {boolean} [layoutPartParamsIncludeRootControl] 
         * @param {object} [layoutPartParamsContextData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardGetLayoutPart(layoutPartParamsCardId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsContextData?: object, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel> {
            return localVarFp.getApiLayoutCardGetLayoutPart(layoutPartParamsCardId, layoutPartParamsLayoutMode, layoutPartParamsRootControlName, layoutPartParamsIncludeRootControl, layoutPartParamsContextData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
         * @param {string} folderId 
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardId(folderId: string, cardId: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutCardId(folderId, cardId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/NewCard
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardNewCard(createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel> {
            return localVarFp.getApiLayoutCardNewCard(createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
         * @param {string} folderId 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardRemoveShortcutsFromFolder(folderId: string, cardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutCardRemoveShortcutsFromFolder(folderId, cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/View
         * @param {string} cardId 
         * @param {string} layoutMode 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardView(cardId: string, layoutMode: string, refresh?: boolean, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel> {
            return localVarFp.getApiLayoutCardView(cardId, layoutMode, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ChangeState
         * @param {DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams} changeStateDataModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardChangeState(changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsLayoutCardViewModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutCardChangeState(changeStateDataModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ChangeStateEx
         * @param {DocsVisionLayoutWebClientModelsChangeStateDataModel} changeStateDataModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardChangeStateEx(changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutCardChangeStateEx(changeStateDataModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/CopyShortcutsToFolder
         * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardCopyShortcutsToFolder(request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutCardCopyShortcutsToFolder(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Delete
         * @param {DocsVisionWebClientModelsDeleteCardRequestModel} deleteCardRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardDelete(deleteCardRequestModel: DocsVisionWebClientModelsDeleteCardRequestModel, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutCardDelete(deleteCardRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/EditEx
         * @param {DocsVisionWebClientModelsEditCardLayoutRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardEditEx(request: DocsVisionWebClientModelsEditCardLayoutRequest, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel> {
            return localVarFp.postApiLayoutCardEditEx(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/MoveShortcutsToFolder
         * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardMoveShortcutsToFolder(request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutCardMoveShortcutsToFolder(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/Save
         * @param {DocsVisionLayoutWebClientModelsSaveControlDataModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardSave(model: DocsVisionLayoutWebClientModelsSaveControlDataModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutCardSave(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutCard/ViewEx
         * @param {DocsVisionWebClientModelsViewCardLayoutRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutCardViewEx(request: DocsVisionWebClientModelsViewCardLayoutRequest, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel> {
            return localVarFp.postApiLayoutCardViewEx(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutCardApi - object-oriented interface
 * @export
 * @class LayoutCardApi
 * @extends {BaseAPI}
 */
export class LayoutCardApi extends BaseAPI {
    /**
     * 
     * @summary HTTP: /LayoutCard/CheckAccess
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardCheckAccess(cardId: string, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardCheckAccess(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/CheckModifiedAndLocked
     * @param {string} cardId 
     * @param {number} timestamp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardCheckModifiedAndLocked(cardId: string, timestamp: number, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardCheckModifiedAndLocked(cardId, timestamp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/Edit
     * @param {string} cardId 
     * @param {string} layoutMode 
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardEdit(cardId: string, layoutMode: string, refresh?: boolean, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardEdit(cardId, layoutMode, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets layout part
     * @param {string} [cardLayoutParamsCardId] 
     * @param {boolean} [cardLayoutParamsAddToRecent] 
     * @param {boolean} [cardLayoutParamsAddCardLogMessage] 
     * @param {boolean} [cardLayoutParamsMarkAsRead] 
     * @param {Array<object>} [cardLayoutParamsLayoutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardGetLayout(cardLayoutParamsCardId?: string, cardLayoutParamsAddToRecent?: boolean, cardLayoutParamsAddCardLogMessage?: boolean, cardLayoutParamsMarkAsRead?: boolean, cardLayoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardGetLayout(cardLayoutParamsCardId, cardLayoutParamsAddToRecent, cardLayoutParamsAddCardLogMessage, cardLayoutParamsMarkAsRead, cardLayoutParamsLayoutParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets layout part
     * @param {string} [layoutPartParamsCardId] 
     * @param {string} [layoutPartParamsLayoutMode] 
     * @param {string} [layoutPartParamsRootControlName] 
     * @param {boolean} [layoutPartParamsIncludeRootControl] 
     * @param {object} [layoutPartParamsContextData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardGetLayoutPart(layoutPartParamsCardId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsContextData?: object, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardGetLayoutPart(layoutPartParamsCardId, layoutPartParamsLayoutMode, layoutPartParamsRootControlName, layoutPartParamsIncludeRootControl, layoutPartParamsContextData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
     * @param {string} folderId 
     * @param {string} cardId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardId(folderId: string, cardId: string, id: string, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardId(folderId, cardId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/NewCard
     * @param {string} [createParamsCardTypeId] 
     * @param {string} [createParamsKindId] 
     * @param {string} [createParamsFolderId] 
     * @param {string} [createParamsTemplateId] 
     * @param {string} [createParamsParentCardId] 
     * @param {string} [createParamsLayoutMode] 
     * @param {string} [createParamsCreateAsLinkSourceCardId] 
     * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
     * @param {string} [createParamsCreateAsLinkLinkTypeId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
     * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
     * @param {boolean} [createParamsCreateAsLinkIsReport] 
     * @param {string} [createParamsCreateAsLinkEditOperation] 
     * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
     * @param {GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
     * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
     * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
     * @param {Array<object>} [createParamsLayoutParams] 
     * @param {string} [createParamsSourceLayoutMode] 
     * @param {object} [createParamsCustomContext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardNewCard(createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardNewCard(createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/RemoveShortcutsFromFolder
     * @param {string} folderId 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardRemoveShortcutsFromFolder(folderId: string, cardId: string, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardRemoveShortcutsFromFolder(folderId, cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/View
     * @param {string} cardId 
     * @param {string} layoutMode 
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public getApiLayoutCardView(cardId: string, layoutMode: string, refresh?: boolean, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).getApiLayoutCardView(cardId, layoutMode, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/ChangeState
     * @param {DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams} changeStateDataModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardChangeState(changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModelWithParams, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardChangeState(changeStateDataModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/ChangeStateEx
     * @param {DocsVisionLayoutWebClientModelsChangeStateDataModel} changeStateDataModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardChangeStateEx(changeStateDataModel: DocsVisionLayoutWebClientModelsChangeStateDataModel, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardChangeStateEx(changeStateDataModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/CopyShortcutsToFolder
     * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardCopyShortcutsToFolder(request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardCopyShortcutsToFolder(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/Delete
     * @param {DocsVisionWebClientModelsDeleteCardRequestModel} deleteCardRequestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardDelete(deleteCardRequestModel: DocsVisionWebClientModelsDeleteCardRequestModel, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardDelete(deleteCardRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/EditEx
     * @param {DocsVisionWebClientModelsEditCardLayoutRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardEditEx(request: DocsVisionWebClientModelsEditCardLayoutRequest, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardEditEx(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/MoveShortcutsToFolder
     * @param {DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardMoveShortcutsToFolder(request: DocsVisionPlatformWebClientModelsFoldersMoveOrCopyShortcutsToFolderRequest, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardMoveShortcutsToFolder(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/Save
     * @param {DocsVisionLayoutWebClientModelsSaveControlDataModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardSave(model: DocsVisionLayoutWebClientModelsSaveControlDataModel, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardSave(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutCard/ViewEx
     * @param {DocsVisionWebClientModelsViewCardLayoutRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardApi
     */
    public postApiLayoutCardViewEx(request: DocsVisionWebClientModelsViewCardLayoutRequest, options?: AxiosRequestConfig) {
        return LayoutCardApiFp(this.configuration).postApiLayoutCardViewEx(request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum = typeof GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum[keyof typeof GetApiLayoutCardNewCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum];


/**
 * LayoutCardKindApi - axios parameter creator
 * @export
 */
export const LayoutCardKindApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Load kinds tree
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardKindId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutCardKindId', 'id', id)
            const localVarPath = `/api/LayoutCardKind/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load kinds tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardKindLoadTree: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutCardKind/LoadTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutCardKindApi - functional programming interface
 * @export
 */
export const LayoutCardKindApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutCardKindApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Load kinds tree
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardKindId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardKindId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load kinds tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutCardKindLoadTree(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutCardKindLoadTree(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutCardKindApi - factory interface
 * @export
 */
export const LayoutCardKindApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutCardKindApiFp(configuration)
    return {
        /**
         * 
         * @summary Load kinds tree
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardKindId(id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel> {
            return localVarFp.getApiLayoutCardKindId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load kinds tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutCardKindLoadTree(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientCardKindCardKindInfoModel> {
            return localVarFp.getApiLayoutCardKindLoadTree(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutCardKindApi - object-oriented interface
 * @export
 * @class LayoutCardKindApi
 * @extends {BaseAPI}
 */
export class LayoutCardKindApi extends BaseAPI {
    /**
     * 
     * @summary Load kinds tree
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardKindApi
     */
    public getApiLayoutCardKindId(id: string, options?: AxiosRequestConfig) {
        return LayoutCardKindApiFp(this.configuration).getApiLayoutCardKindId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load kinds tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutCardKindApi
     */
    public getApiLayoutCardKindLoadTree(options?: AxiosRequestConfig) {
        return LayoutCardKindApiFp(this.configuration).getApiLayoutCardKindLoadTree(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutDirectoryDesignerApi - axios parameter creator
 * @export
 */
export const LayoutDirectoryDesignerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find in tree
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDirectoryDesignerFindInTree: async (query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutDirectoryDesignerFindInTree', 'query', query)
            const localVarPath = `/api/LayoutDirectoryDesigner/FindInTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDirectoryDesignerFindRows: async (query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutDirectoryDesignerFindRows', 'query', query)
            const localVarPath = `/api/LayoutDirectoryDesigner/FindRows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load directory tree nodes
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDirectoryDesignerLoadTree: async (query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutDirectoryDesignerLoadTree', 'query', query)
            const localVarPath = `/api/LayoutDirectoryDesigner/LoadTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find in tree
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDirectoryDesignerFindInTree: async (query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postLayoutDirectoryDesignerFindInTree', 'query', query)
            const localVarPath = `/LayoutDirectoryDesigner/FindInTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDirectoryDesignerFindRows: async (query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postLayoutDirectoryDesignerFindRows', 'query', query)
            const localVarPath = `/LayoutDirectoryDesigner/FindRows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load directory tree nodes
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDirectoryDesignerLoadTree: async (query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postLayoutDirectoryDesignerLoadTree', 'query', query)
            const localVarPath = `/LayoutDirectoryDesigner/LoadTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutDirectoryDesignerApi - functional programming interface
 * @export
 */
export const LayoutDirectoryDesignerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutDirectoryDesignerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find in tree
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDirectoryDesignerFindInTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDirectoryDesignerFindInTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDirectoryDesignerFindRows(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDirectoryDesignerFindRows(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load directory tree nodes
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDirectoryDesignerLoadTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDirectoryDesignerLoadTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find in tree
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDirectoryDesignerFindInTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDirectoryDesignerFindInTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDirectoryDesignerFindRows(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDirectoryDesignerFindRows(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load directory tree nodes
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDirectoryDesignerLoadTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDirectoryDesignerLoadTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutDirectoryDesignerApi - factory interface
 * @export
 */
export const LayoutDirectoryDesignerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutDirectoryDesignerApiFp(configuration)
    return {
        /**
         * 
         * @summary Find in tree
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDirectoryDesignerFindInTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult> {
            return localVarFp.postApiLayoutDirectoryDesignerFindInTree(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDirectoryDesignerFindRows(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult> {
            return localVarFp.postApiLayoutDirectoryDesignerFindRows(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load directory tree nodes
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDirectoryDesignerLoadTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode> {
            return localVarFp.postApiLayoutDirectoryDesignerLoadTree(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find in tree
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDirectoryDesignerFindInTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchTreeResult> {
            return localVarFp.postLayoutDirectoryDesignerFindInTree(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDirectoryDesignerFindRows(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerSearchResult> {
            return localVarFp.postLayoutDirectoryDesignerFindRows(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load directory tree nodes
         * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDirectoryDesignerLoadTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDirectoryDesignerDirectoryDesignerTreeNode> {
            return localVarFp.postLayoutDirectoryDesignerLoadTree(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutDirectoryDesignerApi - object-oriented interface
 * @export
 * @class LayoutDirectoryDesignerApi
 * @extends {BaseAPI}
 */
export class LayoutDirectoryDesignerApi extends BaseAPI {
    /**
     * 
     * @summary Find in tree
     * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDirectoryDesignerApi
     */
    public postApiLayoutDirectoryDesignerFindInTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options?: AxiosRequestConfig) {
        return LayoutDirectoryDesignerApiFp(this.configuration).postApiLayoutDirectoryDesignerFindInTree(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find department by name
     * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDirectoryDesignerApi
     */
    public postApiLayoutDirectoryDesignerFindRows(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options?: AxiosRequestConfig) {
        return LayoutDirectoryDesignerApiFp(this.configuration).postApiLayoutDirectoryDesignerFindRows(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load directory tree nodes
     * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDirectoryDesignerApi
     */
    public postApiLayoutDirectoryDesignerLoadTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options?: AxiosRequestConfig) {
        return LayoutDirectoryDesignerApiFp(this.configuration).postApiLayoutDirectoryDesignerLoadTree(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find in tree
     * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery} query Search query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDirectoryDesignerApi
     */
    public postLayoutDirectoryDesignerFindInTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchTreeQuery, options?: AxiosRequestConfig) {
        return LayoutDirectoryDesignerApiFp(this.configuration).postLayoutDirectoryDesignerFindInTree(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find department by name
     * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery} query Search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDirectoryDesignerApi
     */
    public postLayoutDirectoryDesignerFindRows(query: DocsVisionLayoutWebClientModelsDirectoryDesignerSearchQuery, options?: AxiosRequestConfig) {
        return LayoutDirectoryDesignerApiFp(this.configuration).postLayoutDirectoryDesignerFindRows(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load directory tree nodes
     * @param {DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery} query Search query params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDirectoryDesignerApi
     */
    public postLayoutDirectoryDesignerLoadTree(query: DocsVisionLayoutWebClientModelsDirectoryDesignerLoadTreeQuery, options?: AxiosRequestConfig) {
        return LayoutDirectoryDesignerApiFp(this.configuration).postLayoutDirectoryDesignerLoadTree(query, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutDocumentApi - axios parameter creator
 * @export
 */
export const LayoutDocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Exports zip-archive with electronic signature files
         * @param {string} cardId Document card identifier
         * @param {GetApiLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentExportESign: async (cardId: string, signatureFormat: GetApiLayoutDocumentExportESignSignatureFormatEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutDocumentExportESign', 'cardId', cardId)
            // verify required parameter 'signatureFormat' is not null or undefined
            assertParamExists('getApiLayoutDocumentExportESign', 'signatureFormat', signatureFormat)
            const localVarPath = `/api/LayoutDocument/ExportESign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (signatureFormat !== undefined) {
                localVarQueryParameter['signatureFormat'] = signatureFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
         * @param {string} cardId Document card identifier
         * @param {GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentExportESignWithPowerOfAttorney: async (cardId: string, signatureFormat: GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutDocumentExportESignWithPowerOfAttorney', 'cardId', cardId)
            // verify required parameter 'signatureFormat' is not null or undefined
            assertParamExists('getApiLayoutDocumentExportESignWithPowerOfAttorney', 'signatureFormat', signatureFormat)
            const localVarPath = `/api/LayoutDocument/ExportESignWithPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (signatureFormat !== undefined) {
                localVarQueryParameter['signatureFormat'] = signatureFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentGetCheckUniqueAttributes: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiLayoutDocumentGetCheckUniqueAttributes', 'documentId', documentId)
            const localVarPath = `/api/LayoutDocument/GetCheckUniqueAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get signature information
         * @param {string} documentId 
         * @param {string} signaturePartId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentGetSignatureInfo: async (documentId: string, signaturePartId: string, signatureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiLayoutDocumentGetSignatureInfo', 'documentId', documentId)
            // verify required parameter 'signaturePartId' is not null or undefined
            assertParamExists('getApiLayoutDocumentGetSignatureInfo', 'signaturePartId', signaturePartId)
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('getApiLayoutDocumentGetSignatureInfo', 'signatureId', signatureId)
            const localVarPath = `/api/LayoutDocument/GetSignatureInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (signaturePartId !== undefined) {
                localVarQueryParameter['signaturePartId'] = signaturePartId;
            }

            if (signatureId !== undefined) {
                localVarQueryParameter['signatureId'] = signatureId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} documentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentId: async (documentId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiLayoutDocumentId', 'documentId', documentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutDocumentId', 'id', id)
            const localVarPath = `/api/LayoutDocument/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files
         * @param {string} cardId Document card identifier
         * @param {GetLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentExportESign: async (cardId: string, signatureFormat: GetLayoutDocumentExportESignSignatureFormatEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getLayoutDocumentExportESign', 'cardId', cardId)
            // verify required parameter 'signatureFormat' is not null or undefined
            assertParamExists('getLayoutDocumentExportESign', 'signatureFormat', signatureFormat)
            const localVarPath = `/LayoutDocument/ExportESign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (signatureFormat !== undefined) {
                localVarQueryParameter['signatureFormat'] = signatureFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
         * @param {string} cardId Document card identifier
         * @param {GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentExportESignWithPowerOfAttorney: async (cardId: string, signatureFormat: GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getLayoutDocumentExportESignWithPowerOfAttorney', 'cardId', cardId)
            // verify required parameter 'signatureFormat' is not null or undefined
            assertParamExists('getLayoutDocumentExportESignWithPowerOfAttorney', 'signatureFormat', signatureFormat)
            const localVarPath = `/LayoutDocument/ExportESignWithPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (signatureFormat !== undefined) {
                localVarQueryParameter['signatureFormat'] = signatureFormat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentGetCheckUniqueAttributes: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getLayoutDocumentGetCheckUniqueAttributes', 'documentId', documentId)
            const localVarPath = `/LayoutDocument/GetCheckUniqueAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get signature information
         * @param {string} documentId 
         * @param {string} signaturePartId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentGetSignatureInfo: async (documentId: string, signaturePartId: string, signatureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getLayoutDocumentGetSignatureInfo', 'documentId', documentId)
            // verify required parameter 'signaturePartId' is not null or undefined
            assertParamExists('getLayoutDocumentGetSignatureInfo', 'signaturePartId', signaturePartId)
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('getLayoutDocumentGetSignatureInfo', 'signatureId', signatureId)
            const localVarPath = `/LayoutDocument/GetSignatureInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (signaturePartId !== undefined) {
                localVarQueryParameter['signaturePartId'] = signaturePartId;
            }

            if (signatureId !== undefined) {
                localVarQueryParameter['signatureId'] = signatureId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentCheckUniqueAttributes: async (uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uniqueAttributeValues' is not null or undefined
            assertParamExists('postApiLayoutDocumentCheckUniqueAttributes', 'uniqueAttributeValues', uniqueAttributeValues)
            const localVarPath = `/api/LayoutDocument/CheckUniqueAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uniqueAttributeValues, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downloads signature byte array
         * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentDownloadSignature: async (request: DocsVisionLayoutWebClientModelsSignatureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutDocumentDownloadSignature', 'request', request)
            const localVarPath = `/api/LayoutDocument/DownloadSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate number and optionally save it to the card
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentGenerateNumber: async (request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutDocumentGenerateNumber', 'request', request)
            const localVarPath = `/api/LayoutDocument/GenerateNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get signature information
         * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentGetAcknowledgemenList: async (request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutDocumentGetAcknowledgemenList', 'request', request)
            const localVarPath = `/api/LayoutDocument/GetAcknowledgemenList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Release document number
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentReleaseNumber: async (request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutDocumentReleaseNumber', 'request', request)
            const localVarPath = `/api/LayoutDocument/ReleaseNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Runs acquaintance business process for specified employees
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentSendForAcquaintance: async (request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutDocumentSendForAcquaintance', 'request', request)
            const localVarPath = `/api/LayoutDocument/SendForAcquaintance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentCheckUniqueAttributes: async (uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uniqueAttributeValues' is not null or undefined
            assertParamExists('postLayoutDocumentCheckUniqueAttributes', 'uniqueAttributeValues', uniqueAttributeValues)
            const localVarPath = `/LayoutDocument/CheckUniqueAttributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uniqueAttributeValues, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downloads signature byte array
         * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentDownloadSignature: async (request: DocsVisionLayoutWebClientModelsSignatureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutDocumentDownloadSignature', 'request', request)
            const localVarPath = `/LayoutDocument/DownloadSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate number and optionally save it to the card
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentGenerateNumber: async (request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutDocumentGenerateNumber', 'request', request)
            const localVarPath = `/LayoutDocument/GenerateNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get signature information
         * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentGetAcknowledgemenList: async (request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutDocumentGetAcknowledgemenList', 'request', request)
            const localVarPath = `/LayoutDocument/GetAcknowledgemenList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Release document number
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentReleaseNumber: async (request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutDocumentReleaseNumber', 'request', request)
            const localVarPath = `/LayoutDocument/ReleaseNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Runs acquaintance business process for specified employees
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentSendForAcquaintance: async (request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutDocumentSendForAcquaintance', 'request', request)
            const localVarPath = `/LayoutDocument/SendForAcquaintance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutDocumentApi - functional programming interface
 * @export
 */
export const LayoutDocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutDocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Exports zip-archive with electronic signature files
         * @param {string} cardId Document card identifier
         * @param {GetApiLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutDocumentExportESign(cardId: string, signatureFormat: GetApiLayoutDocumentExportESignSignatureFormatEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutDocumentExportESign(cardId, signatureFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
         * @param {string} cardId Document card identifier
         * @param {GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutDocumentExportESignWithPowerOfAttorney(cardId: string, signatureFormat: GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutDocumentExportESignWithPowerOfAttorney(cardId, signatureFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutDocumentGetCheckUniqueAttributes(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutDocumentGetCheckUniqueAttributes(documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get signature information
         * @param {string} documentId 
         * @param {string} signaturePartId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutDocumentGetSignatureInfo(documentId: string, signaturePartId: string, signatureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutDocumentGetSignatureInfo(documentId, signaturePartId, signatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} documentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutDocumentId(documentId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutDocumentId(documentId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files
         * @param {string} cardId Document card identifier
         * @param {GetLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutDocumentExportESign(cardId: string, signatureFormat: GetLayoutDocumentExportESignSignatureFormatEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutDocumentExportESign(cardId, signatureFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
         * @param {string} cardId Document card identifier
         * @param {GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutDocumentExportESignWithPowerOfAttorney(cardId: string, signatureFormat: GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutDocumentExportESignWithPowerOfAttorney(cardId, signatureFormat, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutDocumentGetCheckUniqueAttributes(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutDocumentGetCheckUniqueAttributes(documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get signature information
         * @param {string} documentId 
         * @param {string} signaturePartId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutDocumentGetSignatureInfo(documentId: string, signaturePartId: string, signatureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutDocumentGetSignatureInfo(documentId, signaturePartId, signatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Downloads signature byte array
         * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDocumentDownloadSignature(request: DocsVisionLayoutWebClientModelsSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDocumentDownloadSignature(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate number and optionally save it to the card
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDocumentGenerateNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDocumentGenerateNumber(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get signature information
         * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDocumentGetAcknowledgemenList(request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDocumentGetAcknowledgemenList(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Release document number
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDocumentReleaseNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDocumentReleaseNumber(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Runs acquaintance business process for specified employees
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutDocumentSendForAcquaintance(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutDocumentSendForAcquaintance(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Downloads signature byte array
         * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDocumentDownloadSignature(request: DocsVisionLayoutWebClientModelsSignatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDocumentDownloadSignature(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate number and optionally save it to the card
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDocumentGenerateNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDocumentGenerateNumber(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get signature information
         * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDocumentGetAcknowledgemenList(request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDocumentGetAcknowledgemenList(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Release document number
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDocumentReleaseNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDocumentReleaseNumber(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Runs acquaintance business process for specified employees
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutDocumentSendForAcquaintance(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutDocumentSendForAcquaintance(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutDocumentApi - factory interface
 * @export
 */
export const LayoutDocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutDocumentApiFp(configuration)
    return {
        /**
         * 
         * @summary Exports zip-archive with electronic signature files
         * @param {string} cardId Document card identifier
         * @param {GetApiLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentExportESign(cardId: string, signatureFormat: GetApiLayoutDocumentExportESignSignatureFormatEnum, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutDocumentExportESign(cardId, signatureFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
         * @param {string} cardId Document card identifier
         * @param {GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentExportESignWithPowerOfAttorney(cardId: string, signatureFormat: GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutDocumentExportESignWithPowerOfAttorney(cardId, signatureFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentGetCheckUniqueAttributes(documentId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute> {
            return localVarFp.getApiLayoutDocumentGetCheckUniqueAttributes(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get signature information
         * @param {string} documentId 
         * @param {string} signaturePartId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentGetSignatureInfo(documentId: string, signaturePartId: string, signatureId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel> {
            return localVarFp.getApiLayoutDocumentGetSignatureInfo(documentId, signaturePartId, signatureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} documentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutDocumentId(documentId: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute> {
            return localVarFp.getApiLayoutDocumentId(documentId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files
         * @param {string} cardId Document card identifier
         * @param {GetLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentExportESign(cardId: string, signatureFormat: GetLayoutDocumentExportESignSignatureFormatEnum, options?: any): AxiosPromise<object> {
            return localVarFp.getLayoutDocumentExportESign(cardId, signatureFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
         * @param {string} cardId Document card identifier
         * @param {GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentExportESignWithPowerOfAttorney(cardId: string, signatureFormat: GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options?: any): AxiosPromise<object> {
            return localVarFp.getLayoutDocumentExportESignWithPowerOfAttorney(cardId, signatureFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentGetCheckUniqueAttributes(documentId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttribute> {
            return localVarFp.getLayoutDocumentGetCheckUniqueAttributes(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get signature information
         * @param {string} documentId 
         * @param {string} signaturePartId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutDocumentGetSignatureInfo(documentId: string, signaturePartId: string, signatureId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureInfoModel> {
            return localVarFp.getLayoutDocumentGetSignatureInfo(documentId, signaturePartId, signatureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard> {
            return localVarFp.postApiLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Downloads signature byte array
         * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentDownloadSignature(request: DocsVisionLayoutWebClientModelsSignatureRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutDocumentDownloadSignature(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate number and optionally save it to the card
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentGenerateNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo> {
            return localVarFp.postApiLayoutDocumentGenerateNumber(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get signature information
         * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentGetAcknowledgemenList(request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutDocumentGetAcknowledgemenList(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Release document number
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentReleaseNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutDocumentReleaseNumber(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Runs acquaintance business process for specified employees
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutDocumentSendForAcquaintance(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutDocumentSendForAcquaintance(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericIListDocsVisionBackOfficeWebClientModelsUniqueAttributeCard> {
            return localVarFp.postLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Downloads signature byte array
         * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentDownloadSignature(request: DocsVisionLayoutWebClientModelsSignatureRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postLayoutDocumentDownloadSignature(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate number and optionally save it to the card
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentGenerateNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientNumeratorNumberInfo> {
            return localVarFp.postLayoutDocumentGenerateNumber(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get signature information
         * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentGetAcknowledgemenList(request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options?: any): AxiosPromise<object> {
            return localVarFp.postLayoutDocumentGetAcknowledgemenList(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Release document number
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentReleaseNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutDocumentReleaseNumber(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Runs acquaintance business process for specified employees
         * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutDocumentSendForAcquaintance(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutDocumentSendForAcquaintance(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutDocumentApi - object-oriented interface
 * @export
 * @class LayoutDocumentApi
 * @extends {BaseAPI}
 */
export class LayoutDocumentApi extends BaseAPI {
    /**
     * 
     * @summary Exports zip-archive with electronic signature files
     * @param {string} cardId Document card identifier
     * @param {GetApiLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getApiLayoutDocumentExportESign(cardId: string, signatureFormat: GetApiLayoutDocumentExportESignSignatureFormatEnum, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getApiLayoutDocumentExportESign(cardId, signatureFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
     * @param {string} cardId Document card identifier
     * @param {GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getApiLayoutDocumentExportESignWithPowerOfAttorney(cardId: string, signatureFormat: GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getApiLayoutDocumentExportESignWithPowerOfAttorney(cardId, signatureFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getApiLayoutDocumentGetCheckUniqueAttributes(documentId: string, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getApiLayoutDocumentGetCheckUniqueAttributes(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get signature information
     * @param {string} documentId 
     * @param {string} signaturePartId 
     * @param {string} signatureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getApiLayoutDocumentGetSignatureInfo(documentId: string, signaturePartId: string, signatureId: string, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getApiLayoutDocumentGetSignatureInfo(documentId, signaturePartId, signatureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} documentId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getApiLayoutDocumentId(documentId: string, id: string, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getApiLayoutDocumentId(documentId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Exports zip-archive with electronic signature files
     * @param {string} cardId Document card identifier
     * @param {GetLayoutDocumentExportESignSignatureFormatEnum} signatureFormat Signature export format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getLayoutDocumentExportESign(cardId: string, signatureFormat: GetLayoutDocumentExportESignSignatureFormatEnum, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getLayoutDocumentExportESign(cardId, signatureFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Exports zip-archive with electronic signature files and powers of attorney (with signatures if exists)
     * @param {string} cardId Document card identifier
     * @param {GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum} signatureFormat Signature export format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getLayoutDocumentExportESignWithPowerOfAttorney(cardId: string, signatureFormat: GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getLayoutDocumentExportESignWithPowerOfAttorney(cardId, signatureFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getLayoutDocumentGetCheckUniqueAttributes(documentId: string, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getLayoutDocumentGetCheckUniqueAttributes(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get signature information
     * @param {string} documentId 
     * @param {string} signaturePartId 
     * @param {string} signatureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public getLayoutDocumentGetSignatureInfo(documentId: string, signaturePartId: string, signatureId: string, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).getLayoutDocumentGetSignatureInfo(documentId, signaturePartId, signatureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postApiLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postApiLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Downloads signature byte array
     * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postApiLayoutDocumentDownloadSignature(request: DocsVisionLayoutWebClientModelsSignatureRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postApiLayoutDocumentDownloadSignature(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate number and optionally save it to the card
     * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postApiLayoutDocumentGenerateNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postApiLayoutDocumentGenerateNumber(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get signature information
     * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postApiLayoutDocumentGetAcknowledgemenList(request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postApiLayoutDocumentGetAcknowledgemenList(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Release document number
     * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postApiLayoutDocumentReleaseNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postApiLayoutDocumentReleaseNumber(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Runs acquaintance business process for specified employees
     * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postApiLayoutDocumentSendForAcquaintance(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postApiLayoutDocumentSendForAcquaintance(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList} uniqueAttributeValues 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues: DocsVisionBackOfficeWebClientModelsUniqueAttributesValuesList, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postLayoutDocumentCheckUniqueAttributes(uniqueAttributeValues, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Downloads signature byte array
     * @param {DocsVisionLayoutWebClientModelsSignatureRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postLayoutDocumentDownloadSignature(request: DocsVisionLayoutWebClientModelsSignatureRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postLayoutDocumentDownloadSignature(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate number and optionally save it to the card
     * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest} request Number generation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postLayoutDocumentGenerateNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsGenerateNumberRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postLayoutDocumentGenerateNumber(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get signature information
     * @param {DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postLayoutDocumentGetAcknowledgemenList(request: DocsVisionLayoutWebClientModelsGetAcknowledgemenListRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postLayoutDocumentGetAcknowledgemenList(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Release document number
     * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postLayoutDocumentReleaseNumber(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsReleaseNumberRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postLayoutDocumentReleaseNumber(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Runs acquaintance business process for specified employees
     * @param {DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutDocumentApi
     */
    public postLayoutDocumentSendForAcquaintance(request: DocsVisionWebClientControllersLayoutDocumentControllerModelsSendForAcquaintanceRequest, options?: AxiosRequestConfig) {
        return LayoutDocumentApiFp(this.configuration).postLayoutDocumentSendForAcquaintance(request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiLayoutDocumentExportESignSignatureFormatEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetApiLayoutDocumentExportESignSignatureFormatEnum = typeof GetApiLayoutDocumentExportESignSignatureFormatEnum[keyof typeof GetApiLayoutDocumentExportESignSignatureFormatEnum];
/**
 * @export
 */
export const GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum = typeof GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum[keyof typeof GetApiLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum];
/**
 * @export
 */
export const GetLayoutDocumentExportESignSignatureFormatEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetLayoutDocumentExportESignSignatureFormatEnum = typeof GetLayoutDocumentExportESignSignatureFormatEnum[keyof typeof GetLayoutDocumentExportESignSignatureFormatEnum];
/**
 * @export
 */
export const GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum = typeof GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum[keyof typeof GetLayoutDocumentExportESignWithPowerOfAttorneySignatureFormatEnum];


/**
 * LayoutFileApi - axios parameter creator
 * @export
 */
export const LayoutFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutFileLockTaskFile: async (ownerCardId: string, fileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerCardId' is not null or undefined
            assertParamExists('getApiLayoutFileLockTaskFile', 'ownerCardId', ownerCardId)
            // verify required parameter 'fileCardId' is not null or undefined
            assertParamExists('getApiLayoutFileLockTaskFile', 'fileCardId', fileCardId)
            const localVarPath = `/api/LayoutFile/LockTaskFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownerCardId !== undefined) {
                localVarQueryParameter['ownerCardId'] = ownerCardId;
            }

            if (fileCardId !== undefined) {
                localVarQueryParameter['fileCardId'] = fileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutFileUnlockTaskFile: async (ownerCardId: string, fileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerCardId' is not null or undefined
            assertParamExists('getApiLayoutFileUnlockTaskFile', 'ownerCardId', ownerCardId)
            // verify required parameter 'fileCardId' is not null or undefined
            assertParamExists('getApiLayoutFileUnlockTaskFile', 'fileCardId', fileCardId)
            const localVarPath = `/api/LayoutFile/UnlockTaskFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownerCardId !== undefined) {
                localVarQueryParameter['ownerCardId'] = ownerCardId;
            }

            if (fileCardId !== undefined) {
                localVarQueryParameter['fileCardId'] = fileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLayoutFileLockTaskFile: async (ownerCardId: string, fileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerCardId' is not null or undefined
            assertParamExists('getLayoutFileLockTaskFile', 'ownerCardId', ownerCardId)
            // verify required parameter 'fileCardId' is not null or undefined
            assertParamExists('getLayoutFileLockTaskFile', 'fileCardId', fileCardId)
            const localVarPath = `/LayoutFile/LockTaskFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownerCardId !== undefined) {
                localVarQueryParameter['ownerCardId'] = ownerCardId;
            }

            if (fileCardId !== undefined) {
                localVarQueryParameter['fileCardId'] = fileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLayoutFileUnlockTaskFile: async (ownerCardId: string, fileCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerCardId' is not null or undefined
            assertParamExists('getLayoutFileUnlockTaskFile', 'ownerCardId', ownerCardId)
            // verify required parameter 'fileCardId' is not null or undefined
            assertParamExists('getLayoutFileUnlockTaskFile', 'fileCardId', fileCardId)
            const localVarPath = `/LayoutFile/UnlockTaskFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownerCardId !== undefined) {
                localVarQueryParameter['ownerCardId'] = ownerCardId;
            }

            if (fileCardId !== undefined) {
                localVarQueryParameter['fileCardId'] = fileCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/AddOrUpdateComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileAddOrUpdateComment: async (versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionedFileCommentCreateModel' is not null or undefined
            assertParamExists('postApiLayoutFileAddOrUpdateComment', 'versionedFileCommentCreateModel', versionedFileCommentCreateModel)
            const localVarPath = `/api/LayoutFile/AddOrUpdateComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(versionedFileCommentCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/ChangeFileType
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileChangeFileType: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileChangeFileType', 'request', request)
            const localVarPath = `/api/LayoutFile/ChangeFileType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileDeleteComment: async (versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionedFileCommentDeleteModel' is not null or undefined
            assertParamExists('postApiLayoutFileDeleteComment', 'versionedFileCommentDeleteModel', versionedFileCommentDeleteModel)
            const localVarPath = `/api/LayoutFile/DeleteComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(versionedFileCommentDeleteModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileDeleteFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileDeleteFile', 'request', request)
            const localVarPath = `/api/LayoutFile/DeleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
         * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetCardQuotes: async (request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileGetCardQuotes', 'request', request)
            const localVarPath = `/api/LayoutFile/GetCardQuotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetComments
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetComments: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileGetComments', 'request', request)
            const localVarPath = `/api/LayoutFile/GetComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
         * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetFileQuotes: async (request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileGetFileQuotes', 'request', request)
            const localVarPath = `/api/LayoutFile/GetFileQuotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFiles
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetFiles: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileGetFiles', 'request', request)
            const localVarPath = `/api/LayoutFile/GetFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetVersions
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetVersions: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileGetVersions', 'request', request)
            const localVarPath = `/api/LayoutFile/GetVersions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/LockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileLockFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileLockFile', 'request', request)
            const localVarPath = `/api/LayoutFile/LockFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/RenameFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileRenameFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileRenameFile', 'request', request)
            const localVarPath = `/api/LayoutFile/RenameFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/UnlockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileUnlockFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFileUnlockFile', 'request', request)
            const localVarPath = `/api/LayoutFile/UnlockFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/AddOrUpdateComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileAddOrUpdateComment: async (versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionedFileCommentCreateModel' is not null or undefined
            assertParamExists('postLayoutFileAddOrUpdateComment', 'versionedFileCommentCreateModel', versionedFileCommentCreateModel)
            const localVarPath = `/LayoutFile/AddOrUpdateComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(versionedFileCommentCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/ChangeFileType
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileChangeFileType: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileChangeFileType', 'request', request)
            const localVarPath = `/LayoutFile/ChangeFileType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileDeleteComment: async (versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'versionedFileCommentDeleteModel' is not null or undefined
            assertParamExists('postLayoutFileDeleteComment', 'versionedFileCommentDeleteModel', versionedFileCommentDeleteModel)
            const localVarPath = `/LayoutFile/DeleteComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(versionedFileCommentDeleteModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileDeleteFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileDeleteFile', 'request', request)
            const localVarPath = `/LayoutFile/DeleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
         * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetCardQuotes: async (request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileGetCardQuotes', 'request', request)
            const localVarPath = `/LayoutFile/GetCardQuotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetComments
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetComments: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileGetComments', 'request', request)
            const localVarPath = `/LayoutFile/GetComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
         * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetFileQuotes: async (request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileGetFileQuotes', 'request', request)
            const localVarPath = `/LayoutFile/GetFileQuotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFiles
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetFiles: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileGetFiles', 'request', request)
            const localVarPath = `/LayoutFile/GetFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetVersions
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetVersions: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileGetVersions', 'request', request)
            const localVarPath = `/LayoutFile/GetVersions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/LockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileLockFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileLockFile', 'request', request)
            const localVarPath = `/LayoutFile/LockFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFile/RenameFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileRenameFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileRenameFile', 'request', request)
            const localVarPath = `/LayoutFile/RenameFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFile/UnlockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileUnlockFile: async (request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFileUnlockFile', 'request', request)
            const localVarPath = `/LayoutFile/UnlockFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutFileApi - functional programming interface
 * @export
 */
export const LayoutFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutFileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getApiLayoutFileLockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutFileLockTaskFile(ownerCardId, fileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getApiLayoutFileUnlockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutFileUnlockTaskFile(ownerCardId, fileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getLayoutFileLockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutFileLockTaskFile(ownerCardId, fileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getLayoutFileUnlockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutFileUnlockTaskFile(ownerCardId, fileCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/AddOrUpdateComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/ChangeFileType
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileChangeFileType(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileChangeFileType(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileDeleteComment(versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileDeleteComment(versionedFileCommentDeleteModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileDeleteFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileDeleteFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
         * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileGetCardQuotes(request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileGetCardQuotes(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetComments
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileGetComments(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileGetComments(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
         * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileGetFileQuotes(request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileGetFileQuotes(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFiles
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileGetFiles(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileGetFiles(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetVersions
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileGetVersions(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileGetVersions(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/LockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileLockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileLockFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/RenameFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileRenameFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileRenameFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/UnlockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileUnlockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileUnlockFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/AddOrUpdateComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/ChangeFileType
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileChangeFileType(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileChangeFileType(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileDeleteComment(versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileDeleteComment(versionedFileCommentDeleteModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileDeleteFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileDeleteFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
         * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileGetCardQuotes(request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileGetCardQuotes(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetComments
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileGetComments(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileGetComments(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
         * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileGetFileQuotes(request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileGetFileQuotes(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFiles
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileGetFiles(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileGetFiles(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetVersions
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileGetVersions(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileGetVersions(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/LockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileLockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileLockFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFile/RenameFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileRenameFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileRenameFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFile/UnlockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFileUnlockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFileUnlockFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutFileApi - factory interface
 * @export
 */
export const LayoutFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutFileApiFp(configuration)
    return {
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutFileLockTaskFile(ownerCardId: string, fileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutFileLockTaskFile(ownerCardId, fileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutFileUnlockTaskFile(ownerCardId: string, fileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutFileUnlockTaskFile(ownerCardId, fileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLayoutFileLockTaskFile(ownerCardId: string, fileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getLayoutFileLockTaskFile(ownerCardId, fileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Will be remake after task with layout
         * @param {string} ownerCardId Owner card id
         * @param {string} fileCardId File card id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLayoutFileUnlockTaskFile(ownerCardId: string, fileCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getLayoutFileUnlockTaskFile(ownerCardId, fileCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/AddOrUpdateComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/ChangeFileType
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileChangeFileType(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileChangeFileType(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileDeleteComment(versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutFileDeleteComment(versionedFileCommentDeleteModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileDeleteFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileDeleteFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
         * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetCardQuotes(request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileGetCardQuotes(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetComments
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetComments(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel> {
            return localVarFp.postApiLayoutFileGetComments(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
         * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetFileQuotes(request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileGetFileQuotes(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFiles
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetFiles(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileGetFiles(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetVersions
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileGetVersions(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileGetVersions(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/LockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileLockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileLockFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/RenameFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileRenameFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutFileRenameFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/UnlockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileUnlockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFileUnlockFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/AddOrUpdateComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/ChangeFileType
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileChangeFileType(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileChangeFileType(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteComment
         * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileDeleteComment(versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutFileDeleteComment(versionedFileCommentDeleteModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/DeleteFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileDeleteFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileDeleteFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
         * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetCardQuotes(request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesCardQuotesDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileGetCardQuotes(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetComments
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetComments(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientFileListVersionedFileCommentListModel> {
            return localVarFp.postLayoutFileGetComments(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
         * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetFileQuotes(request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsQuotesFileQuotesDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileGetFileQuotes(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetFiles
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetFiles(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelBaseDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileGetFiles(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/GetVersions
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileGetVersions(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListVersionsDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileGetVersions(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/LockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileLockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileLockFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFile/RenameFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileRenameFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutFileRenameFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFile/UnlockFile
         * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFileUnlockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFileUnlockFile(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutFileApi - object-oriented interface
 * @export
 * @class LayoutFileApi
 * @extends {BaseAPI}
 */
export class LayoutFileApi extends BaseAPI {
    /**
     * 
     * @summary Will be remake after task with layout
     * @param {string} ownerCardId Owner card id
     * @param {string} fileCardId File card id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public getApiLayoutFileLockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).getApiLayoutFileLockTaskFile(ownerCardId, fileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Will be remake after task with layout
     * @param {string} ownerCardId Owner card id
     * @param {string} fileCardId File card id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public getApiLayoutFileUnlockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).getApiLayoutFileUnlockTaskFile(ownerCardId, fileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Will be remake after task with layout
     * @param {string} ownerCardId Owner card id
     * @param {string} fileCardId File card id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public getLayoutFileLockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).getLayoutFileLockTaskFile(ownerCardId, fileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Will be remake after task with layout
     * @param {string} ownerCardId Owner card id
     * @param {string} fileCardId File card id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public getLayoutFileUnlockTaskFile(ownerCardId: string, fileCardId: string, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).getLayoutFileUnlockTaskFile(ownerCardId, fileCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/AddOrUpdateComment
     * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/ChangeFileType
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileChangeFileType(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileChangeFileType(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/DeleteComment
     * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileDeleteComment(versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileDeleteComment(versionedFileCommentDeleteModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/DeleteFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileDeleteFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileDeleteFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
     * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileGetCardQuotes(request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileGetCardQuotes(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetComments
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileGetComments(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileGetComments(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
     * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileGetFileQuotes(request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileGetFileQuotes(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetFiles
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileGetFiles(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileGetFiles(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetVersions
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileGetVersions(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileGetVersions(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/LockFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileLockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileLockFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/RenameFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileRenameFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileRenameFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/UnlockFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postApiLayoutFileUnlockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postApiLayoutFileUnlockFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/AddOrUpdateComment
     * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel} versionedFileCommentCreateModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel: DocsVisionLayoutWebClientModelsVersionedFileCommentCreateModel, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileAddOrUpdateComment(versionedFileCommentCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/ChangeFileType
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileChangeFileType(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileChangeFileType(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/DeleteComment
     * @param {DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel} versionedFileCommentDeleteModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileDeleteComment(versionedFileCommentDeleteModel: DocsVisionLayoutWebClientModelsVersionedFileCommentDeleteModel, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileDeleteComment(versionedFileCommentDeleteModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/DeleteFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileDeleteFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileDeleteFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetCardQuotes  Get quotes for card
     * @param {DocsVisionWebClientModelsQuotesCardQuotesRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileGetCardQuotes(request: DocsVisionWebClientModelsQuotesCardQuotesRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileGetCardQuotes(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetComments
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileGetComments(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetCommentsRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileGetComments(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetFileQuotes  Get quotes for file
     * @param {DocsVisionWebClientModelsQuotesFileQuotesRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileGetFileQuotes(request: DocsVisionWebClientModelsQuotesFileQuotesRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileGetFileQuotes(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetFiles
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileGetFiles(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetFilesRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileGetFiles(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/GetVersions
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileGetVersions(request: DocsVisionWebClientControllersLayoutFileControllerModelsGetVersionsRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileGetVersions(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/LockFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileLockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileLockFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFile/RenameFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileRenameFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsRenameFileNameRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileRenameFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFile/UnlockFile
     * @param {DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApi
     */
    public postLayoutFileUnlockFile(request: DocsVisionWebClientControllersLayoutFileControllerModelsCommmonFileRequest, options?: AxiosRequestConfig) {
        return LayoutFileApiFp(this.configuration).postLayoutFileUnlockFile(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutFileApiApi - axios parameter creator
 * @export
 */
export const LayoutFileApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiAddFiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutFileApi/AddFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /DocumentCardApi/AddNewMainFileVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiAddNewMainFileVersion: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutFileApi/AddNewMainFileVersion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddScannedImages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiAddScannedImages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutFileApi/AddScannedImages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutFileApi/DeleteFiles
         * @param {Array<string>} fileIdList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiDeleteFiles: async (fileIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileIdList' is not null or undefined
            assertParamExists('postApiLayoutFileApiDeleteFiles', 'fileIdList', fileIdList)
            const localVarPath = `/api/LayoutFileApi/DeleteFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileIdList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/GetSoonExpireCertificatesByIDs
         * @param {Array<string>} fileIdList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiGetSoonExpireCertificatesByIDs: async (fileIdList: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileIdList' is not null or undefined
            assertParamExists('postApiLayoutFileApiGetSoonExpireCertificatesByIDs', 'fileIdList', fileIdList)
            const localVarPath = `/api/LayoutFileApi/GetSoonExpireCertificatesByIDs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fileIdList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/GetSoonExpireCertificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiGetSoonExpireCertificatesFromFiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutFileApi/GetSoonExpireCertificatesFromFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {string} id 
         * @param {string} [ownerCardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiId: async (id: string, ownerCardId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiLayoutFileApiId', 'id', id)
            const localVarPath = `/api/LayoutFileApi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownerCardId !== undefined) {
                localVarQueryParameter['ownerCardId'] = ownerCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiImportESign: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutFileApi/ImportESign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {string} [ownerCardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiUploadFiles: async (ownerCardId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutFileApi/UploadFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ownerCardId !== undefined) {
                localVarQueryParameter['ownerCardId'] = ownerCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutFileApiApi - functional programming interface
 * @export
 */
export const LayoutFileApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutFileApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiAddFiles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiAddFiles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /DocumentCardApi/AddNewMainFileVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiAddNewMainFileVersion(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiAddNewMainFileVersion(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddScannedImages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiAddScannedImages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiAddScannedImages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutFileApi/DeleteFiles
         * @param {Array<string>} fileIdList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiDeleteFiles(fileIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiDeleteFiles(fileIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/GetSoonExpireCertificatesByIDs
         * @param {Array<string>} fileIdList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiGetSoonExpireCertificatesByIDs(fileIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiGetSoonExpireCertificatesByIDs(fileIdList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/GetSoonExpireCertificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiGetSoonExpireCertificatesFromFiles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiGetSoonExpireCertificatesFromFiles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {string} id 
         * @param {string} [ownerCardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiId(id: string, ownerCardId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiId(id, ownerCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiImportESign(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiImportESign(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {string} [ownerCardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFileApiUploadFiles(ownerCardId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFileApiUploadFiles(ownerCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutFileApiApi - factory interface
 * @export
 */
export const LayoutFileApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutFileApiApiFp(configuration)
    return {
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiAddFiles(options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutFileApiAddFiles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /DocumentCardApi/AddNewMainFileVersion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiAddNewMainFileVersion(options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutFileApiAddNewMainFileVersion(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddScannedImages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiAddScannedImages(options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutFileApiAddScannedImages(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutFileApi/DeleteFiles
         * @param {Array<string>} fileIdList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiDeleteFiles(fileIdList: Array<string>, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutFileApiDeleteFiles(fileIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/GetSoonExpireCertificatesByIDs
         * @param {Array<string>} fileIdList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiGetSoonExpireCertificatesByIDs(fileIdList: Array<string>, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericDictionary2SystemGuidSystemDateTime> {
            return localVarFp.postApiLayoutFileApiGetSoonExpireCertificatesByIDs(fileIdList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/GetSoonExpireCertificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiGetSoonExpireCertificatesFromFiles(options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutFileApiGetSoonExpireCertificatesFromFiles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {string} id 
         * @param {string} [ownerCardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiId(id: string, ownerCardId?: string, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutFileApiId(id, ownerCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiImportESign(options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutFileApiImportESign(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutFileApi/AddFiles
         * @param {string} [ownerCardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFileApiUploadFiles(ownerCardId?: string, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutFileApiUploadFiles(ownerCardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutFileApiApi - object-oriented interface
 * @export
 * @class LayoutFileApiApi
 * @extends {BaseAPI}
 */
export class LayoutFileApiApi extends BaseAPI {
    /**
     * 
     * @summary POST: /LayoutFileApi/AddFiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiAddFiles(options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiAddFiles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /DocumentCardApi/AddNewMainFileVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiAddNewMainFileVersion(options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiAddNewMainFileVersion(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFileApi/AddScannedImages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiAddScannedImages(options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiAddScannedImages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutFileApi/DeleteFiles
     * @param {Array<string>} fileIdList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiDeleteFiles(fileIdList: Array<string>, options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiDeleteFiles(fileIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFileApi/GetSoonExpireCertificatesByIDs
     * @param {Array<string>} fileIdList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiGetSoonExpireCertificatesByIDs(fileIdList: Array<string>, options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiGetSoonExpireCertificatesByIDs(fileIdList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFileApi/GetSoonExpireCertificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiGetSoonExpireCertificatesFromFiles(options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiGetSoonExpireCertificatesFromFiles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFileApi/AddFiles
     * @param {string} id 
     * @param {string} [ownerCardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiId(id: string, ownerCardId?: string, options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiId(id, ownerCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiImportESign(options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiImportESign(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutFileApi/AddFiles
     * @param {string} [ownerCardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFileApiApi
     */
    public postApiLayoutFileApiUploadFiles(ownerCardId?: string, options?: AxiosRequestConfig) {
        return LayoutFileApiApiFp(this.configuration).postApiLayoutFileApiUploadFiles(ownerCardId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutFolderApi - axios parameter creator
 * @export
 */
export const LayoutFolderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks if a folder can be deleted
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderCanDeleteFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiLayoutFolderCanDeleteFolder', 'folderId', folderId)
            const localVarPath = `/api/LayoutFolder/CanDeleteFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderDeleteFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiLayoutFolderDeleteFolder', 'folderId', folderId)
            const localVarPath = `/api/LayoutFolder/DeleteFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about folder.
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderGetFolderInfoModel: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiLayoutFolderGetFolderInfoModel', 'folderId', folderId)
            const localVarPath = `/api/LayoutFolder/GetFolderInfoModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restores folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderRestoreFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiLayoutFolderRestoreFolder', 'folderId', folderId)
            const localVarPath = `/api/LayoutFolder/RestoreFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if a folder can be deleted
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderCanDeleteFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getLayoutFolderCanDeleteFolder', 'folderId', folderId)
            const localVarPath = `/LayoutFolder/CanDeleteFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderDeleteFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getLayoutFolderDeleteFolder', 'folderId', folderId)
            const localVarPath = `/LayoutFolder/DeleteFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about folder.
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderGetFolderInfoModel: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getLayoutFolderGetFolderInfoModel', 'folderId', folderId)
            const localVarPath = `/LayoutFolder/GetFolderInfoModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restores folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderRestoreFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getLayoutFolderRestoreFolder', 'folderId', folderId)
            const localVarPath = `/LayoutFolder/RestoreFolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check folder settings, to determine if specified card can be created in this folder
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderCheckFolderForAvailableCardKind: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderCheckFolderForAvailableCardKind', 'request', request)
            const localVarPath = `/api/LayoutFolder/CheckFolderForAvailableCardKind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates subfolder and returns new folder identifier
         * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderCreateSubfolder: async (request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderCreateSubfolder', 'request', request)
            const localVarPath = `/api/LayoutFolder/CreateSubfolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detach user folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderDetachUserFolders: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderDetachUserFolders', 'request', request)
            const localVarPath = `/api/LayoutFolder/DetachUserFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetFolderInfo: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderGetFolderInfo', 'request', request)
            const localVarPath = `/api/LayoutFolder/GetFolderInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetFolderInfoWithParents: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderGetFolderInfoWithParents', 'request', request)
            const localVarPath = `/api/LayoutFolder/GetFolderInfoWithParents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetFolders: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderGetFolders', 'request', request)
            const localVarPath = `/api/LayoutFolder/GetFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetUserFoldersTreeData: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderGetUserFoldersTreeData', 'request', request)
            const localVarPath = `/api/LayoutFolder/GetUserFoldersTreeData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh folders settings cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderRefreshFolders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutFolder/RefreshFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets folder settings
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderSetFolderSettings: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutFolderSetFolderSettings', 'request', request)
            const localVarPath = `/api/LayoutFolder/SetFolderSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check folder settings, to determine if specified card can be created in this folder
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderCheckFolderForAvailableCardKind: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderCheckFolderForAvailableCardKind', 'request', request)
            const localVarPath = `/LayoutFolder/CheckFolderForAvailableCardKind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates subfolder and returns new folder identifier
         * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderCreateSubfolder: async (request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderCreateSubfolder', 'request', request)
            const localVarPath = `/LayoutFolder/CreateSubfolder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detach user folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderDetachUserFolders: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderDetachUserFolders', 'request', request)
            const localVarPath = `/LayoutFolder/DetachUserFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetFolderInfo: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderGetFolderInfo', 'request', request)
            const localVarPath = `/LayoutFolder/GetFolderInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetFolderInfoWithParents: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderGetFolderInfoWithParents', 'request', request)
            const localVarPath = `/LayoutFolder/GetFolderInfoWithParents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetFolders: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderGetFolders', 'request', request)
            const localVarPath = `/LayoutFolder/GetFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetUserFoldersTreeData: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderGetUserFoldersTreeData', 'request', request)
            const localVarPath = `/LayoutFolder/GetUserFoldersTreeData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh folders settings cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderRefreshFolders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/LayoutFolder/RefreshFolders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets folder settings
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderSetFolderSettings: async (request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutFolderSetFolderSettings', 'request', request)
            const localVarPath = `/LayoutFolder/SetFolderSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutFolderApi - functional programming interface
 * @export
 */
export const LayoutFolderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutFolderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Checks if a folder can be deleted
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutFolderCanDeleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutFolderCanDeleteFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutFolderDeleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutFolderDeleteFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns information about folder.
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutFolderGetFolderInfoModel(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutFolderGetFolderInfoModel(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restores folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutFolderRestoreFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutFolderRestoreFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Checks if a folder can be deleted
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutFolderCanDeleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutFolderCanDeleteFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutFolderDeleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutFolderDeleteFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns information about folder.
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutFolderGetFolderInfoModel(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutFolderGetFolderInfoModel(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restores folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutFolderRestoreFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutFolderRestoreFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check folder settings, to determine if specified card can be created in this folder
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderCheckFolderForAvailableCardKind(request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderCheckFolderForAvailableCardKind(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates subfolder and returns new folder identifier
         * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderCreateSubfolder(request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderCreateSubfolder(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Detach user folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderDetachUserFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderDetachUserFolders(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderGetFolderInfo(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFoldersFolderNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderGetFolderInfo(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderGetFolderInfoWithParents(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsFolderNodeWithParents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderGetFolderInfoWithParents(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderGetFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderGetFolders(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderGetUserFoldersTreeData(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderGetUserFoldersTreeData(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh folders settings cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderRefreshFolders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderRefreshFolders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets folder settings
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutFolderSetFolderSettings(request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutFolderSetFolderSettings(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check folder settings, to determine if specified card can be created in this folder
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderCheckFolderForAvailableCardKind(request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderCheckFolderForAvailableCardKind(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates subfolder and returns new folder identifier
         * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderCreateSubfolder(request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderCreateSubfolder(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Detach user folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderDetachUserFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderDetachUserFolders(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderGetFolderInfo(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFoldersFolderNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderGetFolderInfo(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderGetFolderInfoWithParents(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsFolderNodeWithParents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderGetFolderInfoWithParents(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderGetFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderGetFolders(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderGetUserFoldersTreeData(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderGetUserFoldersTreeData(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh folders settings cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderRefreshFolders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderRefreshFolders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets folder settings
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutFolderSetFolderSettings(request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutFolderSetFolderSettings(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutFolderApi - factory interface
 * @export
 */
export const LayoutFolderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutFolderApiFp(configuration)
    return {
        /**
         * 
         * @summary Checks if a folder can be deleted
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderCanDeleteFolder(folderId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutFolderCanDeleteFolder(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderDeleteFolder(folderId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutFolderDeleteFolder(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns information about folder.
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderGetFolderInfoModel(folderId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient> {
            return localVarFp.getApiLayoutFolderGetFolderInfoModel(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restores folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutFolderRestoreFolder(folderId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutFolderRestoreFolder(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Checks if a folder can be deleted
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderCanDeleteFolder(folderId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getLayoutFolderCanDeleteFolder(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderDeleteFolder(folderId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getLayoutFolderDeleteFolder(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns information about folder.
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderGetFolderInfoModel(folderId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderInfoModelDocsVisionLayoutWebClient> {
            return localVarFp.getLayoutFolderGetFolderInfoModel(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restores folder
         * @param {string} folderId Folder identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutFolderRestoreFolder(folderId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getLayoutFolderRestoreFolder(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check folder settings, to determine if specified card can be created in this folder
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderCheckFolderForAvailableCardKind(request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFolderCheckFolderForAvailableCardKind(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates subfolder and returns new folder identifier
         * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderCreateSubfolder(request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient> {
            return localVarFp.postApiLayoutFolderCreateSubfolder(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detach user folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderDetachUserFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutFolderDetachUserFolders(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetFolderInfo(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFoldersFolderNode> {
            return localVarFp.postApiLayoutFolderGetFolderInfo(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetFolderInfoWithParents(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options?: any): AxiosPromise<DocsVisionWebClientModelsFolderNodeWithParents> {
            return localVarFp.postApiLayoutFolderGetFolderInfoWithParents(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient> {
            return localVarFp.postApiLayoutFolderGetFolders(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderGetUserFoldersTreeData(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient> {
            return localVarFp.postApiLayoutFolderGetUserFoldersTreeData(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh folders settings cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderRefreshFolders(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutFolderRefreshFolders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets folder settings
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutFolderSetFolderSettings(request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutFolderSetFolderSettings(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check folder settings, to determine if specified card can be created in this folder
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderCheckFolderForAvailableCardKind(request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsCheckResultDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFolderCheckFolderForAvailableCardKind(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates subfolder and returns new folder identifier
         * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderCreateSubfolder(request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient> {
            return localVarFp.postLayoutFolderCreateSubfolder(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detach user folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderDetachUserFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutFolderDetachUserFolders(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetFolderInfo(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFoldersFolderNode> {
            return localVarFp.postLayoutFolderGetFolderInfo(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns common information about folder.
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetFolderInfoWithParents(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options?: any): AxiosPromise<DocsVisionWebClientModelsFolderNodeWithParents> {
            return localVarFp.postLayoutFolderGetFolderInfoWithParents(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient> {
            return localVarFp.postLayoutFolderGetFolders(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user folders partial tree (only two levels deep).
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderGetUserFoldersTreeData(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionPlatformWebClientModelsFoldersFolderNodeDocsVisionPlatformWebClient> {
            return localVarFp.postLayoutFolderGetUserFoldersTreeData(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh folders settings cache
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderRefreshFolders(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutFolderRefreshFolders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets folder settings
         * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutFolderSetFolderSettings(request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFolderDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutFolderSetFolderSettings(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutFolderApi - object-oriented interface
 * @export
 * @class LayoutFolderApi
 * @extends {BaseAPI}
 */
export class LayoutFolderApi extends BaseAPI {
    /**
     * 
     * @summary Checks if a folder can be deleted
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getApiLayoutFolderCanDeleteFolder(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getApiLayoutFolderCanDeleteFolder(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes folder
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getApiLayoutFolderDeleteFolder(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getApiLayoutFolderDeleteFolder(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns information about folder.
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getApiLayoutFolderGetFolderInfoModel(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getApiLayoutFolderGetFolderInfoModel(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restores folder
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getApiLayoutFolderRestoreFolder(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getApiLayoutFolderRestoreFolder(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Checks if a folder can be deleted
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getLayoutFolderCanDeleteFolder(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getLayoutFolderCanDeleteFolder(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes folder
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getLayoutFolderDeleteFolder(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getLayoutFolderDeleteFolder(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns information about folder.
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getLayoutFolderGetFolderInfoModel(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getLayoutFolderGetFolderInfoModel(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restores folder
     * @param {string} folderId Folder identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public getLayoutFolderRestoreFolder(folderId: string, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).getLayoutFolderRestoreFolder(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check folder settings, to determine if specified card can be created in this folder
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderCheckFolderForAvailableCardKind(request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderCheckFolderForAvailableCardKind(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates subfolder and returns new folder identifier
     * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderCreateSubfolder(request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderCreateSubfolder(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detach user folder.
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderDetachUserFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderDetachUserFolders(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns common information about folder.
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderGetFolderInfo(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderGetFolderInfo(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns common information about folder.
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderGetFolderInfoWithParents(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderGetFolderInfoWithParents(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user folders partial tree (only two levels deep).
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderGetFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderGetFolders(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user folders partial tree (only two levels deep).
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderGetUserFoldersTreeData(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderGetUserFoldersTreeData(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh folders settings cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderRefreshFolders(options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderRefreshFolders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets folder settings
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postApiLayoutFolderSetFolderSettings(request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postApiLayoutFolderSetFolderSettings(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check folder settings, to determine if specified card can be created in this folder
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderCheckFolderForAvailableCardKind(request: DocsVisionWebClientControllersLayoutFolderControllerModelsCheckFolderForAvailableCardKindRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderCheckFolderForAvailableCardKind(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates subfolder and returns new folder identifier
     * @param {DocsVisionWebClientModelsCreateSubfolderRequestModel} request The {DocsVision.WebClient.Models.CreateSubfolderRequestModel} instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderCreateSubfolder(request: DocsVisionWebClientModelsCreateSubfolderRequestModel, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderCreateSubfolder(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detach user folder.
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderDetachUserFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsDetachUserFoldersRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderDetachUserFolders(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns common information about folder.
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderGetFolderInfo(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderGetFolderInfo(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns common information about folder.
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderGetFolderInfoWithParents(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFolderInfoWithParentsRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderGetFolderInfoWithParents(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user folders partial tree (only two levels deep).
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest} request request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderGetFolders(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetFoldersRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderGetFolders(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user folders partial tree (only two levels deep).
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderGetUserFoldersTreeData(request: DocsVisionWebClientControllersLayoutFolderControllerModelsGetUserFoldersTreeDataRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderGetUserFoldersTreeData(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh folders settings cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderRefreshFolders(options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderRefreshFolders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets folder settings
     * @param {DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest} request The {DocsVision.WebClient.Controllers.LayoutFolderControllerModels.SetFolderSettingsRequest} instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutFolderApi
     */
    public postLayoutFolderSetFolderSettings(request: DocsVisionWebClientControllersLayoutFolderControllerModelsSetFolderSettingsRequest, options?: AxiosRequestConfig) {
        return LayoutFolderApiFp(this.configuration).postLayoutFolderSetFolderSettings(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutHistoryApi - axios parameter creator
 * @export
 */
export const LayoutHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get history records
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutHistoryGetHistoryRecords: async (query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutHistoryGetHistoryRecords', 'query', query)
            const localVarPath = `/api/LayoutHistory/GetHistoryRecords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get history records
         * @param {string} id 
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutHistoryId: async (id: string, query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiLayoutHistoryId', 'id', id)
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutHistoryId', 'query', query)
            const localVarPath = `/api/LayoutHistory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get history records
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutHistoryGetHistoryRecords: async (query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postLayoutHistoryGetHistoryRecords', 'query', query)
            const localVarPath = `/LayoutHistory/GetHistoryRecords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutHistoryApi - functional programming interface
 * @export
 */
export const LayoutHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get history records
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutHistoryGetHistoryRecords(query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutHistoryGetHistoryRecords(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get history records
         * @param {string} id 
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutHistoryId(id: string, query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutHistoryId(id, query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get history records
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutHistoryGetHistoryRecords(query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutHistoryGetHistoryRecords(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutHistoryApi - factory interface
 * @export
 */
export const LayoutHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutHistoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Get history records
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutHistoryGetHistoryRecords(query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult> {
            return localVarFp.postApiLayoutHistoryGetHistoryRecords(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get history records
         * @param {string} id 
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutHistoryId(id: string, query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult> {
            return localVarFp.postApiLayoutHistoryId(id, query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get history records
         * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutHistoryGetHistoryRecords(query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientHistoryHistorySearchResult> {
            return localVarFp.postLayoutHistoryGetHistoryRecords(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutHistoryApi - object-oriented interface
 * @export
 * @class LayoutHistoryApi
 * @extends {BaseAPI}
 */
export class LayoutHistoryApi extends BaseAPI {
    /**
     * 
     * @summary Get history records
     * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutHistoryApi
     */
    public postApiLayoutHistoryGetHistoryRecords(query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: AxiosRequestConfig) {
        return LayoutHistoryApiFp(this.configuration).postApiLayoutHistoryGetHistoryRecords(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get history records
     * @param {string} id 
     * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutHistoryApi
     */
    public postApiLayoutHistoryId(id: string, query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: AxiosRequestConfig) {
        return LayoutHistoryApiFp(this.configuration).postApiLayoutHistoryId(id, query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get history records
     * @param {DocsVisionLayoutWebClientModelsHistorySearchQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutHistoryApi
     */
    public postLayoutHistoryGetHistoryRecords(query: DocsVisionLayoutWebClientModelsHistorySearchQuery, options?: AxiosRequestConfig) {
        return LayoutHistoryApiFp(this.configuration).postLayoutHistoryGetHistoryRecords(query, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutLinksApi - axios parameter creator
 * @export
 */
export const LayoutLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutLinksGetLinkTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutLinks/GetLinkTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns setting MainLinkTypePresets/LinkType
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutLinksGetMainLinkTypes: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getApiLayoutLinksGetMainLinkTypes', 'taskId', taskId)
            const localVarPath = `/api/LayoutLinks/GetMainLinkTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutLinksId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutLinksId', 'id', id)
            const localVarPath = `/api/LayoutLinks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutLinksGetLinkTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/LayoutLinks/GetLinkTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns setting MainLinkTypePresets/LinkType
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutLinksGetMainLinkTypes: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getLayoutLinksGetMainLinkTypes', 'taskId', taskId)
            const localVarPath = `/LayoutLinks/GetMainLinkTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddExistingCardLink
         * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksAddExistingCardLink: async (linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkParams' is not null or undefined
            assertParamExists('postApiLayoutLinksAddExistingCardLink', 'linkParams', linkParams)
            const localVarPath = `/api/LayoutLinks/AddExistingCardLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddFilesLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksAddFilesLinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutLinks/AddFilesLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddUrlLink
         * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksAddUrlLink: async (addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addUrlLinkParams' is not null or undefined
            assertParamExists('postApiLayoutLinksAddUrlLink', 'addUrlLinkParams', addUrlLinkParams)
            const localVarPath = `/api/LayoutLinks/AddUrlLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUrlLinkParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CardCreateLinks
         * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksCardCreateLinks: async (allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'allowedKinds' is not null or undefined
            assertParamExists('postApiLayoutLinksCardCreateLinks', 'allowedKinds', allowedKinds)
            const localVarPath = `/api/LayoutLinks/CardCreateLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(allowedKinds, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksCheckReadMainFileAvailable: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutLinksCheckReadMainFileAvailable', 'request', request)
            const localVarPath = `/api/LayoutLinks/CheckReadMainFileAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteFileLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksDeleteFile: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutLinksDeleteFile', 'request', request)
            const localVarPath = `/api/LayoutLinks/DeleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksDeleteLink: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutLinksDeleteLink', 'request', request)
            const localVarPath = `/api/LayoutLinks/DeleteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/GetLinks
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksGetLinks: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutLinksGetLinks', 'request', request)
            const localVarPath = `/api/LayoutLinks/GetLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/SetLinkDescription
         * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksSetLinkDescription: async (data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiLayoutLinksSetLinkDescription', 'data', data)
            const localVarPath = `/api/LayoutLinks/SetLinkDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddExistingCardLink
         * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksAddExistingCardLink: async (linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkParams' is not null or undefined
            assertParamExists('postLayoutLinksAddExistingCardLink', 'linkParams', linkParams)
            const localVarPath = `/LayoutLinks/AddExistingCardLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(linkParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddFilesLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksAddFilesLinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/LayoutLinks/AddFilesLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddUrlLink
         * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksAddUrlLink: async (addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addUrlLinkParams' is not null or undefined
            assertParamExists('postLayoutLinksAddUrlLink', 'addUrlLinkParams', addUrlLinkParams)
            const localVarPath = `/LayoutLinks/AddUrlLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUrlLinkParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CardCreateLinks
         * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksCardCreateLinks: async (allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'allowedKinds' is not null or undefined
            assertParamExists('postLayoutLinksCardCreateLinks', 'allowedKinds', allowedKinds)
            const localVarPath = `/LayoutLinks/CardCreateLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(allowedKinds, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksCheckReadMainFileAvailable: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutLinksCheckReadMainFileAvailable', 'request', request)
            const localVarPath = `/LayoutLinks/CheckReadMainFileAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteFileLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksDeleteFile: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutLinksDeleteFile', 'request', request)
            const localVarPath = `/LayoutLinks/DeleteFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksDeleteLink: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutLinksDeleteLink', 'request', request)
            const localVarPath = `/LayoutLinks/DeleteLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/GetLinks
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksGetLinks: async (request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postLayoutLinksGetLinks', 'request', request)
            const localVarPath = `/LayoutLinks/GetLinks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutLinks/SetLinkDescription
         * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksSetLinkDescription: async (data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postLayoutLinksSetLinkDescription', 'data', data)
            const localVarPath = `/LayoutLinks/SetLinkDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutLinksApi - functional programming interface
 * @export
 */
export const LayoutLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutLinksGetLinkTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutLinksGetLinkTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns setting MainLinkTypePresets/LinkType
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutLinksGetMainLinkTypes(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutLinksGetMainLinkTypes(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutLinksId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutLinksId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutLinksGetLinkTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutLinksGetLinkTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns setting MainLinkTypePresets/LinkType
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayoutLinksGetMainLinkTypes(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLayoutLinksGetMainLinkTypes(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddExistingCardLink
         * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksAddExistingCardLink(linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksAddExistingCardLink(linkParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddFilesLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksAddFilesLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksAddFilesLinks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddUrlLink
         * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksAddUrlLink(addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksAddUrlLink(addUrlLinkParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CardCreateLinks
         * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksCardCreateLinks(allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksCardCreateLinks(allowedKinds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksCheckReadMainFileAvailable(request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksCheckReadMainFileAvailable(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteFileLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksDeleteFile(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksDeleteFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksDeleteLink(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksDeleteLink(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/GetLinks
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksGetLinks(request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLinksDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksGetLinks(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/SetLinkDescription
         * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutLinksSetLinkDescription(data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutLinksSetLinkDescription(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddExistingCardLink
         * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksAddExistingCardLink(linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksAddExistingCardLink(linkParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddFilesLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksAddFilesLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksAddFilesLinks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddUrlLink
         * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksAddUrlLink(addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksAddUrlLink(addUrlLinkParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CardCreateLinks
         * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksCardCreateLinks(allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksCardCreateLinks(allowedKinds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksCheckReadMainFileAvailable(request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksCheckReadMainFileAvailable(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteFileLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksDeleteFile(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksDeleteFile(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksDeleteLink(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksDeleteLink(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/GetLinks
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksGetLinks(request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLinksDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksGetLinks(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutLinks/SetLinkDescription
         * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutLinksSetLinkDescription(data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutLinksSetLinkDescription(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutLinksApi - factory interface
 * @export
 */
export const LayoutLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutLinksApiFp(configuration)
    return {
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutLinksGetLinkTypes(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType> {
            return localVarFp.getApiLayoutLinksGetLinkTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns setting MainLinkTypePresets/LinkType
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutLinksGetMainLinkTypes(taskId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType> {
            return localVarFp.getApiLayoutLinksGetMainLinkTypes(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutLinksId(id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType> {
            return localVarFp.getApiLayoutLinksId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutLinks/GetLinkTypes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutLinksGetLinkTypes(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType> {
            return localVarFp.getLayoutLinksGetLinkTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns setting MainLinkTypePresets/LinkType
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayoutLinksGetMainLinkTypes(taskId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientLinksLinkType> {
            return localVarFp.getLayoutLinksGetMainLinkTypes(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddExistingCardLink
         * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksAddExistingCardLink(linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutLinksAddExistingCardLink(linkParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddFilesLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksAddFilesLinks(options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutLinksAddFilesLinks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddUrlLink
         * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksAddUrlLink(addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutLinksAddUrlLink(addUrlLinkParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CardCreateLinks
         * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksCardCreateLinks(allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutLinksCardCreateLinks(allowedKinds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksCheckReadMainFileAvailable(request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.postApiLayoutLinksCheckReadMainFileAvailable(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteFileLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksDeleteFile(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutLinksDeleteFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksDeleteLink(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutLinksDeleteLink(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/GetLinks
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksGetLinks(request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLinksDataModel> {
            return localVarFp.postApiLayoutLinksGetLinks(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/SetLinkDescription
         * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutLinksSetLinkDescription(data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutLinksSetLinkDescription(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddExistingCardLink
         * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksAddExistingCardLink(linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutLinksAddExistingCardLink(linkParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddFilesLinks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksAddFilesLinks(options?: any): AxiosPromise<object> {
            return localVarFp.postLayoutLinksAddFilesLinks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/AddUrlLink
         * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksAddUrlLink(addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutLinksAddUrlLink(addUrlLinkParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CardCreateLinks
         * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksCardCreateLinks(allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionLayoutWebClientModelsLayoutKindModelDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutLinksCardCreateLinks(allowedKinds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksCheckReadMainFileAvailable(request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.postLayoutLinksCheckReadMainFileAvailable(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteFileLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksDeleteFile(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutLinksDeleteFile(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutLinks/DeleteLink
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksDeleteLink(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutLinksDeleteLink(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/GetLinks
         * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksGetLinks(request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLinksDataModel> {
            return localVarFp.postLayoutLinksGetLinks(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutLinks/SetLinkDescription
         * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutLinksSetLinkDescription(data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postLayoutLinksSetLinkDescription(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutLinksApi - object-oriented interface
 * @export
 * @class LayoutLinksApi
 * @extends {BaseAPI}
 */
export class LayoutLinksApi extends BaseAPI {
    /**
     * 
     * @summary GET: /LayoutLinks/GetLinkTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public getApiLayoutLinksGetLinkTypes(options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).getApiLayoutLinksGetLinkTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns setting MainLinkTypePresets/LinkType
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public getApiLayoutLinksGetMainLinkTypes(taskId: string, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).getApiLayoutLinksGetMainLinkTypes(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutLinks/GetLinkTypes
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public getApiLayoutLinksId(id: string, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).getApiLayoutLinksId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutLinks/GetLinkTypes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public getLayoutLinksGetLinkTypes(options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).getLayoutLinksGetLinkTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns setting MainLinkTypePresets/LinkType
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public getLayoutLinksGetMainLinkTypes(taskId: string, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).getLayoutLinksGetMainLinkTypes(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/AddExistingCardLink
     * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksAddExistingCardLink(linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksAddExistingCardLink(linkParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/AddFilesLinks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksAddFilesLinks(options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksAddFilesLinks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/AddUrlLink
     * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksAddUrlLink(addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksAddUrlLink(addUrlLinkParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/CardCreateLinks
     * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksCardCreateLinks(allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksCardCreateLinks(allowedKinds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksCheckReadMainFileAvailable(request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksCheckReadMainFileAvailable(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutLinks/DeleteFileLink
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksDeleteFile(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksDeleteFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutLinks/DeleteLink
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksDeleteLink(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksDeleteLink(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/GetLinks
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksGetLinks(request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksGetLinks(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/SetLinkDescription
     * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postApiLayoutLinksSetLinkDescription(data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postApiLayoutLinksSetLinkDescription(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/AddExistingCardLink
     * @param {DocsVisionLayoutWebClientModelsLayoutLinkCreateParams} linkParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksAddExistingCardLink(linkParams: DocsVisionLayoutWebClientModelsLayoutLinkCreateParams, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksAddExistingCardLink(linkParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/AddFilesLinks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksAddFilesLinks(options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksAddFilesLinks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/AddUrlLink
     * @param {DocsVisionLayoutWebClientModelsAddUrlLinkParams} addUrlLinkParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksAddUrlLink(addUrlLinkParams: DocsVisionLayoutWebClientModelsAddUrlLinkParams, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksAddUrlLink(addUrlLinkParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/CardCreateLinks
     * @param {Array<DocsVisionLayoutWebClientModelsAllowedCardKind>} allowedKinds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksCardCreateLinks(allowedKinds: Array<DocsVisionLayoutWebClientModelsAllowedCardKind>, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksCardCreateLinks(allowedKinds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/CheckReadMainFileAvailable
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksCheckReadMainFileAvailable(request: DocsVisionWebClientControllersLayoutLinksControllerModelsCheckReadMainFileAvailableRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksCheckReadMainFileAvailable(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutLinks/DeleteFileLink
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksDeleteFile(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteFileRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksDeleteFile(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutLinks/DeleteLink
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksDeleteLink(request: DocsVisionWebClientControllersLayoutLinksControllerModelsDeleteLinkRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksDeleteLink(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/GetLinks
     * @param {DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksGetLinks(request: DocsVisionWebClientControllersLayoutLinksControllerModelsGetLinksRequest, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksGetLinks(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutLinks/SetLinkDescription
     * @param {DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutLinksApi
     */
    public postLayoutLinksSetLinkDescription(data: DocsVisionLayoutWebClientModelsLayoutSetLinkDescriptionParams, options?: AxiosRequestConfig) {
        return LayoutLinksApiFp(this.configuration).postLayoutLinksSetLinkDescription(data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutPartnerApi - axios parameter creator
 * @export
 */
export const LayoutPartnerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutPartnerDirectorySearch: async (query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutPartnerDirectorySearch', 'query', query)
            const localVarPath = `/api/LayoutPartner/DirectorySearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutPartnerLoadTree: async (query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutPartnerLoadTree', 'query', query)
            const localVarPath = `/api/LayoutPartner/LoadTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutPartnerQuickSearch: async (query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutPartnerQuickSearch', 'query', query)
            const localVarPath = `/api/LayoutPartner/QuickSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutPartnerDirectorySearch: async (query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postLayoutPartnerDirectorySearch', 'query', query)
            const localVarPath = `/LayoutPartner/DirectorySearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutPartnerLoadTree: async (query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postLayoutPartnerLoadTree', 'query', query)
            const localVarPath = `/LayoutPartner/LoadTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutPartnerQuickSearch: async (query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postLayoutPartnerQuickSearch', 'query', query)
            const localVarPath = `/LayoutPartner/QuickSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutPartnerApi - functional programming interface
 * @export
 */
export const LayoutPartnerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutPartnerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutPartnerDirectorySearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutPartnerDirectorySearch(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutPartnerLoadTree(query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutPartnerLoadTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutPartnerQuickSearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutPartnerQuickSearch(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutPartnerDirectorySearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutPartnerDirectorySearch(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutPartnerLoadTree(query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutPartnerLoadTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayoutPartnerQuickSearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLayoutPartnerQuickSearch(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutPartnerApi - factory interface
 * @export
 */
export const LayoutPartnerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutPartnerApiFp(configuration)
    return {
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutPartnerDirectorySearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutPartnerDirectorySearch(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutPartnerLoadTree(query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutPartnerLoadTree(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutPartnerQuickSearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutPartnerQuickSearch(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutPartnerDirectorySearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerSearchResponseDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutPartnerDirectorySearch(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutPartnerLoadTree(query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerTreeLoadResponseDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutPartnerLoadTree(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary find department by name
         * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayoutPartnerQuickSearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsPartnerQuickSearchResponseDocsVisionLayoutWebClient> {
            return localVarFp.postLayoutPartnerQuickSearch(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutPartnerApi - object-oriented interface
 * @export
 * @class LayoutPartnerApi
 * @extends {BaseAPI}
 */
export class LayoutPartnerApi extends BaseAPI {
    /**
     * 
     * @summary find department by name
     * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutPartnerApi
     */
    public postApiLayoutPartnerDirectorySearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig) {
        return LayoutPartnerApiFp(this.configuration).postApiLayoutPartnerDirectorySearch(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary find department by name
     * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutPartnerApi
     */
    public postApiLayoutPartnerLoadTree(query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options?: AxiosRequestConfig) {
        return LayoutPartnerApiFp(this.configuration).postApiLayoutPartnerLoadTree(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary find department by name
     * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutPartnerApi
     */
    public postApiLayoutPartnerQuickSearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig) {
        return LayoutPartnerApiFp(this.configuration).postApiLayoutPartnerQuickSearch(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary find department by name
     * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutPartnerApi
     */
    public postLayoutPartnerDirectorySearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig) {
        return LayoutPartnerApiFp(this.configuration).postLayoutPartnerDirectorySearch(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary find department by name
     * @param {DocsVisionLayoutWebClientModelsPartnerLoadQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutPartnerApi
     */
    public postLayoutPartnerLoadTree(query: DocsVisionLayoutWebClientModelsPartnerLoadQuery, options?: AxiosRequestConfig) {
        return LayoutPartnerApiFp(this.configuration).postLayoutPartnerLoadTree(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary find department by name
     * @param {DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutPartnerApi
     */
    public postLayoutPartnerQuickSearch(query: DocsVisionLayoutWebClientModelsPartnerQuickSearchQuery, options?: AxiosRequestConfig) {
        return LayoutPartnerApiFp(this.configuration).postLayoutPartnerQuickSearch(query, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutRowApi - axios parameter creator
 * @export
 */
export const LayoutRowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckAccess
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowCheckAccess: async (cardId: string, sectionId: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutRowCheckAccess', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiLayoutRowCheckAccess', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('getApiLayoutRowCheckAccess', 'rowId', rowId)
            const localVarPath = `/api/LayoutRow/CheckAccess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (sectionId !== undefined) {
                localVarQueryParameter['sectionId'] = sectionId;
            }

            if (rowId !== undefined) {
                localVarQueryParameter['rowId'] = rowId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {number} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowCheckModifiedAndLocked: async (cardId: string, sectionId: string, rowId: string, timestamp: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutRowCheckModifiedAndLocked', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiLayoutRowCheckModifiedAndLocked', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('getApiLayoutRowCheckModifiedAndLocked', 'rowId', rowId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiLayoutRowCheckModifiedAndLocked', 'timestamp', timestamp)
            const localVarPath = `/api/LayoutRow/CheckModifiedAndLocked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (sectionId !== undefined) {
                localVarQueryParameter['sectionId'] = sectionId;
            }

            if (rowId !== undefined) {
                localVarQueryParameter['rowId'] = rowId;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Edit
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowEdit: async (layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutRow/Edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (layoutParamsCardId !== undefined) {
                localVarQueryParameter['layoutParams.cardId'] = layoutParamsCardId;
            }

            if (layoutParamsSectionId !== undefined) {
                localVarQueryParameter['layoutParams.sectionId'] = layoutParamsSectionId;
            }

            if (layoutParamsRowId !== undefined) {
                localVarQueryParameter['layoutParams.rowId'] = layoutParamsRowId;
            }

            if (layoutParamsLayoutMode !== undefined) {
                localVarQueryParameter['layoutParams.layoutMode'] = layoutParamsLayoutMode;
            }

            if (layoutParamsLayoutParams) {
                localVarQueryParameter['layoutParams.layoutParams'] = layoutParamsLayoutParams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Exist
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowExist: async (layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutRow/Exist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (layoutParamsCardId !== undefined) {
                localVarQueryParameter['layoutParams.cardId'] = layoutParamsCardId;
            }

            if (layoutParamsSectionId !== undefined) {
                localVarQueryParameter['layoutParams.sectionId'] = layoutParamsSectionId;
            }

            if (layoutParamsRowId !== undefined) {
                localVarQueryParameter['layoutParams.rowId'] = layoutParamsRowId;
            }

            if (layoutParamsLayoutMode !== undefined) {
                localVarQueryParameter['layoutParams.layoutMode'] = layoutParamsLayoutMode;
            }

            if (layoutParamsLayoutParams) {
                localVarQueryParameter['layoutParams.layoutParams'] = layoutParamsLayoutParams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [layoutPartParamsRootControlName] 
         * @param {boolean} [layoutPartParamsIncludeRootControl] 
         * @param {string} [layoutPartParamsCardId] 
         * @param {string} [layoutPartParamsSectionId] 
         * @param {string} [layoutPartParamsRowId] 
         * @param {string} [layoutPartParamsLayoutMode] 
         * @param {Array<object>} [layoutPartParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowGetLayoutPart: async (layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsCardId?: string, layoutPartParamsSectionId?: string, layoutPartParamsRowId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsLayoutParams?: Array<object>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutRow/GetLayoutPart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (layoutPartParamsRootControlName !== undefined) {
                localVarQueryParameter['layoutPartParams.rootControlName'] = layoutPartParamsRootControlName;
            }

            if (layoutPartParamsIncludeRootControl !== undefined) {
                localVarQueryParameter['layoutPartParams.includeRootControl'] = layoutPartParamsIncludeRootControl;
            }

            if (layoutPartParamsCardId !== undefined) {
                localVarQueryParameter['layoutPartParams.cardId'] = layoutPartParamsCardId;
            }

            if (layoutPartParamsSectionId !== undefined) {
                localVarQueryParameter['layoutPartParams.sectionId'] = layoutPartParamsSectionId;
            }

            if (layoutPartParamsRowId !== undefined) {
                localVarQueryParameter['layoutPartParams.rowId'] = layoutPartParamsRowId;
            }

            if (layoutPartParamsLayoutMode !== undefined) {
                localVarQueryParameter['layoutPartParams.layoutMode'] = layoutPartParamsLayoutMode;
            }

            if (layoutPartParamsLayoutParams) {
                localVarQueryParameter['layoutPartParams.layoutParams'] = layoutPartParamsLayoutParams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {number} timestamp 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowId: async (cardId: string, sectionId: string, rowId: string, timestamp: number, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutRowId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiLayoutRowId', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('getApiLayoutRowId', 'rowId', rowId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('getApiLayoutRowId', 'timestamp', timestamp)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutRowId', 'id', id)
            const localVarPath = `/api/LayoutRow/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (sectionId !== undefined) {
                localVarQueryParameter['sectionId'] = sectionId;
            }

            if (rowId !== undefined) {
                localVarQueryParameter['rowId'] = rowId;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/NewRow
         * @param {string} [createParamsCardId] 
         * @param {string} [createParamsSectionId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsParentRowId] 
         * @param {string} [createParamsParentTreeRowId] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowNewRow: async (createParamsCardId?: string, createParamsSectionId?: string, createParamsLayoutMode?: string, createParamsParentRowId?: string, createParamsParentTreeRowId?: string, createParamsLayoutParams?: Array<object>, createParamsCustomContext?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutRow/NewRow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createParamsCardId !== undefined) {
                localVarQueryParameter['createParams.cardId'] = createParamsCardId;
            }

            if (createParamsSectionId !== undefined) {
                localVarQueryParameter['createParams.sectionId'] = createParamsSectionId;
            }

            if (createParamsLayoutMode !== undefined) {
                localVarQueryParameter['createParams.layoutMode'] = createParamsLayoutMode;
            }

            if (createParamsParentRowId !== undefined) {
                localVarQueryParameter['createParams.parentRowId'] = createParamsParentRowId;
            }

            if (createParamsParentTreeRowId !== undefined) {
                localVarQueryParameter['createParams.parentTreeRowId'] = createParamsParentTreeRowId;
            }

            if (createParamsLayoutParams) {
                localVarQueryParameter['createParams.layoutParams'] = createParamsLayoutParams;
            }

            if (createParamsCustomContext !== undefined) {
                localVarQueryParameter['createParams.customContext'] = createParamsCustomContext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/View
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowView: async (layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutRow/View`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (layoutParamsCardId !== undefined) {
                localVarQueryParameter['layoutParams.cardId'] = layoutParamsCardId;
            }

            if (layoutParamsSectionId !== undefined) {
                localVarQueryParameter['layoutParams.sectionId'] = layoutParamsSectionId;
            }

            if (layoutParamsRowId !== undefined) {
                localVarQueryParameter['layoutParams.rowId'] = layoutParamsRowId;
            }

            if (layoutParamsLayoutMode !== undefined) {
                localVarQueryParameter['layoutParams.layoutMode'] = layoutParamsLayoutMode;
            }

            if (layoutParamsLayoutParams) {
                localVarQueryParameter['layoutParams.layoutParams'] = layoutParamsLayoutParams;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Delete
         * @param {DocsVisionWebClientModelsDeleteRowModel} row 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutRowDelete: async (row: DocsVisionWebClientModelsDeleteRowModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'row' is not null or undefined
            assertParamExists('postApiLayoutRowDelete', 'row', row)
            const localVarPath = `/api/LayoutRow/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(row, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Save
         * @param {DocsVisionLayoutWebClientModelsSaveRowControlDataModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutRowSave: async (model: DocsVisionLayoutWebClientModelsSaveRowControlDataModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutRowSave', 'model', model)
            const localVarPath = `/api/LayoutRow/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutRowApi - functional programming interface
 * @export
 */
export const LayoutRowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutRowApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckAccess
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowCheckAccess(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowCheckAccess(cardId, sectionId, rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {number} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowCheckModifiedAndLocked(cardId: string, sectionId: string, rowId: string, timestamp: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowCheckModifiedAndLocked(cardId, sectionId, rowId, timestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Edit
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowEdit(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutRowViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowEdit(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Exist
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowExist(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowExist(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [layoutPartParamsRootControlName] 
         * @param {boolean} [layoutPartParamsIncludeRootControl] 
         * @param {string} [layoutPartParamsCardId] 
         * @param {string} [layoutPartParamsSectionId] 
         * @param {string} [layoutPartParamsRowId] 
         * @param {string} [layoutPartParamsLayoutMode] 
         * @param {Array<object>} [layoutPartParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowGetLayoutPart(layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsCardId?: string, layoutPartParamsSectionId?: string, layoutPartParamsRowId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowGetLayoutPart(layoutPartParamsRootControlName, layoutPartParamsIncludeRootControl, layoutPartParamsCardId, layoutPartParamsSectionId, layoutPartParamsRowId, layoutPartParamsLayoutMode, layoutPartParamsLayoutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {number} timestamp 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowId(cardId: string, sectionId: string, rowId: string, timestamp: number, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowId(cardId, sectionId, rowId, timestamp, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/NewRow
         * @param {string} [createParamsCardId] 
         * @param {string} [createParamsSectionId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsParentRowId] 
         * @param {string} [createParamsParentTreeRowId] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowNewRow(createParamsCardId?: string, createParamsSectionId?: string, createParamsLayoutMode?: string, createParamsParentRowId?: string, createParamsParentTreeRowId?: string, createParamsLayoutParams?: Array<object>, createParamsCustomContext?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutRowViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowNewRow(createParamsCardId, createParamsSectionId, createParamsLayoutMode, createParamsParentRowId, createParamsParentTreeRowId, createParamsLayoutParams, createParamsCustomContext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/View
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutRowView(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutRowViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutRowView(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Delete
         * @param {DocsVisionWebClientModelsDeleteRowModel} row 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutRowDelete(row: DocsVisionWebClientModelsDeleteRowModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutRowDelete(row, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Save
         * @param {DocsVisionLayoutWebClientModelsSaveRowControlDataModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutRowSave(model: DocsVisionLayoutWebClientModelsSaveRowControlDataModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutRowSave(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutRowApi - factory interface
 * @export
 */
export const LayoutRowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutRowApiFp(configuration)
    return {
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckAccess
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowCheckAccess(cardId: string, sectionId: string, rowId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutRowCheckAccess(cardId, sectionId, rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {number} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowCheckModifiedAndLocked(cardId: string, sectionId: string, rowId: string, timestamp: number, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutRowCheckModifiedAndLocked(cardId, sectionId, rowId, timestamp, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Edit
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowEdit(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutRowViewModel> {
            return localVarFp.getApiLayoutRowEdit(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Exist
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowExist(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutRowExist(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets layout part
         * @param {string} [layoutPartParamsRootControlName] 
         * @param {boolean} [layoutPartParamsIncludeRootControl] 
         * @param {string} [layoutPartParamsCardId] 
         * @param {string} [layoutPartParamsSectionId] 
         * @param {string} [layoutPartParamsRowId] 
         * @param {string} [layoutPartParamsLayoutMode] 
         * @param {Array<object>} [layoutPartParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowGetLayoutPart(layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsCardId?: string, layoutPartParamsSectionId?: string, layoutPartParamsRowId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsLayoutParams?: Array<object>, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientLibraryObjectModelServicesLayoutModelLayoutModelDocsVisionWebClientLibraryObjectModel> {
            return localVarFp.getApiLayoutRowGetLayoutPart(layoutPartParamsRootControlName, layoutPartParamsIncludeRootControl, layoutPartParamsCardId, layoutPartParamsSectionId, layoutPartParamsRowId, layoutPartParamsLayoutMode, layoutPartParamsLayoutParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {number} timestamp 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowId(cardId: string, sectionId: string, rowId: string, timestamp: number, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutRowId(cardId, sectionId, rowId, timestamp, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/NewRow
         * @param {string} [createParamsCardId] 
         * @param {string} [createParamsSectionId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsParentRowId] 
         * @param {string} [createParamsParentTreeRowId] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowNewRow(createParamsCardId?: string, createParamsSectionId?: string, createParamsLayoutMode?: string, createParamsParentRowId?: string, createParamsParentTreeRowId?: string, createParamsLayoutParams?: Array<object>, createParamsCustomContext?: object, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutRowViewModel> {
            return localVarFp.getApiLayoutRowNewRow(createParamsCardId, createParamsSectionId, createParamsLayoutMode, createParamsParentRowId, createParamsParentTreeRowId, createParamsLayoutParams, createParamsCustomContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/View
         * @param {string} [layoutParamsCardId] 
         * @param {string} [layoutParamsSectionId] 
         * @param {string} [layoutParamsRowId] 
         * @param {string} [layoutParamsLayoutMode] 
         * @param {Array<object>} [layoutParamsLayoutParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutRowView(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutRowViewModel> {
            return localVarFp.getApiLayoutRowView(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Delete
         * @param {DocsVisionWebClientModelsDeleteRowModel} row 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutRowDelete(row: DocsVisionWebClientModelsDeleteRowModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutRowDelete(row, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /LayoutRow/Save
         * @param {DocsVisionLayoutWebClientModelsSaveRowControlDataModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutRowSave(model: DocsVisionLayoutWebClientModelsSaveRowControlDataModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutRowSave(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutRowApi - object-oriented interface
 * @export
 * @class LayoutRowApi
 * @extends {BaseAPI}
 */
export class LayoutRowApi extends BaseAPI {
    /**
     * 
     * @summary HTTP: /LayoutRow/CheckAccess
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowCheckAccess(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowCheckAccess(cardId, sectionId, rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {number} timestamp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowCheckModifiedAndLocked(cardId: string, sectionId: string, rowId: string, timestamp: number, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowCheckModifiedAndLocked(cardId, sectionId, rowId, timestamp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/Edit
     * @param {string} [layoutParamsCardId] 
     * @param {string} [layoutParamsSectionId] 
     * @param {string} [layoutParamsRowId] 
     * @param {string} [layoutParamsLayoutMode] 
     * @param {Array<object>} [layoutParamsLayoutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowEdit(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowEdit(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/Exist
     * @param {string} [layoutParamsCardId] 
     * @param {string} [layoutParamsSectionId] 
     * @param {string} [layoutParamsRowId] 
     * @param {string} [layoutParamsLayoutMode] 
     * @param {Array<object>} [layoutParamsLayoutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowExist(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowExist(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets layout part
     * @param {string} [layoutPartParamsRootControlName] 
     * @param {boolean} [layoutPartParamsIncludeRootControl] 
     * @param {string} [layoutPartParamsCardId] 
     * @param {string} [layoutPartParamsSectionId] 
     * @param {string} [layoutPartParamsRowId] 
     * @param {string} [layoutPartParamsLayoutMode] 
     * @param {Array<object>} [layoutPartParamsLayoutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowGetLayoutPart(layoutPartParamsRootControlName?: string, layoutPartParamsIncludeRootControl?: boolean, layoutPartParamsCardId?: string, layoutPartParamsSectionId?: string, layoutPartParamsRowId?: string, layoutPartParamsLayoutMode?: string, layoutPartParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowGetLayoutPart(layoutPartParamsRootControlName, layoutPartParamsIncludeRootControl, layoutPartParamsCardId, layoutPartParamsSectionId, layoutPartParamsRowId, layoutPartParamsLayoutMode, layoutPartParamsLayoutParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/CheckModifiedAndLocked
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {number} timestamp 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowId(cardId: string, sectionId: string, rowId: string, timestamp: number, id: string, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowId(cardId, sectionId, rowId, timestamp, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/NewRow
     * @param {string} [createParamsCardId] 
     * @param {string} [createParamsSectionId] 
     * @param {string} [createParamsLayoutMode] 
     * @param {string} [createParamsParentRowId] 
     * @param {string} [createParamsParentTreeRowId] 
     * @param {Array<object>} [createParamsLayoutParams] 
     * @param {object} [createParamsCustomContext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowNewRow(createParamsCardId?: string, createParamsSectionId?: string, createParamsLayoutMode?: string, createParamsParentRowId?: string, createParamsParentTreeRowId?: string, createParamsLayoutParams?: Array<object>, createParamsCustomContext?: object, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowNewRow(createParamsCardId, createParamsSectionId, createParamsLayoutMode, createParamsParentRowId, createParamsParentTreeRowId, createParamsLayoutParams, createParamsCustomContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/View
     * @param {string} [layoutParamsCardId] 
     * @param {string} [layoutParamsSectionId] 
     * @param {string} [layoutParamsRowId] 
     * @param {string} [layoutParamsLayoutMode] 
     * @param {Array<object>} [layoutParamsLayoutParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public getApiLayoutRowView(layoutParamsCardId?: string, layoutParamsSectionId?: string, layoutParamsRowId?: string, layoutParamsLayoutMode?: string, layoutParamsLayoutParams?: Array<object>, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).getApiLayoutRowView(layoutParamsCardId, layoutParamsSectionId, layoutParamsRowId, layoutParamsLayoutMode, layoutParamsLayoutParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/Delete
     * @param {DocsVisionWebClientModelsDeleteRowModel} row 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public postApiLayoutRowDelete(row: DocsVisionWebClientModelsDeleteRowModel, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).postApiLayoutRowDelete(row, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /LayoutRow/Save
     * @param {DocsVisionLayoutWebClientModelsSaveRowControlDataModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutRowApi
     */
    public postApiLayoutRowSave(model: DocsVisionLayoutWebClientModelsSaveRowControlDataModel, options?: AxiosRequestConfig) {
        return LayoutRowApiFp(this.configuration).postApiLayoutRowSave(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutStaffApi - axios parameter creator
 * @export
 */
export const LayoutStaffApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get certificate
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffGetCertificate: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiLayoutStaffGetCertificate', 'employeeId', employeeId)
            const localVarPath = `/api/LayoutStaff/GetCertificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employee image by employee id
         * @param {string} employeeId 
         * @param {string} [imageHash] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffGetEmployeeImage: async (employeeId: string, imageHash?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiLayoutStaffGetEmployeeImage', 'employeeId', employeeId)
            const localVarPath = `/api/LayoutStaff/GetEmployeeImage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (imageHash !== undefined) {
                localVarQueryParameter['imageHash'] = imageHash;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employee default icon by employee id
         * @param {string} employeeId 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffGetEmployeeImageDefault: async (employeeId: string, height?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiLayoutStaffGetEmployeeImageDefault', 'employeeId', employeeId)
            const localVarPath = `/api/LayoutStaff/GetEmployeeImageDefault`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employee image by employee id
         * @param {string} employeeId 
         * @param {string} id 
         * @param {string} [imageHash] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffId: async (employeeId: string, id: string, imageHash?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiLayoutStaffId', 'employeeId', employeeId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutStaffId', 'id', id)
            const localVarPath = `/api/LayoutStaff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (imageHash !== undefined) {
                localVarQueryParameter['imageHash'] = imageHash;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Employees/SetActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffSetActive: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutStaff/SetActive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Employees/SetLastRefuseDateTime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffSetLastRefuseDateTime: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutStaff/SetLastRefuseDateTime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDepartmentSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindDepartments: async (query: DocsVisionLayoutWebClientModelsDepartmentSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutStaffFindDepartments', 'query', query)
            const localVarPath = `/api/LayoutStaff/FindDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Employees/Find
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindEmployees: async (request: DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutStaffFindEmployees', 'request', request)
            const localVarPath = `/api/LayoutStaff/FindEmployees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindInDepartmentsFlat: async (query: DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutStaffFindInDepartmentsFlat', 'query', query)
            const localVarPath = `/api/LayoutStaff/FindInDepartmentsFlat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find in departments tree
         * @param {DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindInDepartmentsTree: async (query: DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutStaffFindInDepartmentsTree', 'query', query)
            const localVarPath = `/api/LayoutStaff/FindInDepartmentsTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get departments and all its parents info
         * @param {DocsVisionWebClientModelsGetDepartmentPathRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetDepartmentPath: async (model: DocsVisionWebClientModelsGetDepartmentPathRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutStaffGetDepartmentPath', 'model', model)
            const localVarPath = `/api/LayoutStaff/GetDepartmentPath`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get departments info
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetDepartmentsInfo: async (requestModel: DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiLayoutStaffGetDepartmentsInfo', 'requestModel', requestModel)
            const localVarPath = `/api/LayoutStaff/GetDepartmentsInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetParentDepartments: async (query: DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutStaffGetParentDepartments', 'query', query)
            const localVarPath = `/api/LayoutStaff/GetParentDepartments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employees and departments info
         * @param {DocsVisionWebClientModelsStaffInfoRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetStaffInfo: async (request: DocsVisionWebClientModelsStaffInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutStaffGetStaffInfo', 'request', request)
            const localVarPath = `/api/LayoutStaff/GetStaffInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load department by parent
         * @param {DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery} query search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffLoadDepartmentsFlat: async (query: DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutStaffLoadDepartmentsFlat', 'query', query)
            const localVarPath = `/api/LayoutStaff/LoadDepartmentsFlat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find departments tree by search query
         * @param {DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery} query Search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffLoadDepartmentsTree: async (query: DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiLayoutStaffLoadDepartmentsTree', 'query', query)
            const localVarPath = `/api/LayoutStaff/LoadDepartmentsTree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set certificate
         * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffSetCertificate: async (request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutStaffSetCertificate', 'request', request)
            const localVarPath = `/api/LayoutStaff/SetCertificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Employees/SetStatusInfo
         * @param {DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffSetStatusInfo: async (status: DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('postApiLayoutStaffSetStatusInfo', 'status', status)
            const localVarPath = `/api/LayoutStaff/SetStatusInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(status, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutStaffApi - functional programming interface
 * @export
 */
export const LayoutStaffApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutStaffApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get certificate
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutStaffGetCertificate(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutStaffGetCertificate(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employee image by employee id
         * @param {string} employeeId 
         * @param {string} [imageHash] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutStaffGetEmployeeImage(employeeId: string, imageHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutStaffGetEmployeeImage(employeeId, imageHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employee default icon by employee id
         * @param {string} employeeId 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutStaffGetEmployeeImageDefault(employeeId: string, height?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutStaffGetEmployeeImageDefault(employeeId, height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employee image by employee id
         * @param {string} employeeId 
         * @param {string} id 
         * @param {string} [imageHash] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutStaffId(employeeId: string, id: string, imageHash?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutStaffId(employeeId, id, imageHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Employees/SetActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutStaffSetActive(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutStaffSetActive(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Employees/SetLastRefuseDateTime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutStaffSetLastRefuseDateTime(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutStaffSetLastRefuseDateTime(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDepartmentSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffFindDepartments(query: DocsVisionLayoutWebClientModelsDepartmentSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffFindDepartments(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Employees/Find
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffFindEmployees(request: DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffFindEmployees(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffFindInDepartmentsFlat(query: DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffFindInDepartmentsFlat(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find in departments tree
         * @param {DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffFindInDepartmentsTree(query: DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffFindInDepartmentsTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get departments and all its parents info
         * @param {DocsVisionWebClientModelsGetDepartmentPathRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffGetDepartmentPath(model: DocsVisionWebClientModelsGetDepartmentPathRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffGetDepartmentPath(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get departments info
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffGetDepartmentsInfo(requestModel: DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffGetDepartmentsInfo(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffGetParentDepartments(query: DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffGetParentDepartments(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employees and departments info
         * @param {DocsVisionWebClientModelsStaffInfoRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffGetStaffInfo(request: DocsVisionWebClientModelsStaffInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffGetStaffInfo(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load department by parent
         * @param {DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery} query search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffLoadDepartmentsFlat(query: DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffLoadDepartmentsFlat(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find departments tree by search query
         * @param {DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery} query Search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffLoadDepartmentsTree(query: DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffLoadDepartmentsTree(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set certificate
         * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffSetCertificate(request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffSetCertificate(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Employees/SetStatusInfo
         * @param {DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutStaffSetStatusInfo(status: DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutStaffSetStatusInfo(status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutStaffApi - factory interface
 * @export
 */
export const LayoutStaffApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutStaffApiFp(configuration)
    return {
        /**
         * 
         * @summary Get certificate
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffGetCertificate(employeeId: string, options?: any): AxiosPromise<DocsVisionWebClientControllersLayoutStaffControllerModelsFileCardModelWithCertificateInfo> {
            return localVarFp.getApiLayoutStaffGetCertificate(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employee image by employee id
         * @param {string} employeeId 
         * @param {string} [imageHash] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffGetEmployeeImage(employeeId: string, imageHash?: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutStaffGetEmployeeImage(employeeId, imageHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employee default icon by employee id
         * @param {string} employeeId 
         * @param {number} [height] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffGetEmployeeImageDefault(employeeId: string, height?: number, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutStaffGetEmployeeImageDefault(employeeId, height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employee image by employee id
         * @param {string} employeeId 
         * @param {string} id 
         * @param {string} [imageHash] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffId(employeeId: string, id: string, imageHash?: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutStaffId(employeeId, id, imageHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Employees/SetActive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffSetActive(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutStaffSetActive(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Employees/SetLastRefuseDateTime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutStaffSetLastRefuseDateTime(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiLayoutStaffSetLastRefuseDateTime(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDepartmentSearchQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindDepartments(query: DocsVisionLayoutWebClientModelsDepartmentSearchQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindDepartmentsResponseDocsVisionWebClient> {
            return localVarFp.postApiLayoutStaffFindDepartments(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Employees/Find
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindEmployees(request: DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesResponseDocsVisionWebClient> {
            return localVarFp.postApiLayoutStaffFindEmployees(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindInDepartmentsFlat(query: DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentSearchFlatResponseDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutStaffFindInDepartmentsFlat(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find in departments tree
         * @param {DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffFindInDepartmentsTree(query: DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientDepartmentDepartmentFindInTreeResult> {
            return localVarFp.postApiLayoutStaffFindInDepartmentsTree(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get departments and all its parents info
         * @param {DocsVisionWebClientModelsGetDepartmentPathRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetDepartmentPath(model: DocsVisionWebClientModelsGetDepartmentPathRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel> {
            return localVarFp.postApiLayoutStaffGetDepartmentPath(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get departments info
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetDepartmentsInfo(requestModel: DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientDepartmentDepartmentExtendedModel> {
            return localVarFp.postApiLayoutStaffGetDepartmentsInfo(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest} query search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetParentDepartments(query: DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericIEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentModel> {
            return localVarFp.postApiLayoutStaffGetParentDepartments(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employees and departments info
         * @param {DocsVisionWebClientModelsStaffInfoRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffGetStaffInfo(request: DocsVisionWebClientModelsStaffInfoRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsStaffInfoResponseModelDocsVisionWebClient> {
            return localVarFp.postApiLayoutStaffGetStaffInfo(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load department by parent
         * @param {DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery} query search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffLoadDepartmentsFlat(query: DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDepartmentLoadFlatResponseDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutStaffLoadDepartmentsFlat(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find departments tree by search query
         * @param {DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery} query Search query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffLoadDepartmentsTree(query: DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsIPagedEnumerableDocsVisionBackOfficeWebClientDepartmentDepartmentTreeNodeDocsVisionPlatformWebClient> {
            return localVarFp.postApiLayoutStaffLoadDepartmentsTree(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set certificate
         * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffSetCertificate(request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postApiLayoutStaffSetCertificate(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Employees/SetStatusInfo
         * @param {DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutStaffSetStatusInfo(status: DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutStaffSetStatusInfo(status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutStaffApi - object-oriented interface
 * @export
 * @class LayoutStaffApi
 * @extends {BaseAPI}
 */
export class LayoutStaffApi extends BaseAPI {
    /**
     * 
     * @summary Get certificate
     * @param {string} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public getApiLayoutStaffGetCertificate(employeeId: string, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).getApiLayoutStaffGetCertificate(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employee image by employee id
     * @param {string} employeeId 
     * @param {string} [imageHash] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public getApiLayoutStaffGetEmployeeImage(employeeId: string, imageHash?: string, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).getApiLayoutStaffGetEmployeeImage(employeeId, imageHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employee default icon by employee id
     * @param {string} employeeId 
     * @param {number} [height] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public getApiLayoutStaffGetEmployeeImageDefault(employeeId: string, height?: number, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).getApiLayoutStaffGetEmployeeImageDefault(employeeId, height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employee image by employee id
     * @param {string} employeeId 
     * @param {string} id 
     * @param {string} [imageHash] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public getApiLayoutStaffId(employeeId: string, id: string, imageHash?: string, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).getApiLayoutStaffId(employeeId, id, imageHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Employees/SetActive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public getApiLayoutStaffSetActive(options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).getApiLayoutStaffSetActive(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Employees/SetLastRefuseDateTime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public getApiLayoutStaffSetLastRefuseDateTime(options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).getApiLayoutStaffSetLastRefuseDateTime(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find department by name
     * @param {DocsVisionLayoutWebClientModelsDepartmentSearchQuery} query Search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffFindDepartments(query: DocsVisionLayoutWebClientModelsDepartmentSearchQuery, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffFindDepartments(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Employees/Find
     * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffFindEmployees(request: DocsVisionWebClientControllersLayoutStaffControllerModelsFindEmployeesRequest, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffFindEmployees(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find department by name
     * @param {DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffFindInDepartmentsFlat(query: DocsVisionLayoutWebClientModelsDepartmentSearchFlatQuery, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffFindInDepartmentsFlat(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find in departments tree
     * @param {DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffFindInDepartmentsTree(query: DocsVisionLayoutWebClientModelsDepartmentFindInTreeQuery, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffFindInDepartmentsTree(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get departments and all its parents info
     * @param {DocsVisionWebClientModelsGetDepartmentPathRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffGetDepartmentPath(model: DocsVisionWebClientModelsGetDepartmentPathRequestModel, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffGetDepartmentPath(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get departments info
     * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffGetDepartmentsInfo(requestModel: DocsVisionWebClientControllersLayoutStaffControllerModelsGetDepartmentsInfoRequestModel, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffGetDepartmentsInfo(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find department by name
     * @param {DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest} query search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffGetParentDepartments(query: DocsVisionWebClientControllersLayoutStaffControllerModelsGetParentDepartmentsRequest, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffGetParentDepartments(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employees and departments info
     * @param {DocsVisionWebClientModelsStaffInfoRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffGetStaffInfo(request: DocsVisionWebClientModelsStaffInfoRequestModel, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffGetStaffInfo(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load department by parent
     * @param {DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery} query search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffLoadDepartmentsFlat(query: DocsVisionLayoutWebClientModelsDepartmentLoadFlatQuery, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffLoadDepartmentsFlat(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find departments tree by search query
     * @param {DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery} query Search query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffLoadDepartmentsTree(query: DocsVisionLayoutWebClientModelsDepartmentLoadTreeQuery, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffLoadDepartmentsTree(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set certificate
     * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffSetCertificate(request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffSetCertificate(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Employees/SetStatusInfo
     * @param {DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutStaffApi
     */
    public postApiLayoutStaffSetStatusInfo(status: DocsVisionBackOfficeWebClientEmployeeUpdateEmployeeStatusModel, options?: AxiosRequestConfig) {
        return LayoutStaffApiFp(this.configuration).postApiLayoutStaffSetStatusInfo(status, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutTasksApi - axios parameter creator
 * @export
 */
export const LayoutTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksDefaultValues
         * @param {string} parentTaskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutTasksGetChildTasksDefaultValues: async (parentTaskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentTaskId' is not null or undefined
            assertParamExists('getApiLayoutTasksGetChildTasksDefaultValues', 'parentTaskId', parentTaskId)
            const localVarPath = `/api/LayoutTasks/GetChildTasksDefaultValues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parentTaskId !== undefined) {
                localVarQueryParameter['parentTaskId'] = parentTaskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/GetExecutionDates
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutTasksGetExecutionDates: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getApiLayoutTasksGetExecutionDates', 'taskId', taskId)
            const localVarPath = `/api/LayoutTasks/GetExecutionDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tasks by specified card id
         * @param {string} cardId Card id
         * @param {Array<string>} availableKinds List of available kinds ids
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutTasksGetTasks: async (cardId: string, availableKinds: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutTasksGetTasks', 'cardId', cardId)
            // verify required parameter 'availableKinds' is not null or undefined
            assertParamExists('getApiLayoutTasksGetTasks', 'availableKinds', availableKinds)
            const localVarPath = `/api/LayoutTasks/GetTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (availableKinds) {
                localVarQueryParameter['availableKinds'] = availableKinds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tasks by specified card id
         * @param {string} cardId Card id
         * @param {Array<string>} availableKinds List of available kinds ids
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutTasksId: async (cardId: string, availableKinds: Array<string>, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiLayoutTasksId', 'cardId', cardId)
            // verify required parameter 'availableKinds' is not null or undefined
            assertParamExists('getApiLayoutTasksId', 'availableKinds', availableKinds)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLayoutTasksId', 'id', id)
            const localVarPath = `/api/LayoutTasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }

            if (availableKinds) {
                localVarQueryParameter['availableKinds'] = availableKinds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksComments
         * @param {DocsVisionWebClientModelsAddTaskCommentsRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksAddTaskComments: async (request: DocsVisionWebClientModelsAddTaskCommentsRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutTasksAddTaskComments', 'request', request)
            const localVarPath = `/api/LayoutTasks/AddTaskComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/ChangeExecutionDates
         * @param {DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksChangeExecutionDates: async (model: DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutTasksChangeExecutionDates', 'model', model)
            const localVarPath = `/api/LayoutTasks/ChangeExecutionDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Complete
         * @param {DocsVisionWebClientModelsTaskCardCompleteRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksComplete: async (model: DocsVisionWebClientModelsTaskCardCompleteRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutTasksComplete', 'model', model)
            const localVarPath = `/api/LayoutTasks/Complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutTasks/CreateChildTasks
         * @param {DocsVisionWebClientModelsCreateChildTasksRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksCreateChildTasks: async (request: DocsVisionWebClientModelsCreateChildTasksRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutTasksCreateChildTasks', 'request', request)
            const localVarPath = `/api/LayoutTasks/CreateChildTasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Delegate
         * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksDelegate: async (model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutTasksDelegate', 'model', model)
            const localVarPath = `/api/LayoutTasks/Delegate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/DelegateTask
         * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksDelegateTask: async (model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutTasksDelegateTask', 'model', model)
            const localVarPath = `/api/LayoutTasks/DelegateTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksComments
         * @param {DocsVisionWebClientModelsGetChildTasksCommentsRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetChildTasksComments: async (request: DocsVisionWebClientModelsGetChildTasksCommentsRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutTasksGetChildTasksComments', 'request', request)
            const localVarPath = `/api/LayoutTasks/GetChildTasksComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/GetDecisionInfo
         * @param {DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetDecisionInfo: async (request: DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutTasksGetDecisionInfo', 'request', request)
            const localVarPath = `/api/LayoutTasks/GetDecisionInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /LayoutTasks/GetDelegateRecords
         * @param {DocsVisionWebClientModelsGetDelegationRecordsRequestModel} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetDelegationRecords: async (request: DocsVisionWebClientModelsGetDelegationRecordsRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutTasksGetDelegationRecords', 'request', request)
            const localVarPath = `/api/LayoutTasks/GetDelegationRecords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetTasks
         * @param {DocsVisionWebClientModelsGetTasksListRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetTaskList: async (request: DocsVisionWebClientModelsGetTasksListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutTasksGetTaskList', 'request', request)
            const localVarPath = `/api/LayoutTasks/GetTaskList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/MakeDecision
         * @param {DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksMakeDecision: async (model: DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutTasksMakeDecision', 'model', model)
            const localVarPath = `/api/LayoutTasks/MakeDecision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Reject
         * @param {DocsVisionWebClientModelsTaskCardRejectRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksReject: async (model: DocsVisionWebClientModelsTaskCardRejectRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutTasksReject', 'model', model)
            const localVarPath = `/api/LayoutTasks/Reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /TaskCard/TakeToRework
         * @param {DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksTakeToRework: async (model: DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiLayoutTasksTakeToRework', 'model', model)
            const localVarPath = `/api/LayoutTasks/TakeToRework`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutTasksApi - functional programming interface
 * @export
 */
export const LayoutTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksDefaultValues
         * @param {string} parentTaskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutTasksGetChildTasksDefaultValues(parentTaskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutTasksGetChildTasksDefaultValues(parentTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/GetExecutionDates
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutTasksGetExecutionDates(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutTasksGetExecutionDates(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tasks by specified card id
         * @param {string} cardId Card id
         * @param {Array<string>} availableKinds List of available kinds ids
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getApiLayoutTasksGetTasks(cardId: string, availableKinds: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionLayoutWebClientModelsTaskDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutTasksGetTasks(cardId, availableKinds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tasks by specified card id
         * @param {string} cardId Card id
         * @param {Array<string>} availableKinds List of available kinds ids
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getApiLayoutTasksId(cardId: string, availableKinds: Array<string>, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionLayoutWebClientModelsTaskDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutTasksId(cardId, availableKinds, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksComments
         * @param {DocsVisionWebClientModelsAddTaskCommentsRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksAddTaskComments(request: DocsVisionWebClientModelsAddTaskCommentsRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksAddTaskComments(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/ChangeExecutionDates
         * @param {DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksChangeExecutionDates(model: DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksChangeExecutionDates(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Complete
         * @param {DocsVisionWebClientModelsTaskCardCompleteRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksComplete(model: DocsVisionWebClientModelsTaskCardCompleteRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksComplete(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutTasks/CreateChildTasks
         * @param {DocsVisionWebClientModelsCreateChildTasksRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksCreateChildTasks(request: DocsVisionWebClientModelsCreateChildTasksRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksCreateChildTasks(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Delegate
         * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksDelegate(model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksDelegate(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/DelegateTask
         * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksDelegateTask(model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksDelegateTask(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksComments
         * @param {DocsVisionWebClientModelsGetChildTasksCommentsRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksGetChildTasksComments(request: DocsVisionWebClientModelsGetChildTasksCommentsRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsGetChildTasksCommentsResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksGetChildTasksComments(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/GetDecisionInfo
         * @param {DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksGetDecisionInfo(request: DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksGetDecisionInfo(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /LayoutTasks/GetDelegateRecords
         * @param {DocsVisionWebClientModelsGetDelegationRecordsRequestModel} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksGetDelegationRecords(request: DocsVisionWebClientModelsGetDelegationRecordsRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksGetDelegationRecords(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetTasks
         * @param {DocsVisionWebClientModelsGetTasksListRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksGetTaskList(request: DocsVisionWebClientModelsGetTasksListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionLayoutWebClientModelsTaskDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksGetTaskList(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/MakeDecision
         * @param {DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksMakeDecision(model: DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksMakeDecision(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Reject
         * @param {DocsVisionWebClientModelsTaskCardRejectRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksReject(model: DocsVisionWebClientModelsTaskCardRejectRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksReject(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /TaskCard/TakeToRework
         * @param {DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutTasksTakeToRework(model: DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutTasksTakeToRework(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutTasksApi - factory interface
 * @export
 */
export const LayoutTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutTasksApiFp(configuration)
    return {
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksDefaultValues
         * @param {string} parentTaskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutTasksGetChildTasksDefaultValues(parentTaskId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsChildTaskCreateDefaultValuesDocsVisionApprovalWebClient> {
            return localVarFp.getApiLayoutTasksGetChildTasksDefaultValues(parentTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/GetExecutionDates
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutTasksGetExecutionDates(taskId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientModelsTaskCardChangeExecutionDatesModelDocsVisionWebClient> {
            return localVarFp.getApiLayoutTasksGetExecutionDates(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tasks by specified card id
         * @param {string} cardId Card id
         * @param {Array<string>} availableKinds List of available kinds ids
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutTasksGetTasks(cardId: string, availableKinds: Array<string>, options?: any): AxiosPromise<Array<DocsVisionLayoutWebClientModelsTaskDataModel>> {
            return localVarFp.getApiLayoutTasksGetTasks(cardId, availableKinds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tasks by specified card id
         * @param {string} cardId Card id
         * @param {Array<string>} availableKinds List of available kinds ids
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getApiLayoutTasksId(cardId: string, availableKinds: Array<string>, id: string, options?: any): AxiosPromise<Array<DocsVisionLayoutWebClientModelsTaskDataModel>> {
            return localVarFp.getApiLayoutTasksId(cardId, availableKinds, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksComments
         * @param {DocsVisionWebClientModelsAddTaskCommentsRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksAddTaskComments(request: DocsVisionWebClientModelsAddTaskCommentsRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksAddTaskComments(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/ChangeExecutionDates
         * @param {DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksChangeExecutionDates(model: DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksChangeExecutionDates(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Complete
         * @param {DocsVisionWebClientModelsTaskCardCompleteRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksComplete(model: DocsVisionWebClientModelsTaskCardCompleteRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksComplete(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutTasks/CreateChildTasks
         * @param {DocsVisionWebClientModelsCreateChildTasksRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksCreateChildTasks(request: DocsVisionWebClientModelsCreateChildTasksRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksCreateChildTasks(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Delegate
         * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksDelegate(model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options?: any): AxiosPromise<object> {
            return localVarFp.postApiLayoutTasksDelegate(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/DelegateTask
         * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksDelegateTask(model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksDelegateTask(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetChildTasksComments
         * @param {DocsVisionWebClientModelsGetChildTasksCommentsRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetChildTasksComments(request: DocsVisionWebClientModelsGetChildTasksCommentsRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsGetChildTasksCommentsResponseModel> {
            return localVarFp.postApiLayoutTasksGetChildTasksComments(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/GetDecisionInfo
         * @param {DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetDecisionInfo(request: DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionApprovalWebClientModelsApprovalTaskDecisionInfoDocsVisionApprovalWebClient> {
            return localVarFp.postApiLayoutTasksGetDecisionInfo(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /LayoutTasks/GetDelegateRecords
         * @param {DocsVisionWebClientModelsGetDelegationRecordsRequestModel} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetDelegationRecords(request: DocsVisionWebClientModelsGetDelegationRecordsRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsDelegateRecordsResponseDocsVisionLayoutWebClient> {
            return localVarFp.postApiLayoutTasksGetDelegationRecords(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET: /LayoutTasks/GetTasks
         * @param {DocsVisionWebClientModelsGetTasksListRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksGetTaskList(request: DocsVisionWebClientModelsGetTasksListRequestModel, options?: any): AxiosPromise<Array<DocsVisionLayoutWebClientModelsTaskDataModel>> {
            return localVarFp.postApiLayoutTasksGetTaskList(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/MakeDecision
         * @param {DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksMakeDecision(model: DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksMakeDecision(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/Reject
         * @param {DocsVisionWebClientModelsTaskCardRejectRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksReject(model: DocsVisionWebClientModelsTaskCardRejectRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksReject(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /TaskCard/TakeToRework
         * @param {DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutTasksTakeToRework(model: DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutTasksTakeToRework(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutTasksApi - object-oriented interface
 * @export
 * @class LayoutTasksApi
 * @extends {BaseAPI}
 */
export class LayoutTasksApi extends BaseAPI {
    /**
     * 
     * @summary GET: /LayoutTasks/GetChildTasksDefaultValues
     * @param {string} parentTaskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public getApiLayoutTasksGetChildTasksDefaultValues(parentTaskId: string, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).getApiLayoutTasksGetChildTasksDefaultValues(parentTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/GetExecutionDates
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public getApiLayoutTasksGetExecutionDates(taskId: string, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).getApiLayoutTasksGetExecutionDates(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tasks by specified card id
     * @param {string} cardId Card id
     * @param {Array<string>} availableKinds List of available kinds ids
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public getApiLayoutTasksGetTasks(cardId: string, availableKinds: Array<string>, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).getApiLayoutTasksGetTasks(cardId, availableKinds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tasks by specified card id
     * @param {string} cardId Card id
     * @param {Array<string>} availableKinds List of available kinds ids
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public getApiLayoutTasksId(cardId: string, availableKinds: Array<string>, id: string, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).getApiLayoutTasksId(cardId, availableKinds, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutTasks/GetChildTasksComments
     * @param {DocsVisionWebClientModelsAddTaskCommentsRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksAddTaskComments(request: DocsVisionWebClientModelsAddTaskCommentsRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksAddTaskComments(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/ChangeExecutionDates
     * @param {DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksChangeExecutionDates(model: DocsVisionWebClientModelsTaskCardChangeExecutionDatesModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksChangeExecutionDates(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/Complete
     * @param {DocsVisionWebClientModelsTaskCardCompleteRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksComplete(model: DocsVisionWebClientModelsTaskCardCompleteRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksComplete(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutTasks/CreateChildTasks
     * @param {DocsVisionWebClientModelsCreateChildTasksRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksCreateChildTasks(request: DocsVisionWebClientModelsCreateChildTasksRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksCreateChildTasks(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/Delegate
     * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksDelegate(model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksDelegate(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/DelegateTask
     * @param {DocsVisionWebClientModelsTaskCardDelegateRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksDelegateTask(model: DocsVisionWebClientModelsTaskCardDelegateRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksDelegateTask(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutTasks/GetChildTasksComments
     * @param {DocsVisionWebClientModelsGetChildTasksCommentsRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksGetChildTasksComments(request: DocsVisionWebClientModelsGetChildTasksCommentsRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksGetChildTasksComments(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/GetDecisionInfo
     * @param {DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksGetDecisionInfo(request: DocsVisionApprovalWebClientModelsGetApprovalTaskDecisionInfoOptions, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksGetDecisionInfo(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /LayoutTasks/GetDelegateRecords
     * @param {DocsVisionWebClientModelsGetDelegationRecordsRequestModel} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksGetDelegationRecords(request: DocsVisionWebClientModelsGetDelegationRecordsRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksGetDelegationRecords(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GET: /LayoutTasks/GetTasks
     * @param {DocsVisionWebClientModelsGetTasksListRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksGetTaskList(request: DocsVisionWebClientModelsGetTasksListRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksGetTaskList(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/MakeDecision
     * @param {DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksMakeDecision(model: DocsVisionWebClientModelsTaskCardMakeDecisionRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksMakeDecision(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/Reject
     * @param {DocsVisionWebClientModelsTaskCardRejectRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksReject(model: DocsVisionWebClientModelsTaskCardRejectRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksReject(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /TaskCard/TakeToRework
     * @param {DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutTasksApi
     */
    public postApiLayoutTasksTakeToRework(model: DocsVisionWebClientModelsTaskCardTakeToReworkRequestModel, options?: AxiosRequestConfig) {
        return LayoutTasksApiFp(this.configuration).postApiLayoutTasksTakeToRework(model, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LayoutUserSettingsApi - axios parameter creator
 * @export
 */
export const LayoutUserSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetCertificate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutUserSettings/GetCertificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get settings for main menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetMainMenuSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutUserSettings/GetMainMenuSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Show Archived Cards setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetShowArchivedCardsSetting: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutUserSettings/GetShowArchivedCardsSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Show Help Button setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetShowHelpButtonSetting: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutUserSettings/GetShowHelpButtonSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get poll date
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsGetPollDateSetting: async (url: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('postApiLayoutUserSettingsGetPollDateSetting', 'url', url)
            const localVarPath = `/api/LayoutUserSettings/GetPollDateSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(url, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Poll has done
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsPollIsDone: async (url: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('postApiLayoutUserSettingsPollIsDone', 'url', url)
            const localVarPath = `/api/LayoutUserSettings/PollIsDone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(url, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refuse poll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsRefusePollSetting: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/LayoutUserSettings/RefusePollSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save settings for main menu
         * @param {DocsVisionLayoutWebClientModelsMainMenuSettings} settings Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSaveMainMenuSettings: async (settings: DocsVisionLayoutWebClientModelsMainMenuSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settings' is not null or undefined
            assertParamExists('postApiLayoutUserSettingsSaveMainMenuSettings', 'settings', settings)
            const localVarPath = `/api/LayoutUserSettings/SaveMainMenuSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set certificate
         * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSetCertificate: async (request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiLayoutUserSettingsSetCertificate', 'request', request)
            const localVarPath = `/api/LayoutUserSettings/SetCertificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Show Archived Cards setting
         * @param {boolean} showArchiveCards 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSetShowArchivedCardsSetting: async (showArchiveCards: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showArchiveCards' is not null or undefined
            assertParamExists('postApiLayoutUserSettingsSetShowArchivedCardsSetting', 'showArchiveCards', showArchiveCards)
            const localVarPath = `/api/LayoutUserSettings/SetShowArchivedCardsSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showArchiveCards, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Show Help Button setting
         * @param {boolean} showHelpButton 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSetShowHelpButtonSetting: async (showHelpButton: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showHelpButton' is not null or undefined
            assertParamExists('postApiLayoutUserSettingsSetShowHelpButtonSetting', 'showHelpButton', showHelpButton)
            const localVarPath = `/api/LayoutUserSettings/SetShowHelpButtonSetting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showHelpButton, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LayoutUserSettingsApi - functional programming interface
 * @export
 */
export const LayoutUserSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LayoutUserSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutUserSettingsGetCertificate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsFileFileCardModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutUserSettingsGetCertificate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get settings for main menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutUserSettingsGetMainMenuSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutUserSettingsGetMainMenuSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Show Archived Cards setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutUserSettingsGetShowArchivedCardsSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutUserSettingsGetShowArchivedCardsSetting(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Show Help Button setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLayoutUserSettingsGetShowHelpButtonSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLayoutUserSettingsGetShowHelpButtonSetting(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get poll date
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutUserSettingsGetPollDateSetting(url: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutUserSettingsGetPollDateSetting(url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Poll has done
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutUserSettingsPollIsDone(url: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutUserSettingsPollIsDone(url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refuse poll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutUserSettingsRefusePollSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutUserSettingsRefusePollSetting(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save settings for main menu
         * @param {DocsVisionLayoutWebClientModelsMainMenuSettings} settings Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutUserSettingsSaveMainMenuSettings(settings: DocsVisionLayoutWebClientModelsMainMenuSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutUserSettingsSaveMainMenuSettings(settings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set certificate
         * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutUserSettingsSetCertificate(request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutUserSettingsSetCertificate(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Show Archived Cards setting
         * @param {boolean} showArchiveCards 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutUserSettingsSetShowArchivedCardsSetting(showArchiveCards: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutUserSettingsSetShowArchivedCardsSetting(showArchiveCards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Show Help Button setting
         * @param {boolean} showHelpButton 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiLayoutUserSettingsSetShowHelpButtonSetting(showHelpButton: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiLayoutUserSettingsSetShowHelpButtonSetting(showHelpButton, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LayoutUserSettingsApi - factory interface
 * @export
 */
export const LayoutUserSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LayoutUserSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetCertificate(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsFileFileCardModel> {
            return localVarFp.getApiLayoutUserSettingsGetCertificate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get settings for main menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetMainMenuSettings(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsMainMenuSettingsDocsVisionLayoutWebClient> {
            return localVarFp.getApiLayoutUserSettingsGetMainMenuSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Show Archived Cards setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetShowArchivedCardsSetting(options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutUserSettingsGetShowArchivedCardsSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Show Help Button setting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLayoutUserSettingsGetShowHelpButtonSetting(options?: any): AxiosPromise<object> {
            return localVarFp.getApiLayoutUserSettingsGetShowHelpButtonSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get poll date
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsGetPollDateSetting(url: string, options?: any): AxiosPromise<string> {
            return localVarFp.postApiLayoutUserSettingsGetPollDateSetting(url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Poll has done
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsPollIsDone(url: string, options?: any): AxiosPromise<string> {
            return localVarFp.postApiLayoutUserSettingsPollIsDone(url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refuse poll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsRefusePollSetting(options?: any): AxiosPromise<string> {
            return localVarFp.postApiLayoutUserSettingsRefusePollSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save settings for main menu
         * @param {DocsVisionLayoutWebClientModelsMainMenuSettings} settings Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSaveMainMenuSettings(settings: DocsVisionLayoutWebClientModelsMainMenuSettings, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutUserSettingsSaveMainMenuSettings(settings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set certificate
         * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSetCertificate(request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postApiLayoutUserSettingsSetCertificate(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Show Archived Cards setting
         * @param {boolean} showArchiveCards 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSetShowArchivedCardsSetting(showArchiveCards: boolean, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutUserSettingsSetShowArchivedCardsSetting(showArchiveCards, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Show Help Button setting
         * @param {boolean} showHelpButton 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiLayoutUserSettingsSetShowHelpButtonSetting(showHelpButton: boolean, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiLayoutUserSettingsSetShowHelpButtonSetting(showHelpButton, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LayoutUserSettingsApi - object-oriented interface
 * @export
 * @class LayoutUserSettingsApi
 * @extends {BaseAPI}
 */
export class LayoutUserSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Get certificate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public getApiLayoutUserSettingsGetCertificate(options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).getApiLayoutUserSettingsGetCertificate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get settings for main menu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public getApiLayoutUserSettingsGetMainMenuSettings(options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).getApiLayoutUserSettingsGetMainMenuSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Show Archived Cards setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public getApiLayoutUserSettingsGetShowArchivedCardsSetting(options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).getApiLayoutUserSettingsGetShowArchivedCardsSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Show Help Button setting
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public getApiLayoutUserSettingsGetShowHelpButtonSetting(options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).getApiLayoutUserSettingsGetShowHelpButtonSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get poll date
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public postApiLayoutUserSettingsGetPollDateSetting(url: string, options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).postApiLayoutUserSettingsGetPollDateSetting(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Poll has done
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public postApiLayoutUserSettingsPollIsDone(url: string, options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).postApiLayoutUserSettingsPollIsDone(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refuse poll
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public postApiLayoutUserSettingsRefusePollSetting(options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).postApiLayoutUserSettingsRefusePollSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save settings for main menu
     * @param {DocsVisionLayoutWebClientModelsMainMenuSettings} settings Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public postApiLayoutUserSettingsSaveMainMenuSettings(settings: DocsVisionLayoutWebClientModelsMainMenuSettings, options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).postApiLayoutUserSettingsSaveMainMenuSettings(settings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set certificate
     * @param {DocsVisionWebClientModelsCertificateSetCertificateRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public postApiLayoutUserSettingsSetCertificate(request: DocsVisionWebClientModelsCertificateSetCertificateRequest, options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).postApiLayoutUserSettingsSetCertificate(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Show Archived Cards setting
     * @param {boolean} showArchiveCards 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public postApiLayoutUserSettingsSetShowArchivedCardsSetting(showArchiveCards: boolean, options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).postApiLayoutUserSettingsSetShowArchivedCardsSetting(showArchiveCards, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Show Help Button setting
     * @param {boolean} showHelpButton 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutUserSettingsApi
     */
    public postApiLayoutUserSettingsSetShowHelpButtonSetting(showHelpButton: boolean, options?: AxiosRequestConfig) {
        return LayoutUserSettingsApiFp(this.configuration).postApiLayoutUserSettingsSetShowHelpButtonSetting(showHelpButton, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LibrariesV1Api - axios parameter creator
 * @export
 */
export const LibrariesV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Libraries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/libraries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1LibrariesLibraryId: async (libraryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'libraryId' is not null or undefined
            assertParamExists('getApiV1LibrariesLibraryId', 'libraryId', libraryId)
            const localVarPath = `/api/v1/libraries/{libraryId}`
                .replace(`{${"libraryId"}}`, encodeURIComponent(String(libraryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LibrariesV1Api - functional programming interface
 * @export
 */
export const LibrariesV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LibrariesV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1Libraries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardLibraryModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1Libraries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1LibrariesLibraryId(libraryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsCardLibraryModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1LibrariesLibraryId(libraryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LibrariesV1Api - factory interface
 * @export
 */
export const LibrariesV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LibrariesV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Libraries(options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardLibraryModel>> {
            return localVarFp.getApiV1Libraries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} libraryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1LibrariesLibraryId(libraryId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsCardLibraryModel> {
            return localVarFp.getApiV1LibrariesLibraryId(libraryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LibrariesV1Api - object-oriented interface
 * @export
 * @class LibrariesV1Api
 * @extends {BaseAPI}
 */
export class LibrariesV1Api extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibrariesV1Api
     */
    public getApiV1Libraries(options?: AxiosRequestConfig) {
        return LibrariesV1ApiFp(this.configuration).getApiV1Libraries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} libraryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibrariesV1Api
     */
    public getApiV1LibrariesLibraryId(libraryId: string, options?: AxiosRequestConfig) {
        return LibrariesV1ApiFp(this.configuration).getApiV1LibrariesLibraryId(libraryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocalizationApi - axios parameter creator
 * @export
 */
export const LocalizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Updates localization
         * @param {string} locale 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLocalizationId: async (locale: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('getApiLocalizationId', 'locale', locale)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLocalizationId', 'id', id)
            const localVarPath = `/api/Localization/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset localization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLocalizationResetUserLocale: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Localization/ResetUserLocale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates localization
         * @param {string} locale 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLocalizationSetUserLocale: async (locale: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locale' is not null or undefined
            assertParamExists('getApiLocalizationSetUserLocale', 'locale', locale)
            const localVarPath = `/api/Localization/SetUserLocale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalizationApi - functional programming interface
 * @export
 */
export const LocalizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Updates localization
         * @param {string} locale 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLocalizationId(locale: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLocalizationId(locale, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset localization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLocalizationResetUserLocale(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLocalizationResetUserLocale(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates localization
         * @param {string} locale 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLocalizationSetUserLocale(locale: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLocalizationSetUserLocale(locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalizationApi - factory interface
 * @export
 */
export const LocalizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Updates localization
         * @param {string} locale 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLocalizationId(locale: string, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLocalizationId(locale, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset localization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLocalizationResetUserLocale(options?: any): AxiosPromise<object> {
            return localVarFp.getApiLocalizationResetUserLocale(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates localization
         * @param {string} locale 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLocalizationSetUserLocale(locale: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLocalizationSetUserLocale(locale, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocalizationApi - object-oriented interface
 * @export
 * @class LocalizationApi
 * @extends {BaseAPI}
 */
export class LocalizationApi extends BaseAPI {
    /**
     * 
     * @summary Updates localization
     * @param {string} locale 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public getApiLocalizationId(locale: string, id: string, options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).getApiLocalizationId(locale, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset localization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public getApiLocalizationResetUserLocale(options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).getApiLocalizationResetUserLocale(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates localization
     * @param {string} locale 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalizationApi
     */
    public getApiLocalizationSetUserLocale(locale: string, options?: AxiosRequestConfig) {
        return LocalizationApiFp(this.configuration).getApiLocalizationSetUserLocale(locale, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LogApi - axios parameter creator
 * @export
 */
export const LogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sets minimum log level
         * @param {number} minLevel Minimum log level
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLogId: async (minLevel: number, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minLevel' is not null or undefined
            assertParamExists('getApiLogId', 'minLevel', minLevel)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiLogId', 'id', id)
            const localVarPath = `/api/Log/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minLevel !== undefined) {
                localVarQueryParameter['minLevel'] = minLevel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets minimum log level
         * @param {number} minLevel Minimum log level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLogSetLogLevel: async (minLevel: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'minLevel' is not null or undefined
            assertParamExists('getApiLogSetLogLevel', 'minLevel', minLevel)
            const localVarPath = `/api/Log/SetLogLevel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (minLevel !== undefined) {
                localVarQueryParameter['minLevel'] = minLevel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sets minimum log level
         * @param {number} minLevel Minimum log level
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLogId(minLevel: number, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLogId(minLevel, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets minimum log level
         * @param {number} minLevel Minimum log level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiLogSetLogLevel(minLevel: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiLogSetLogLevel(minLevel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogApi - factory interface
 * @export
 */
export const LogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogApiFp(configuration)
    return {
        /**
         * 
         * @summary Sets minimum log level
         * @param {number} minLevel Minimum log level
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLogId(minLevel: number, id: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLogId(minLevel, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets minimum log level
         * @param {number} minLevel Minimum log level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiLogSetLogLevel(minLevel: number, options?: any): AxiosPromise<object> {
            return localVarFp.getApiLogSetLogLevel(minLevel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export class LogApi extends BaseAPI {
    /**
     * 
     * @summary Sets minimum log level
     * @param {number} minLevel Minimum log level
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public getApiLogId(minLevel: number, id: string, options?: AxiosRequestConfig) {
        return LogApiFp(this.configuration).getApiLogId(minLevel, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets minimum log level
     * @param {number} minLevel Minimum log level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public getApiLogSetLogLevel(minLevel: number, options?: AxiosRequestConfig) {
        return LogApiFp(this.configuration).getApiLogSetLogLevel(minLevel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NomenclatureDirectoryApi - axios parameter creator
 * @export
 */
export const NomenclatureDirectoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} currentYearRowId 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiNomenclatureDirectoryCheckYearUniqueness: async (currentYearRowId: string, year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currentYearRowId' is not null or undefined
            assertParamExists('getApiNomenclatureDirectoryCheckYearUniqueness', 'currentYearRowId', currentYearRowId)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getApiNomenclatureDirectoryCheckYearUniqueness', 'year', year)
            const localVarPath = `/api/NomenclatureDirectory/CheckYearUniqueness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currentYearRowId !== undefined) {
                localVarQueryParameter['currentYearRowId'] = currentYearRowId;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiNomenclatureDirectoryId: async (id: string, createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiNomenclatureDirectoryId', 'id', id)
            const localVarPath = `/api/NomenclatureDirectory/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createParamsCardTypeId !== undefined) {
                localVarQueryParameter['createParams.cardTypeId'] = createParamsCardTypeId;
            }

            if (createParamsKindId !== undefined) {
                localVarQueryParameter['createParams.kindId'] = createParamsKindId;
            }

            if (createParamsFolderId !== undefined) {
                localVarQueryParameter['createParams.folderId'] = createParamsFolderId;
            }

            if (createParamsTemplateId !== undefined) {
                localVarQueryParameter['createParams.templateId'] = createParamsTemplateId;
            }

            if (createParamsParentCardId !== undefined) {
                localVarQueryParameter['createParams.parentCardId'] = createParamsParentCardId;
            }

            if (createParamsLayoutMode !== undefined) {
                localVarQueryParameter['createParams.layoutMode'] = createParamsLayoutMode;
            }

            if (createParamsCreateAsLinkSourceCardId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.sourceCardId'] = createParamsCreateAsLinkSourceCardId;
            }

            if (createParamsCreateAsLinkSourceCardTimestamp !== undefined) {
                localVarQueryParameter['createParams.createAsLink.sourceCardTimestamp'] = createParamsCreateAsLinkSourceCardTimestamp;
            }

            if (createParamsCreateAsLinkLinkTypeId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linkTypeId'] = createParamsCreateAsLinkLinkTypeId;
            }

            if (createParamsCreateAsLinkLinksBindingDataSourceResolverId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.dataSourceResolverId'] = createParamsCreateAsLinkLinksBindingDataSourceResolverId;
            }

            if (createParamsCreateAsLinkLinksBindingSectionId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.sectionId'] = createParamsCreateAsLinkLinksBindingSectionId;
            }

            if (createParamsCreateAsLinkLinksBindingFieldAlias !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.fieldAlias'] = createParamsCreateAsLinkLinksBindingFieldAlias;
            }

            if (createParamsCreateAsLinkSaveHardLink !== undefined) {
                localVarQueryParameter['createParams.createAsLink.saveHardLink'] = createParamsCreateAsLinkSaveHardLink;
            }

            if (createParamsCreateAsLinkIsReport !== undefined) {
                localVarQueryParameter['createParams.createAsLink.isReport'] = createParamsCreateAsLinkIsReport;
            }

            if (createParamsCreateAsLinkEditOperation !== undefined) {
                localVarQueryParameter['createParams.createAsLink.editOperation'] = createParamsCreateAsLinkEditOperation;
            }

            if (createParamsRelatedCreatorCardInfoInitialCardId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.initialCardId'] = createParamsRelatedCreatorCardInfoInitialCardId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.id'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.displayName'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.operationId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.templateId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.folderId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.linkTypeId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.cardKindId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.cardTypeId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.location'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.operationContext'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext;
            }

            if (createParamsRelatedCreatorCardInfoParameters) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.parameters'] = createParamsRelatedCreatorCardInfoParameters;
            }

            if (createParamsLayoutParams) {
                localVarQueryParameter['createParams.layoutParams'] = createParamsLayoutParams;
            }

            if (createParamsSourceLayoutMode !== undefined) {
                localVarQueryParameter['createParams.sourceLayoutMode'] = createParamsSourceLayoutMode;
            }

            if (createParamsCustomContext !== undefined) {
                localVarQueryParameter['createParams.customContext'] = createParamsCustomContext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiNomenclatureDirectoryNewArchiveCaseCard: async (createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/NomenclatureDirectory/NewArchiveCaseCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createParamsCardTypeId !== undefined) {
                localVarQueryParameter['createParams.cardTypeId'] = createParamsCardTypeId;
            }

            if (createParamsKindId !== undefined) {
                localVarQueryParameter['createParams.kindId'] = createParamsKindId;
            }

            if (createParamsFolderId !== undefined) {
                localVarQueryParameter['createParams.folderId'] = createParamsFolderId;
            }

            if (createParamsTemplateId !== undefined) {
                localVarQueryParameter['createParams.templateId'] = createParamsTemplateId;
            }

            if (createParamsParentCardId !== undefined) {
                localVarQueryParameter['createParams.parentCardId'] = createParamsParentCardId;
            }

            if (createParamsLayoutMode !== undefined) {
                localVarQueryParameter['createParams.layoutMode'] = createParamsLayoutMode;
            }

            if (createParamsCreateAsLinkSourceCardId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.sourceCardId'] = createParamsCreateAsLinkSourceCardId;
            }

            if (createParamsCreateAsLinkSourceCardTimestamp !== undefined) {
                localVarQueryParameter['createParams.createAsLink.sourceCardTimestamp'] = createParamsCreateAsLinkSourceCardTimestamp;
            }

            if (createParamsCreateAsLinkLinkTypeId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linkTypeId'] = createParamsCreateAsLinkLinkTypeId;
            }

            if (createParamsCreateAsLinkLinksBindingDataSourceResolverId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.dataSourceResolverId'] = createParamsCreateAsLinkLinksBindingDataSourceResolverId;
            }

            if (createParamsCreateAsLinkLinksBindingSectionId !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.sectionId'] = createParamsCreateAsLinkLinksBindingSectionId;
            }

            if (createParamsCreateAsLinkLinksBindingFieldAlias !== undefined) {
                localVarQueryParameter['createParams.createAsLink.linksBinding.fieldAlias'] = createParamsCreateAsLinkLinksBindingFieldAlias;
            }

            if (createParamsCreateAsLinkSaveHardLink !== undefined) {
                localVarQueryParameter['createParams.createAsLink.saveHardLink'] = createParamsCreateAsLinkSaveHardLink;
            }

            if (createParamsCreateAsLinkIsReport !== undefined) {
                localVarQueryParameter['createParams.createAsLink.isReport'] = createParamsCreateAsLinkIsReport;
            }

            if (createParamsCreateAsLinkEditOperation !== undefined) {
                localVarQueryParameter['createParams.createAsLink.editOperation'] = createParamsCreateAsLinkEditOperation;
            }

            if (createParamsRelatedCreatorCardInfoInitialCardId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.initialCardId'] = createParamsRelatedCreatorCardInfoInitialCardId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.id'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.displayName'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.operationId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.templateId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.folderId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.linkTypeId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.cardKindId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.cardTypeId'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.location'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation;
            }

            if (createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext !== undefined) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.createRelatedCardModel.operationContext'] = createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext;
            }

            if (createParamsRelatedCreatorCardInfoParameters) {
                localVarQueryParameter['createParams.relatedCreatorCardInfo.parameters'] = createParamsRelatedCreatorCardInfoParameters;
            }

            if (createParamsLayoutParams) {
                localVarQueryParameter['createParams.layoutParams'] = createParamsLayoutParams;
            }

            if (createParamsSourceLayoutMode !== undefined) {
                localVarQueryParameter['createParams.sourceLayoutMode'] = createParamsSourceLayoutMode;
            }

            if (createParamsCustomContext !== undefined) {
                localVarQueryParameter['createParams.customContext'] = createParamsCustomContext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryAddYearNomenclature: async (request: DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiNomenclatureDirectoryAddYearNomenclature', 'request', request)
            const localVarPath = `/api/NomenclatureDirectory/AddYearNomenclature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryCopyUnitNomenclatures: async (request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiNomenclatureDirectoryCopyUnitNomenclatures', 'request', request)
            const localVarPath = `/api/NomenclatureDirectory/CopyUnitNomenclatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryCreateArchiveCaseRow: async (request: DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiNomenclatureDirectoryCreateArchiveCaseRow', 'request', request)
            const localVarPath = `/api/NomenclatureDirectory/CreateArchiveCaseRow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryGetArchiveCases: async (query: DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiNomenclatureDirectoryGetArchiveCases', 'query', query)
            const localVarPath = `/api/NomenclatureDirectory/GetArchiveCases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryGetUnitNomenclatures: async (query: DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiNomenclatureDirectoryGetUnitNomenclatures', 'query', query)
            const localVarPath = `/api/NomenclatureDirectory/GetUnitNomenclatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryMoveUnitNomenclatures: async (request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiNomenclatureDirectoryMoveUnitNomenclatures', 'request', request)
            const localVarPath = `/api/NomenclatureDirectory/MoveUnitNomenclatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectorySearch: async (request: DocsVisionArchiveManagementWebClientModelsSearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiNomenclatureDirectorySearch', 'request', request)
            const localVarPath = `/api/NomenclatureDirectory/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NomenclatureDirectoryApi - functional programming interface
 * @export
 */
export const NomenclatureDirectoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NomenclatureDirectoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} currentYearRowId 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiNomenclatureDirectoryCheckYearUniqueness(currentYearRowId: string, year: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiNomenclatureDirectoryCheckYearUniqueness(currentYearRowId, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiNomenclatureDirectoryId(id: string, createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiNomenclatureDirectoryId(id, createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiNomenclatureDirectoryNewArchiveCaseCard(createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiNomenclatureDirectoryNewArchiveCaseCard(createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiNomenclatureDirectoryAddYearNomenclature(request: DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiNomenclatureDirectoryAddYearNomenclature(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiNomenclatureDirectoryCopyUnitNomenclatures(request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiNomenclatureDirectoryCopyUnitNomenclatures(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiNomenclatureDirectoryCreateArchiveCaseRow(request: DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiNomenclatureDirectoryCreateArchiveCaseRow(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiNomenclatureDirectoryGetArchiveCases(query: DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiNomenclatureDirectoryGetArchiveCases(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiNomenclatureDirectoryGetUnitNomenclatures(query: DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiNomenclatureDirectoryGetUnitNomenclatures(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiNomenclatureDirectoryMoveUnitNomenclatures(request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiNomenclatureDirectoryMoveUnitNomenclatures(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiNomenclatureDirectorySearch(request: DocsVisionArchiveManagementWebClientModelsSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiNomenclatureDirectorySearch(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NomenclatureDirectoryApi - factory interface
 * @export
 */
export const NomenclatureDirectoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NomenclatureDirectoryApiFp(configuration)
    return {
        /**
         * 
         * @param {string} currentYearRowId 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiNomenclatureDirectoryCheckYearUniqueness(currentYearRowId: string, year: number, options?: any): AxiosPromise<object> {
            return localVarFp.getApiNomenclatureDirectoryCheckYearUniqueness(currentYearRowId, year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiNomenclatureDirectoryId(id: string, createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel> {
            return localVarFp.getApiNomenclatureDirectoryId(id, createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [createParamsCardTypeId] 
         * @param {string} [createParamsKindId] 
         * @param {string} [createParamsFolderId] 
         * @param {string} [createParamsTemplateId] 
         * @param {string} [createParamsParentCardId] 
         * @param {string} [createParamsLayoutMode] 
         * @param {string} [createParamsCreateAsLinkSourceCardId] 
         * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
         * @param {string} [createParamsCreateAsLinkLinkTypeId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
         * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
         * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
         * @param {boolean} [createParamsCreateAsLinkIsReport] 
         * @param {string} [createParamsCreateAsLinkEditOperation] 
         * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
         * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
         * @param {GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
         * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
         * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
         * @param {Array<object>} [createParamsLayoutParams] 
         * @param {string} [createParamsSourceLayoutMode] 
         * @param {object} [createParamsCustomContext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiNomenclatureDirectoryNewArchiveCaseCard(createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: any): AxiosPromise<DocsVisionLayoutWebClientModelsLayoutCardViewModel> {
            return localVarFp.getApiNomenclatureDirectoryNewArchiveCaseCard(createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryAddYearNomenclature(request: DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionArchiveManagementWebClientModelsYearNomenclatureModelDocsVisionArchiveManagementWebClient> {
            return localVarFp.postApiNomenclatureDirectoryAddYearNomenclature(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryCopyUnitNomenclatures(request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiNomenclatureDirectoryCopyUnitNomenclatures(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryCreateArchiveCaseRow(request: DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiNomenclatureDirectoryCreateArchiveCaseRow(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryGetArchiveCases(query: DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsArchiveCasesLoadResponseDocsVisionArchiveManagementWebClient> {
            return localVarFp.postApiNomenclatureDirectoryGetArchiveCases(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryGetUnitNomenclatures(query: DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementWebClientModelsUnitNomenclaturesResponseDocsVisionArchiveManagementWebClient> {
            return localVarFp.postApiNomenclatureDirectoryGetUnitNomenclatures(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectoryMoveUnitNomenclatures(request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiNomenclatureDirectoryMoveUnitNomenclatures(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionArchiveManagementWebClientModelsSearchRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiNomenclatureDirectorySearch(request: DocsVisionArchiveManagementWebClientModelsSearchRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionArchiveManagementServerExtensionNomenclatureDirectoryModelsSearchResponseDocsVisionArchiveManagementServerExtension> {
            return localVarFp.postApiNomenclatureDirectorySearch(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NomenclatureDirectoryApi - object-oriented interface
 * @export
 * @class NomenclatureDirectoryApi
 * @extends {BaseAPI}
 */
export class NomenclatureDirectoryApi extends BaseAPI {
    /**
     * 
     * @param {string} currentYearRowId 
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public getApiNomenclatureDirectoryCheckYearUniqueness(currentYearRowId: string, year: number, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).getApiNomenclatureDirectoryCheckYearUniqueness(currentYearRowId, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [createParamsCardTypeId] 
     * @param {string} [createParamsKindId] 
     * @param {string} [createParamsFolderId] 
     * @param {string} [createParamsTemplateId] 
     * @param {string} [createParamsParentCardId] 
     * @param {string} [createParamsLayoutMode] 
     * @param {string} [createParamsCreateAsLinkSourceCardId] 
     * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
     * @param {string} [createParamsCreateAsLinkLinkTypeId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
     * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
     * @param {boolean} [createParamsCreateAsLinkIsReport] 
     * @param {string} [createParamsCreateAsLinkEditOperation] 
     * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
     * @param {GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
     * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
     * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
     * @param {Array<object>} [createParamsLayoutParams] 
     * @param {string} [createParamsSourceLayoutMode] 
     * @param {object} [createParamsCustomContext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public getApiNomenclatureDirectoryId(id: string, createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).getApiNomenclatureDirectoryId(id, createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [createParamsCardTypeId] 
     * @param {string} [createParamsKindId] 
     * @param {string} [createParamsFolderId] 
     * @param {string} [createParamsTemplateId] 
     * @param {string} [createParamsParentCardId] 
     * @param {string} [createParamsLayoutMode] 
     * @param {string} [createParamsCreateAsLinkSourceCardId] 
     * @param {number} [createParamsCreateAsLinkSourceCardTimestamp] 
     * @param {string} [createParamsCreateAsLinkLinkTypeId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingDataSourceResolverId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingSectionId] 
     * @param {string} [createParamsCreateAsLinkLinksBindingFieldAlias] 
     * @param {boolean} [createParamsCreateAsLinkSaveHardLink] 
     * @param {boolean} [createParamsCreateAsLinkIsReport] 
     * @param {string} [createParamsCreateAsLinkEditOperation] 
     * @param {string} [createParamsRelatedCreatorCardInfoInitialCardId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId] 
     * @param {string} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId] 
     * @param {GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation] 
     * @param {object} [createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext] 
     * @param {Array<object>} [createParamsRelatedCreatorCardInfoParameters] 
     * @param {Array<object>} [createParamsLayoutParams] 
     * @param {string} [createParamsSourceLayoutMode] 
     * @param {object} [createParamsCustomContext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public getApiNomenclatureDirectoryNewArchiveCaseCard(createParamsCardTypeId?: string, createParamsKindId?: string, createParamsFolderId?: string, createParamsTemplateId?: string, createParamsParentCardId?: string, createParamsLayoutMode?: string, createParamsCreateAsLinkSourceCardId?: string, createParamsCreateAsLinkSourceCardTimestamp?: number, createParamsCreateAsLinkLinkTypeId?: string, createParamsCreateAsLinkLinksBindingDataSourceResolverId?: string, createParamsCreateAsLinkLinksBindingSectionId?: string, createParamsCreateAsLinkLinksBindingFieldAlias?: string, createParamsCreateAsLinkSaveHardLink?: boolean, createParamsCreateAsLinkIsReport?: boolean, createParamsCreateAsLinkEditOperation?: string, createParamsRelatedCreatorCardInfoInitialCardId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId?: string, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation?: GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext?: object, createParamsRelatedCreatorCardInfoParameters?: Array<object>, createParamsLayoutParams?: Array<object>, createParamsSourceLayoutMode?: string, createParamsCustomContext?: object, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).getApiNomenclatureDirectoryNewArchiveCaseCard(createParamsCardTypeId, createParamsKindId, createParamsFolderId, createParamsTemplateId, createParamsParentCardId, createParamsLayoutMode, createParamsCreateAsLinkSourceCardId, createParamsCreateAsLinkSourceCardTimestamp, createParamsCreateAsLinkLinkTypeId, createParamsCreateAsLinkLinksBindingDataSourceResolverId, createParamsCreateAsLinkLinksBindingSectionId, createParamsCreateAsLinkLinksBindingFieldAlias, createParamsCreateAsLinkSaveHardLink, createParamsCreateAsLinkIsReport, createParamsCreateAsLinkEditOperation, createParamsRelatedCreatorCardInfoInitialCardId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelDisplayName, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelTemplateId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelFolderId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLinkTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardKindId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelCardTypeId, createParamsRelatedCreatorCardInfoCreateRelatedCardModelLocation, createParamsRelatedCreatorCardInfoCreateRelatedCardModelOperationContext, createParamsRelatedCreatorCardInfoParameters, createParamsLayoutParams, createParamsSourceLayoutMode, createParamsCustomContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public postApiNomenclatureDirectoryAddYearNomenclature(request: DocsVisionArchiveManagementWebClientModelsAddYearNomenclatureRequest, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).postApiNomenclatureDirectoryAddYearNomenclature(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public postApiNomenclatureDirectoryCopyUnitNomenclatures(request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).postApiNomenclatureDirectoryCopyUnitNomenclatures(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public postApiNomenclatureDirectoryCreateArchiveCaseRow(request: DocsVisionArchiveManagementWebClientModelsCreateArchiveCaseRowRequest, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).postApiNomenclatureDirectoryCreateArchiveCaseRow(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public postApiNomenclatureDirectoryGetArchiveCases(query: DocsVisionArchiveManagementWebClientModelsArchiveCasesLoadRequest, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).postApiNomenclatureDirectoryGetArchiveCases(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public postApiNomenclatureDirectoryGetUnitNomenclatures(query: DocsVisionArchiveManagementWebClientModelsUnitNomenclaturesRequest, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).postApiNomenclatureDirectoryGetUnitNomenclatures(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public postApiNomenclatureDirectoryMoveUnitNomenclatures(request: DocsVisionArchiveManagementWebClientModelsCopyNomenclatureRequestModel, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).postApiNomenclatureDirectoryMoveUnitNomenclatures(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionArchiveManagementWebClientModelsSearchRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NomenclatureDirectoryApi
     */
    public postApiNomenclatureDirectorySearch(request: DocsVisionArchiveManagementWebClientModelsSearchRequest, options?: AxiosRequestConfig) {
        return NomenclatureDirectoryApiFp(this.configuration).postApiNomenclatureDirectorySearch(request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum = typeof GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum[keyof typeof GetApiNomenclatureDirectoryIdCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum];
/**
 * @export
 */
export const GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum = typeof GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum[keyof typeof GetApiNomenclatureDirectoryNewArchiveCaseCardCreateParamsRelatedCreatorCardInfoCreateRelatedCardModelLocationEnum];


/**
 * PagesApi - axios parameter creator
 * @export
 */
export const PagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get favorites cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesFavorites: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiPagesFavorites', 'requestModel', requestModel)
            const localVarPath = `/api/Pages/Favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get favorites cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesFavoritesCardsGridModel: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiPagesFavoritesCardsGridModel', 'requestModel', requestModel)
            const localVarPath = `/api/Pages/FavoritesCardsGridModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesRecentCards: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiPagesRecentCards', 'requestModel', requestModel)
            const localVarPath = `/api/Pages/RecentCards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsRecentCardsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesRecentCardsEx: async (request: DocsVisionWebClientModelsRecentCardsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPagesRecentCardsEx', 'request', request)
            const localVarPath = `/api/Pages/RecentCardsEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesRecentCardsGridModel: async (requestModel: DocsVisionWebClientModelsCardListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiPagesRecentCardsGridModel', 'requestModel', requestModel)
            const localVarPath = `/api/Pages/RecentCardsGridModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PagesApi - functional programming interface
 * @export
 */
export const PagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get favorites cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPagesFavorites(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsCardListViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPagesFavorites(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get favorites cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPagesFavoritesCardsGridModel(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsGridGridViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPagesFavoritesCardsGridModel(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPagesRecentCards(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsCardListViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPagesRecentCards(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsRecentCardsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPagesRecentCardsEx(request: DocsVisionWebClientModelsRecentCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsCardListViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPagesRecentCardsEx(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPagesRecentCardsGridModel(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsGridGridViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPagesRecentCardsGridModel(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PagesApi - factory interface
 * @export
 */
export const PagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PagesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get favorites cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesFavorites(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsCardListViewModel> {
            return localVarFp.postApiPagesFavorites(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get favorites cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesFavoritesCardsGridModel(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsGridGridViewModel> {
            return localVarFp.postApiPagesFavoritesCardsGridModel(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesRecentCards(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsCardListViewModel> {
            return localVarFp.postApiPagesRecentCards(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsRecentCardsRequest} request Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesRecentCardsEx(request: DocsVisionWebClientModelsRecentCardsRequest, options?: any): AxiosPromise<DocsVisionWebClientModelsCardListViewModel> {
            return localVarFp.postApiPagesRecentCardsEx(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get recent cards
         * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPagesRecentCardsGridModel(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsGridGridViewModel> {
            return localVarFp.postApiPagesRecentCardsGridModel(requestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PagesApi - object-oriented interface
 * @export
 * @class PagesApi
 * @extends {BaseAPI}
 */
export class PagesApi extends BaseAPI {
    /**
     * 
     * @summary Get favorites cards
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public postApiPagesFavorites(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).postApiPagesFavorites(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get favorites cards
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public postApiPagesFavoritesCardsGridModel(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).postApiPagesFavoritesCardsGridModel(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get recent cards
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public postApiPagesRecentCards(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).postApiPagesRecentCards(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get recent cards
     * @param {DocsVisionWebClientModelsRecentCardsRequest} request Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public postApiPagesRecentCardsEx(request: DocsVisionWebClientModelsRecentCardsRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).postApiPagesRecentCardsEx(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get recent cards
     * @param {DocsVisionWebClientModelsCardListRequestModel} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public postApiPagesRecentCardsGridModel(requestModel: DocsVisionWebClientModelsCardListRequestModel, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).postApiPagesRecentCardsGridModel(requestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PartnerEmployeeApi - axios parameter creator
 * @export
 */
export const PartnerEmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get partner employee by id
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPartnerEmployeeGetPartnerEmployee: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('postApiPartnerEmployeeGetPartnerEmployee', 'employeeId', employeeId)
            const localVarPath = `/api/PartnerEmployee/GetPartnerEmployee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get employees by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModel} employees 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPartnerEmployeeGetPartnerEmployees: async (employees: DocsVisionWebClientModelsCollectionRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employees' is not null or undefined
            assertParamExists('postApiPartnerEmployeeGetPartnerEmployees', 'employees', employees)
            const localVarPath = `/api/PartnerEmployee/GetPartnerEmployees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employees, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnerEmployeeApi - functional programming interface
 * @export
 */
export const PartnerEmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnerEmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get partner employee by id
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPartnerEmployeeGetPartnerEmployee(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPartnerEmployeeGetPartnerEmployee(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get employees by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModel} employees 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPartnerEmployeeGetPartnerEmployees(employees: DocsVisionWebClientModelsCollectionRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPartnerEmployeeGetPartnerEmployees(employees, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartnerEmployeeApi - factory interface
 * @export
 */
export const PartnerEmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnerEmployeeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get partner employee by id
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPartnerEmployeeGetPartnerEmployee(employeeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiPartnerEmployeeGetPartnerEmployee(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get employees by list of ids.
         * @param {DocsVisionWebClientModelsCollectionRequestModel} employees 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPartnerEmployeeGetPartnerEmployees(employees: DocsVisionWebClientModelsCollectionRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponse1SystemCollectionsGenericListDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiPartnerEmployeeGetPartnerEmployees(employees, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartnerEmployeeApi - object-oriented interface
 * @export
 * @class PartnerEmployeeApi
 * @extends {BaseAPI}
 */
export class PartnerEmployeeApi extends BaseAPI {
    /**
     * 
     * @summary Get partner employee by id
     * @param {string} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerEmployeeApi
     */
    public postApiPartnerEmployeeGetPartnerEmployee(employeeId: string, options?: AxiosRequestConfig) {
        return PartnerEmployeeApiFp(this.configuration).postApiPartnerEmployeeGetPartnerEmployee(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get employees by list of ids.
     * @param {DocsVisionWebClientModelsCollectionRequestModel} employees 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerEmployeeApi
     */
    public postApiPartnerEmployeeGetPartnerEmployees(employees: DocsVisionWebClientModelsCollectionRequestModel, options?: AxiosRequestConfig) {
        return PartnerEmployeeApiFp(this.configuration).postApiPartnerEmployeeGetPartnerEmployees(employees, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PowerOfAttorneyApiApi - axios parameter creator
 * @export
 */
export const PowerOfAttorneyApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Save power of attorney to archive and return as attachment
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {boolean} withSignature Include signature data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiExportPowerOfAttorney: async (powerOfAttorneyId: string, withSignature: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyId' is not null or undefined
            assertParamExists('getApiPowerOfAttorneyApiExportPowerOfAttorney', 'powerOfAttorneyId', powerOfAttorneyId)
            // verify required parameter 'withSignature' is not null or undefined
            assertParamExists('getApiPowerOfAttorneyApiExportPowerOfAttorney', 'withSignature', withSignature)
            const localVarPath = `/api/PowerOfAttorneyApi/ExportPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyId !== undefined) {
                localVarQueryParameter['powerOfAttorneyId'] = powerOfAttorneyId;
            }

            if (withSignature !== undefined) {
                localVarQueryParameter['withSignature'] = withSignature;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save revocation of power of attorney to archive and return as attachment
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation: async (powerOfAttorneyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyId' is not null or undefined
            assertParamExists('getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation', 'powerOfAttorneyId', powerOfAttorneyId)
            const localVarPath = `/api/PowerOfAttorneyApi/ExportPowerOfAttorneyRevocation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyId !== undefined) {
                localVarQueryParameter['powerOfAttorneyId'] = powerOfAttorneyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the contents of a machine-readable power of attorney
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData: async (powerOfAttorneyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyId' is not null or undefined
            assertParamExists('getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData', 'powerOfAttorneyId', powerOfAttorneyId)
            const localVarPath = `/api/PowerOfAttorneyApi/GetMachineReadablePowerOfAttorneyData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyId !== undefined) {
                localVarQueryParameter['powerOfAttorneyId'] = powerOfAttorneyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get power of attorney info
         * @param {string} cardID Power of attorney card ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo: async (cardID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardID' is not null or undefined
            assertParamExists('getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo', 'cardID', cardID)
            const localVarPath = `/api/PowerOfAttorneyApi/GetPowerOfAttorneyInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardID !== undefined) {
                localVarQueryParameter['cardID'] = cardID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get power of attorney info
         * @param {string} cardID Power of attorney card ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiId: async (cardID: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardID' is not null or undefined
            assertParamExists('getApiPowerOfAttorneyApiId', 'cardID', cardID)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiPowerOfAttorneyApiId', 'id', id)
            const localVarPath = `/api/PowerOfAttorneyApi/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardID !== undefined) {
                localVarQueryParameter['cardID'] = cardID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds disconnected signature of machine-readable power of attorney to power of attorney system card
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney: async (request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney', 'request', request)
            const localVarPath = `/api/PowerOfAttorneyApi/AttachSignatureToPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a signature to the revocation of a machine-readable power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney: async (request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney', 'request', request)
            const localVarPath = `/api/PowerOfAttorneyApi/AttachSignatureToRevocationPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search power of attorney
         * @param {DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest} request Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiFindPowersOfAttorney: async (request: DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowerOfAttorneyApiFindPowersOfAttorney', 'request', request)
            const localVarPath = `/api/PowerOfAttorneyApi/FindPowersOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * No need to request for revocation of power of attorney for using this method  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
         * @summary Marks power of attorney as revoked
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney: async (request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney', 'request', request)
            const localVarPath = `/api/PowerOfAttorneyApi/MarkAsRevokedPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates request to revoke power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest} request Revoke request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney: async (request: DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney', 'request', request)
            const localVarPath = `/api/PowerOfAttorneyApi/RequestRevocationPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For revoked power of attorney, request for revocation of power of attorney must be pre-formed  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
         * @summary Revokes power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiRevokePowerOfAttorney: async (request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowerOfAttorneyApiRevokePowerOfAttorney', 'request', request)
            const localVarPath = `/api/PowerOfAttorneyApi/RevokePowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PowerOfAttorneyApiApi - functional programming interface
 * @export
 */
export const PowerOfAttorneyApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PowerOfAttorneyApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Save power of attorney to archive and return as attachment
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {boolean} withSignature Include signature data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPowerOfAttorneyApiExportPowerOfAttorney(powerOfAttorneyId: string, withSignature: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPowerOfAttorneyApiExportPowerOfAttorney(powerOfAttorneyId, withSignature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save revocation of power of attorney to archive and return as attachment
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation(powerOfAttorneyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation(powerOfAttorneyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the contents of a machine-readable power of attorney
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData(powerOfAttorneyId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData(powerOfAttorneyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get power of attorney info
         * @param {string} cardID Power of attorney card ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo(cardID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo(cardID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get power of attorney info
         * @param {string} cardID Power of attorney card ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPowerOfAttorneyApiId(cardID: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPowerOfAttorneyApiId(cardID, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds disconnected signature of machine-readable power of attorney to power of attorney system card
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds a signature to the revocation of a machine-readable power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search power of attorney
         * @param {DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest} request Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowerOfAttorneyApiFindPowersOfAttorney(request: DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowerOfAttorneyApiFindPowersOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * No need to request for revocation of power of attorney for using this method  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
         * @summary Marks power of attorney as revoked
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generates request to revoke power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest} request Revoke request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For revoked power of attorney, request for revocation of power of attorney must be pre-formed  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
         * @summary Revokes power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowerOfAttorneyApiRevokePowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowerOfAttorneyApiRevokePowerOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PowerOfAttorneyApiApi - factory interface
 * @export
 */
export const PowerOfAttorneyApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PowerOfAttorneyApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Save power of attorney to archive and return as attachment
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {boolean} withSignature Include signature data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiExportPowerOfAttorney(powerOfAttorneyId: string, withSignature: boolean, options?: any): AxiosPromise<object> {
            return localVarFp.getApiPowerOfAttorneyApiExportPowerOfAttorney(powerOfAttorneyId, withSignature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save revocation of power of attorney to archive and return as attachment
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation(powerOfAttorneyId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation(powerOfAttorneyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the contents of a machine-readable power of attorney
         * @param {string} powerOfAttorneyId ID of power of attorney
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData(powerOfAttorneyId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyGetPowerOfAttorneyInfoResponse> {
            return localVarFp.getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData(powerOfAttorneyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get power of attorney info
         * @param {string} cardID Power of attorney card ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo(cardID: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel> {
            return localVarFp.getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo(cardID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get power of attorney info
         * @param {string} cardID Power of attorney card ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowerOfAttorneyApiId(cardID: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyPowerOfAttorneyInfoModel> {
            return localVarFp.getApiPowerOfAttorneyApiId(cardID, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds disconnected signature of machine-readable power of attorney to power of attorney system card
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a signature to the revocation of a machine-readable power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search power of attorney
         * @param {DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest} request Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiFindPowersOfAttorney(request: DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyFindPowersOfAttorneyResponse> {
            return localVarFp.postApiPowerOfAttorneyApiFindPowersOfAttorney(request, options).then((request) => request(axios, basePath));
        },
        /**
         * No need to request for revocation of power of attorney for using this method  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
         * @summary Marks power of attorney as revoked
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generates request to revoke power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest} request Revoke request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersOfAttorneyRevocationPowerOfAttorneyResponse> {
            return localVarFp.postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney(request, options).then((request) => request(axios, basePath));
        },
        /**
         * For revoked power of attorney, request for revocation of power of attorney must be pre-formed  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
         * @summary Revokes power of attorney
         * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowerOfAttorneyApiRevokePowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiPowerOfAttorneyApiRevokePowerOfAttorney(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PowerOfAttorneyApiApi - object-oriented interface
 * @export
 * @class PowerOfAttorneyApiApi
 * @extends {BaseAPI}
 */
export class PowerOfAttorneyApiApi extends BaseAPI {
    /**
     * 
     * @summary Save power of attorney to archive and return as attachment
     * @param {string} powerOfAttorneyId ID of power of attorney
     * @param {boolean} withSignature Include signature data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public getApiPowerOfAttorneyApiExportPowerOfAttorney(powerOfAttorneyId: string, withSignature: boolean, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).getApiPowerOfAttorneyApiExportPowerOfAttorney(powerOfAttorneyId, withSignature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save revocation of power of attorney to archive and return as attachment
     * @param {string} powerOfAttorneyId ID of power of attorney
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation(powerOfAttorneyId: string, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).getApiPowerOfAttorneyApiExportPowerOfAttorneyRevocation(powerOfAttorneyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the contents of a machine-readable power of attorney
     * @param {string} powerOfAttorneyId ID of power of attorney
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData(powerOfAttorneyId: string, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).getApiPowerOfAttorneyApiGetMachineReadablePowerOfAttorneyData(powerOfAttorneyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get power of attorney info
     * @param {string} cardID Power of attorney card ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo(cardID: string, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).getApiPowerOfAttorneyApiGetPowerOfAttorneyInfo(cardID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get power of attorney info
     * @param {string} cardID Power of attorney card ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public getApiPowerOfAttorneyApiId(cardID: string, id: string, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).getApiPowerOfAttorneyApiId(cardID, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds disconnected signature of machine-readable power of attorney to power of attorney system card
     * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).postApiPowerOfAttorneyApiAttachSignatureToPowerOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a signature to the revocation of a machine-readable power of attorney
     * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest} request Signing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyAttachSignatureToPowerOfAttorneyRequest, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).postApiPowerOfAttorneyApiAttachSignatureToRevocationPowerOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search power of attorney
     * @param {DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest} request Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public postApiPowerOfAttorneyApiFindPowersOfAttorney(request: DocsVisionBackOfficeCardsWebModelFindPowersOfAttorneyRequest, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).postApiPowerOfAttorneyApiFindPowersOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * No need to request for revocation of power of attorney for using this method  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
     * @summary Marks power of attorney as revoked
     * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).postApiPowerOfAttorneyApiMarkAsRevokedPowerOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generates request to revoke power of attorney
     * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest} request Revoke request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRequestRevocationPowerOfAttorneyRequest, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).postApiPowerOfAttorneyApiRequestRevocationPowerOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For revoked power of attorney, request for revocation of power of attorney must be pre-formed  Power of attorney may be revoked together with subsidiaries. To do this, WithChildrenPowerOfAttorney flag must be set in request
     * @summary Revokes power of attorney
     * @param {DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest} request Revocation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowerOfAttorneyApiApi
     */
    public postApiPowerOfAttorneyApiRevokePowerOfAttorney(request: DocsVisionBackOfficeWebClientPowersOfAttorneyRevokePowerOfAttorneyRequest, options?: AxiosRequestConfig) {
        return PowerOfAttorneyApiApiFp(this.configuration).postApiPowerOfAttorneyApiRevokePowerOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PowersDirectoryApi - axios parameter creator
 * @export
 */
export const PowersDirectoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get data
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest} request Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryGetData: async (request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowersDirectoryGetData', 'request', request)
            const localVarPath = `/api/PowersDirectory/GetData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import powers NSI
         * @param {string} data NSI data (must be in Base64)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryImportPowers: async (data: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('postApiPowersDirectoryImportPowers', 'data', data)
            const localVarPath = `/api/PowersDirectory/ImportPowers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move code to another group
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest} request Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryMoveCode: async (request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowersDirectoryMoveCode', 'request', request)
            const localVarPath = `/api/PowersDirectory/MoveCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Quick search powers
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest} request Search data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryQuickSearchPowers: async (request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowersDirectoryQuickSearchPowers', 'request', request)
            const localVarPath = `/api/PowersDirectory/QuickSearchPowers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PowersDirectoryApi - functional programming interface
 * @export
 */
export const PowersDirectoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PowersDirectoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get data
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest} request Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersDirectoryGetData(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersDirectoryGetData(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Import powers NSI
         * @param {string} data NSI data (must be in Base64)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersDirectoryImportPowers(data: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersDirectoryImportPowers(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Move code to another group
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest} request Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersDirectoryMoveCode(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersDirectoryMoveCode(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Quick search powers
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest} request Search data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersDirectoryQuickSearchPowers(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersDirectoryQuickSearchPowers(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PowersDirectoryApi - factory interface
 * @export
 */
export const PowersDirectoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PowersDirectoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Get data
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest} request Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryGetData(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsGetDataResponse> {
            return localVarFp.postApiPowersDirectoryGetData(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import powers NSI
         * @param {string} data NSI data (must be in Base64)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryImportPowers(data: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsImportPowersResponse> {
            return localVarFp.postApiPowersDirectoryImportPowers(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move code to another group
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest} request Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryMoveCode(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiPowersDirectoryMoveCode(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Quick search powers
         * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest} request Search data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersDirectoryQuickSearchPowers(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientPowersDirectoryModelsSearchPowersQueryResponse> {
            return localVarFp.postApiPowersDirectoryQuickSearchPowers(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PowersDirectoryApi - object-oriented interface
 * @export
 * @class PowersDirectoryApi
 * @extends {BaseAPI}
 */
export class PowersDirectoryApi extends BaseAPI {
    /**
     * 
     * @summary Get data
     * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest} request Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersDirectoryApi
     */
    public postApiPowersDirectoryGetData(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsGetDataRequest, options?: AxiosRequestConfig) {
        return PowersDirectoryApiFp(this.configuration).postApiPowersDirectoryGetData(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import powers NSI
     * @param {string} data NSI data (must be in Base64)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersDirectoryApi
     */
    public postApiPowersDirectoryImportPowers(data: string, options?: AxiosRequestConfig) {
        return PowersDirectoryApiFp(this.configuration).postApiPowersDirectoryImportPowers(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move code to another group
     * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest} request Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersDirectoryApi
     */
    public postApiPowersDirectoryMoveCode(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsMoveCodeRequest, options?: AxiosRequestConfig) {
        return PowersDirectoryApiFp(this.configuration).postApiPowersDirectoryMoveCode(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Quick search powers
     * @param {DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest} request Search data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersDirectoryApi
     */
    public postApiPowersDirectoryQuickSearchPowers(request: DocsVisionBackOfficeWebClientPowersDirectoryRequestsSearchPowersRequest, options?: AxiosRequestConfig) {
        return PowersDirectoryApiFp(this.configuration).postApiPowersDirectoryQuickSearchPowers(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PowersOfAttorneyDemoApi - axios parameter creator
 * @export
 */
export const PowersOfAttorneyDemoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId: async (powerOfAttorneyUserCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyUserCardId' is not null or undefined
            assertParamExists('getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId', 'powerOfAttorneyUserCardId', powerOfAttorneyUserCardId)
            const localVarPath = `/api/PowersOfAttorneyDemo/GetPowerOfAttorneyCardId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyUserCardId !== undefined) {
                localVarQueryParameter['powerOfAttorneyUserCardId'] = powerOfAttorneyUserCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber: async (powerOfAttorneyUserCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyUserCardId' is not null or undefined
            assertParamExists('getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber', 'powerOfAttorneyUserCardId', powerOfAttorneyUserCardId)
            const localVarPath = `/api/PowersOfAttorneyDemo/GetPowerOfAttorneyNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyUserCardId !== undefined) {
                localVarQueryParameter['powerOfAttorneyUserCardId'] = powerOfAttorneyUserCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney: async (powerOfAttorneyUserCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyUserCardId' is not null or undefined
            assertParamExists('postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney', 'powerOfAttorneyUserCardId', powerOfAttorneyUserCardId)
            const localVarPath = `/api/PowersOfAttorneyDemo/CreateEMCHDPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyUserCardId !== undefined) {
                localVarQueryParameter['powerOfAttorneyUserCardId'] = powerOfAttorneyUserCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney: async (powerOfAttorneyUserCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyUserCardId' is not null or undefined
            assertParamExists('postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney', 'powerOfAttorneyUserCardId', powerOfAttorneyUserCardId)
            const localVarPath = `/api/PowersOfAttorneyDemo/CreateEMCHDRetrustPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyUserCardId !== undefined) {
                localVarQueryParameter['powerOfAttorneyUserCardId'] = powerOfAttorneyUserCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreatePowerOfAttorney: async (powerOfAttorneyUserCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyUserCardId' is not null or undefined
            assertParamExists('postApiPowersOfAttorneyDemoCreatePowerOfAttorney', 'powerOfAttorneyUserCardId', powerOfAttorneyUserCardId)
            const localVarPath = `/api/PowersOfAttorneyDemo/CreatePowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyUserCardId !== undefined) {
                localVarQueryParameter['powerOfAttorneyUserCardId'] = powerOfAttorneyUserCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney: async (powerOfAttorneyUserCardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'powerOfAttorneyUserCardId' is not null or undefined
            assertParamExists('postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney', 'powerOfAttorneyUserCardId', powerOfAttorneyUserCardId)
            const localVarPath = `/api/PowersOfAttorneyDemo/CreateRetrustPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (powerOfAttorneyUserCardId !== undefined) {
                localVarQueryParameter['powerOfAttorneyUserCardId'] = powerOfAttorneyUserCardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoId: async (id: string, request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiPowersOfAttorneyDemoId', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowersOfAttorneyDemoId', 'request', request)
            const localVarPath = `/api/PowersOfAttorneyDemo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney: async (request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney', 'request', request)
            const localVarPath = `/api/PowersOfAttorneyDemo/RequestRevocationPowerOfAttorney`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PowersOfAttorneyDemoApi - functional programming interface
 * @export
 */
export const PowersOfAttorneyDemoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PowersOfAttorneyDemoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId(powerOfAttorneyUserCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber(powerOfAttorneyUserCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney(powerOfAttorneyUserCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney(powerOfAttorneyUserCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersOfAttorneyDemoCreatePowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersOfAttorneyDemoCreatePowerOfAttorney(powerOfAttorneyUserCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney(powerOfAttorneyUserCardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersOfAttorneyDemoId(id: string, request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersOfAttorneyDemoId(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney(request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PowersOfAttorneyDemoApi - factory interface
 * @export
 */
export const PowersOfAttorneyDemoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PowersOfAttorneyDemoApiFp(configuration)
    return {
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId(powerOfAttorneyUserCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId(powerOfAttorneyUserCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber(powerOfAttorneyUserCardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber(powerOfAttorneyUserCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreatePowerOfAttorney(powerOfAttorneyUserCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.postApiPowersOfAttorneyDemoCreatePowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} powerOfAttorneyUserCardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoId(id: string, request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29> {
            return localVarFp.postApiPowersOfAttorneyDemoId(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney(request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponsePowersOfAttorneyServerExtensionModelsRequestRevocationResponsePowersOfAttorneyServerExtensionVersion5570CultureneutralPublicKeyToken4a2caa47aa5b6b29> {
            return localVarFp.postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PowersOfAttorneyDemoApi - object-oriented interface
 * @export
 * @class PowersOfAttorneyDemoApi
 * @extends {BaseAPI}
 */
export class PowersOfAttorneyDemoApi extends BaseAPI {
    /**
     * 
     * @param {string} powerOfAttorneyUserCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).getApiPowersOfAttorneyDemoGetPowerOfAttorneyCardId(powerOfAttorneyUserCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} powerOfAttorneyUserCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).getApiPowersOfAttorneyDemoGetPowerOfAttorneyNumber(powerOfAttorneyUserCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} powerOfAttorneyUserCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).postApiPowersOfAttorneyDemoCreateEMCHDPowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} powerOfAttorneyUserCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).postApiPowersOfAttorneyDemoCreateEMCHDRetrustPowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} powerOfAttorneyUserCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public postApiPowersOfAttorneyDemoCreatePowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).postApiPowersOfAttorneyDemoCreatePowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} powerOfAttorneyUserCardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney(powerOfAttorneyUserCardId: string, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).postApiPowersOfAttorneyDemoCreateRetrustPowerOfAttorney(powerOfAttorneyUserCardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public postApiPowersOfAttorneyDemoId(id: string, request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).postApiPowersOfAttorneyDemoId(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PowersOfAttorneyServerExtensionModelsRequestRevocationRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PowersOfAttorneyDemoApi
     */
    public postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney(request: PowersOfAttorneyServerExtensionModelsRequestRevocationRequest, options?: AxiosRequestConfig) {
        return PowersOfAttorneyDemoApiFp(this.configuration).postApiPowersOfAttorneyDemoRequestRevocationPowerOfAttorney(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProcessesV1Api - axios parameter creator
 * @export
 */
export const ProcessesV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1ProcessesProcessId: async (processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('getApiV1ProcessesProcessId', 'processId', processId)
            const localVarPath = `/api/v1/processes/{processId}`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1ProcessesProcessIdState: async (processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('getApiV1ProcessesProcessIdState', 'processId', processId)
            const localVarPath = `/api/v1/processes/{processId}/state`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModelsProcessInitializationParameters} initializationParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Processes: async (initializationParameters: DocsVisionWebClientWebApiModelsProcessInitializationParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'initializationParameters' is not null or undefined
            assertParamExists('postApiV1Processes', 'initializationParameters', initializationParameters)
            const localVarPath = `/api/v1/processes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(initializationParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1ProcessesProcessIdPause: async (processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('putApiV1ProcessesProcessIdPause', 'processId', processId)
            const localVarPath = `/api/v1/processes/{processId}/pause`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1ProcessesProcessIdResume: async (processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('putApiV1ProcessesProcessIdResume', 'processId', processId)
            const localVarPath = `/api/v1/processes/{processId}/resume`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1ProcessesProcessIdStop: async (processId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'processId' is not null or undefined
            assertParamExists('putApiV1ProcessesProcessIdStop', 'processId', processId)
            const localVarPath = `/api/v1/processes/{processId}/stop`
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProcessesV1Api - functional programming interface
 * @export
 */
export const ProcessesV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProcessesV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1ProcessesProcessId(processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsProcessModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1ProcessesProcessId(processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1ProcessesProcessIdState(processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1ProcessesProcessIdState(processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModelsProcessInitializationParameters} initializationParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1Processes(initializationParameters: DocsVisionWebClientWebApiModelsProcessInitializationParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1Processes(initializationParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1ProcessesProcessIdPause(processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1ProcessesProcessIdPause(processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1ProcessesProcessIdResume(processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1ProcessesProcessIdResume(processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1ProcessesProcessIdStop(processId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1ProcessesProcessIdStop(processId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProcessesV1Api - factory interface
 * @export
 */
export const ProcessesV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProcessesV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1ProcessesProcessId(processId: string, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsProcessModel> {
            return localVarFp.getApiV1ProcessesProcessId(processId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1ProcessesProcessIdState(processId: string, options?: any): AxiosPromise<number> {
            return localVarFp.getApiV1ProcessesProcessIdState(processId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModelsProcessInitializationParameters} initializationParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Processes(initializationParameters: DocsVisionWebClientWebApiModelsProcessInitializationParameters, options?: any): AxiosPromise<string> {
            return localVarFp.postApiV1Processes(initializationParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1ProcessesProcessIdPause(processId: string, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1ProcessesProcessIdPause(processId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1ProcessesProcessIdResume(processId: string, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1ProcessesProcessIdResume(processId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} processId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1ProcessesProcessIdStop(processId: string, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1ProcessesProcessIdStop(processId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProcessesV1Api - object-oriented interface
 * @export
 * @class ProcessesV1Api
 * @extends {BaseAPI}
 */
export class ProcessesV1Api extends BaseAPI {
    /**
     * 
     * @param {string} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1Api
     */
    public getApiV1ProcessesProcessId(processId: string, options?: AxiosRequestConfig) {
        return ProcessesV1ApiFp(this.configuration).getApiV1ProcessesProcessId(processId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1Api
     */
    public getApiV1ProcessesProcessIdState(processId: string, options?: AxiosRequestConfig) {
        return ProcessesV1ApiFp(this.configuration).getApiV1ProcessesProcessIdState(processId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientWebApiModelsProcessInitializationParameters} initializationParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1Api
     */
    public postApiV1Processes(initializationParameters: DocsVisionWebClientWebApiModelsProcessInitializationParameters, options?: AxiosRequestConfig) {
        return ProcessesV1ApiFp(this.configuration).postApiV1Processes(initializationParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1Api
     */
    public putApiV1ProcessesProcessIdPause(processId: string, options?: AxiosRequestConfig) {
        return ProcessesV1ApiFp(this.configuration).putApiV1ProcessesProcessIdPause(processId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1Api
     */
    public putApiV1ProcessesProcessIdResume(processId: string, options?: AxiosRequestConfig) {
        return ProcessesV1ApiFp(this.configuration).putApiV1ProcessesProcessIdResume(processId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} processId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProcessesV1Api
     */
    public putApiV1ProcessesProcessIdStop(processId: string, options?: AxiosRequestConfig) {
        return ProcessesV1ApiFp(this.configuration).putApiV1ProcessesProcessIdStop(processId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * R7OfficeApi - axios parameter creator
 * @export
 */
export const R7OfficeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
         * @param {string} id 
         * @param {string} accountName 
         * @param {string} idext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiR7OfficeGetFileId: async (id: string, accountName: string, idext: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiR7OfficeGetFileId', 'id', id)
            // verify required parameter 'accountName' is not null or undefined
            assertParamExists('getApiR7OfficeGetFileId', 'accountName', accountName)
            // verify required parameter 'idext' is not null or undefined
            assertParamExists('getApiR7OfficeGetFileId', 'idext', idext)
            const localVarPath = `/api/R7Office/GetFile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountName !== undefined) {
                localVarQueryParameter['accountName'] = accountName;
            }

            if (idext !== undefined) {
                localVarQueryParameter['idext'] = idext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
         * @param {string} id 
         * @param {string} accountName 
         * @param {string} idext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiR7OfficeId: async (id: string, accountName: string, idext: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiR7OfficeId', 'id', id)
            // verify required parameter 'accountName' is not null or undefined
            assertParamExists('getApiR7OfficeId', 'accountName', accountName)
            // verify required parameter 'idext' is not null or undefined
            assertParamExists('getApiR7OfficeId', 'idext', idext)
            const localVarPath = `/api/R7Office/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountName !== undefined) {
                localVarQueryParameter['accountName'] = accountName;
            }

            if (idext !== undefined) {
                localVarQueryParameter['idext'] = idext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * R7OfficeApi - functional programming interface
 * @export
 */
export const R7OfficeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = R7OfficeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
         * @param {string} id 
         * @param {string} accountName 
         * @param {string} idext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiR7OfficeGetFileId(id: string, accountName: string, idext: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiR7OfficeGetFileId(id, accountName, idext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
         * @param {string} id 
         * @param {string} accountName 
         * @param {string} idext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiR7OfficeId(id: string, accountName: string, idext: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiR7OfficeId(id, accountName, idext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * R7OfficeApi - factory interface
 * @export
 */
export const R7OfficeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = R7OfficeApiFp(configuration)
    return {
        /**
         * 
         * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
         * @param {string} id 
         * @param {string} accountName 
         * @param {string} idext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiR7OfficeGetFileId(id: string, accountName: string, idext: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiR7OfficeGetFileId(id, accountName, idext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
         * @param {string} id 
         * @param {string} accountName 
         * @param {string} idext 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiR7OfficeId(id: string, accountName: string, idext: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiR7OfficeId(id, accountName, idext, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * R7OfficeApi - object-oriented interface
 * @export
 * @class R7OfficeApi
 * @extends {BaseAPI}
 */
export class R7OfficeApi extends BaseAPI {
    /**
     * 
     * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
     * @param {string} id 
     * @param {string} accountName 
     * @param {string} idext 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof R7OfficeApi
     */
    public getApiR7OfficeGetFileId(id: string, accountName: string, idext: string, options?: AxiosRequestConfig) {
        return R7OfficeApiFp(this.configuration).getApiR7OfficeGetFileId(id, accountName, idext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary РџРѕР»СѓС‡РµРЅРёРµ С„Р°Р№Р»Р° СЃ РїРѕРґРґРµСЂР¶РєРѕР№ AllowAnonymous
     * @param {string} id 
     * @param {string} accountName 
     * @param {string} idext 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof R7OfficeApi
     */
    public getApiR7OfficeId(id: string, accountName: string, idext: string, options?: AxiosRequestConfig) {
        return R7OfficeApiFp(this.configuration).getApiR7OfficeId(id, accountName, idext, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScanButtonApi - axios parameter creator
 * @export
 */
export const ScanButtonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiScanButtonId: async (id: string, scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiScanButtonId', 'id', id)
            // verify required parameter 'scanedFilesRequestModel' is not null or undefined
            assertParamExists('postApiScanButtonId', 'scanedFilesRequestModel', scanedFilesRequestModel)
            const localVarPath = `/api/ScanButton/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scanedFilesRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiScanButtonSaveScanedFiles: async (scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scanedFilesRequestModel' is not null or undefined
            assertParamExists('postApiScanButtonSaveScanedFiles', 'scanedFilesRequestModel', scanedFilesRequestModel)
            const localVarPath = `/api/ScanButton/SaveScanedFiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scanedFilesRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScanButtonApi - functional programming interface
 * @export
 */
export const ScanButtonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScanButtonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiScanButtonId(id: string, scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiScanButtonId(id, scanedFilesRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiScanButtonSaveScanedFiles(scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiScanButtonSaveScanedFiles(scanedFilesRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScanButtonApi - factory interface
 * @export
 */
export const ScanButtonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScanButtonApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiScanButtonId(id: string, scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiScanButtonId(id, scanedFilesRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiScanButtonSaveScanedFiles(scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsFileListDataModelDocsVisionLayoutWebClient> {
            return localVarFp.postApiScanButtonSaveScanedFiles(scanedFilesRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScanButtonApi - object-oriented interface
 * @export
 * @class ScanButtonApi
 * @extends {BaseAPI}
 */
export class ScanButtonApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanButtonApi
     */
    public postApiScanButtonId(id: string, scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options?: AxiosRequestConfig) {
        return ScanButtonApiFp(this.configuration).postApiScanButtonId(id, scanedFilesRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientModelsScanedFilesRequestModel} scanedFilesRequestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanButtonApi
     */
    public postApiScanButtonSaveScanedFiles(scanedFilesRequestModel: DocsVisionWebClientModelsScanedFilesRequestModel, options?: AxiosRequestConfig) {
        return ScanButtonApiFp(this.configuration).postApiScanButtonSaveScanedFiles(scanedFilesRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SearchV1Api - axios parameter creator
 * @export
 */
export const SearchV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsContent: async (content: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            assertParamExists('getApiV1SearchCardsContent', 'content', content)
            const localVarPath = `/api/v1/search/cards/{content}`
                .replace(`{${"content"}}`, encodeURIComponent(String(content)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} content 
         * @param {GetApiV1SearchCardsContentModeModeEnum} mode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsContentMode: async (content: string, mode: GetApiV1SearchCardsContentModeModeEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            assertParamExists('getApiV1SearchCardsContentMode', 'content', content)
            // verify required parameter 'mode' is not null or undefined
            assertParamExists('getApiV1SearchCardsContentMode', 'mode', mode)
            const localVarPath = `/api/v1/search/cards/{content}/{mode}`
                .replace(`{${"content"}}`, encodeURIComponent(String(content)))
                .replace(`{${"mode"}}`, encodeURIComponent(String(mode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} searchQueryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsSearchQueryId: async (searchQueryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchQueryId' is not null or undefined
            assertParamExists('getApiV1SearchCardsSearchQueryId', 'searchQueryId', searchQueryId)
            const localVarPath = `/api/v1/search/cards/{searchQueryId}`
                .replace(`{${"searchQueryId"}}`, encodeURIComponent(String(searchQueryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} searchQueryId 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsSearchQueryIdLimit: async (searchQueryId: string, limit: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchQueryId' is not null or undefined
            assertParamExists('getApiV1SearchCardsSearchQueryIdLimit', 'searchQueryId', searchQueryId)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getApiV1SearchCardsSearchQueryIdLimit', 'limit', limit)
            const localVarPath = `/api/v1/search/cards/{searchQueryId}/{limit}`
                .replace(`{${"searchQueryId"}}`, encodeURIComponent(String(searchQueryId)))
                .replace(`{${"limit"}}`, encodeURIComponent(String(limit)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} dictionaryId 
         * @param {string} sectionId 
         * @param {string} fieldAlias 
         * @param {string} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue: async (dictionaryId: string, sectionId: string, fieldAlias: string, value: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dictionaryId' is not null or undefined
            assertParamExists('getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue', 'dictionaryId', dictionaryId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue', 'sectionId', sectionId)
            // verify required parameter 'fieldAlias' is not null or undefined
            assertParamExists('getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue', 'fieldAlias', fieldAlias)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue', 'value', value)
            const localVarPath = `/api/v1/search/rows/{dictionaryId}/{sectionId}/{fieldAlias}/{value}`
                .replace(`{${"dictionaryId"}}`, encodeURIComponent(String(dictionaryId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"fieldAlias"}}`, encodeURIComponent(String(fieldAlias)))
                .replace(`{${"value"}}`, encodeURIComponent(String(value)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} searchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SearchCardsXml: async (searchQuery: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchQuery' is not null or undefined
            assertParamExists('postApiV1SearchCardsXml', 'searchQuery', searchQuery)
            const localVarPath = `/api/v1/search/cards/xml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModelsRowSearchQuery} rowSearchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SearchRows: async (rowSearchQuery: DocsVisionWebClientWebApiModelsRowSearchQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rowSearchQuery' is not null or undefined
            assertParamExists('postApiV1SearchRows', 'rowSearchQuery', rowSearchQuery)
            const localVarPath = `/api/v1/search/rows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rowSearchQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchV1Api - functional programming interface
 * @export
 */
export const SearchV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SearchCardsContent(content: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SearchCardsContent(content, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} content 
         * @param {GetApiV1SearchCardsContentModeModeEnum} mode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SearchCardsContentMode(content: string, mode: GetApiV1SearchCardsContentModeModeEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SearchCardsContentMode(content, mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} searchQueryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SearchCardsSearchQueryId(searchQueryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SearchCardsSearchQueryId(searchQueryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} searchQueryId 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SearchCardsSearchQueryIdLimit(searchQueryId: string, limit: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SearchCardsSearchQueryIdLimit(searchQueryId, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} dictionaryId 
         * @param {string} sectionId 
         * @param {string} fieldAlias 
         * @param {string} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue(dictionaryId: string, sectionId: string, fieldAlias: string, value: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsRowDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue(dictionaryId, sectionId, fieldAlias, value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} searchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SearchCardsXml(searchQuery: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SearchCardsXml(searchQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModelsRowSearchQuery} rowSearchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SearchRows(rowSearchQuery: DocsVisionWebClientWebApiModelsRowSearchQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsRowDataModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SearchRows(rowSearchQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchV1Api - factory interface
 * @export
 */
export const SearchV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} content 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsContent(content: string, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>> {
            return localVarFp.getApiV1SearchCardsContent(content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} content 
         * @param {GetApiV1SearchCardsContentModeModeEnum} mode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsContentMode(content: string, mode: GetApiV1SearchCardsContentModeModeEnum, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>> {
            return localVarFp.getApiV1SearchCardsContentMode(content, mode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} searchQueryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsSearchQueryId(searchQueryId: string, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>> {
            return localVarFp.getApiV1SearchCardsSearchQueryId(searchQueryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} searchQueryId 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchCardsSearchQueryIdLimit(searchQueryId: string, limit: number, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>> {
            return localVarFp.getApiV1SearchCardsSearchQueryIdLimit(searchQueryId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} dictionaryId 
         * @param {string} sectionId 
         * @param {string} fieldAlias 
         * @param {string} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue(dictionaryId: string, sectionId: string, fieldAlias: string, value: string, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsRowDataModel>> {
            return localVarFp.getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue(dictionaryId, sectionId, fieldAlias, value, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} searchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SearchCardsXml(searchQuery: string, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataModel>> {
            return localVarFp.postApiV1SearchCardsXml(searchQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionWebClientWebApiModelsRowSearchQuery} rowSearchQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SearchRows(rowSearchQuery: DocsVisionWebClientWebApiModelsRowSearchQuery, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsRowDataModel>> {
            return localVarFp.postApiV1SearchRows(rowSearchQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchV1Api - object-oriented interface
 * @export
 * @class SearchV1Api
 * @extends {BaseAPI}
 */
export class SearchV1Api extends BaseAPI {
    /**
     * 
     * @param {string} content 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchV1Api
     */
    public getApiV1SearchCardsContent(content: string, options?: AxiosRequestConfig) {
        return SearchV1ApiFp(this.configuration).getApiV1SearchCardsContent(content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} content 
     * @param {GetApiV1SearchCardsContentModeModeEnum} mode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchV1Api
     */
    public getApiV1SearchCardsContentMode(content: string, mode: GetApiV1SearchCardsContentModeModeEnum, options?: AxiosRequestConfig) {
        return SearchV1ApiFp(this.configuration).getApiV1SearchCardsContentMode(content, mode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} searchQueryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchV1Api
     */
    public getApiV1SearchCardsSearchQueryId(searchQueryId: string, options?: AxiosRequestConfig) {
        return SearchV1ApiFp(this.configuration).getApiV1SearchCardsSearchQueryId(searchQueryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} searchQueryId 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchV1Api
     */
    public getApiV1SearchCardsSearchQueryIdLimit(searchQueryId: string, limit: number, options?: AxiosRequestConfig) {
        return SearchV1ApiFp(this.configuration).getApiV1SearchCardsSearchQueryIdLimit(searchQueryId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} dictionaryId 
     * @param {string} sectionId 
     * @param {string} fieldAlias 
     * @param {string} value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchV1Api
     */
    public getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue(dictionaryId: string, sectionId: string, fieldAlias: string, value: string, options?: AxiosRequestConfig) {
        return SearchV1ApiFp(this.configuration).getApiV1SearchRowsDictionaryIdSectionIdFieldAliasValue(dictionaryId, sectionId, fieldAlias, value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} searchQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchV1Api
     */
    public postApiV1SearchCardsXml(searchQuery: string, options?: AxiosRequestConfig) {
        return SearchV1ApiFp(this.configuration).postApiV1SearchCardsXml(searchQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionWebClientWebApiModelsRowSearchQuery} rowSearchQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchV1Api
     */
    public postApiV1SearchRows(rowSearchQuery: DocsVisionWebClientWebApiModelsRowSearchQuery, options?: AxiosRequestConfig) {
        return SearchV1ApiFp(this.configuration).postApiV1SearchRows(rowSearchQuery, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiV1SearchCardsContentModeModeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type GetApiV1SearchCardsContentModeModeEnum = typeof GetApiV1SearchCardsContentModeModeEnum[keyof typeof GetApiV1SearchCardsContentModeModeEnum];


/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns true whether current user has access rights to the passed object
         * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
         * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
         * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
         * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSecurityCheckAccessRights: async (checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Security/CheckAccessRights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (checkAccessRightsRequestModelSecureObjectType !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.secureObjectType'] = checkAccessRightsRequestModelSecureObjectType;
            }

            if (checkAccessRightsRequestModelCardDataRights !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.cardDataRights'] = checkAccessRightsRequestModelCardDataRights;
            }

            if (checkAccessRightsRequestModelObjectId !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.objectId'] = checkAccessRightsRequestModelObjectId;
            }

            if (checkAccessRightsRequestModelParentId !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.parentId'] = checkAccessRightsRequestModelParentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns true whether current user has access rights to the passed object
         * @param {string} id 
         * @param {GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
         * @param {GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
         * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
         * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSecurityId: async (id: string, checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiSecurityId', 'id', id)
            const localVarPath = `/api/Security/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (checkAccessRightsRequestModelSecureObjectType !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.secureObjectType'] = checkAccessRightsRequestModelSecureObjectType;
            }

            if (checkAccessRightsRequestModelCardDataRights !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.cardDataRights'] = checkAccessRightsRequestModelCardDataRights;
            }

            if (checkAccessRightsRequestModelObjectId !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.objectId'] = checkAccessRightsRequestModelObjectId;
            }

            if (checkAccessRightsRequestModelParentId !== undefined) {
                localVarQueryParameter['checkAccessRightsRequestModel.parentId'] = checkAccessRightsRequestModelParentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update security descriptor
         * @param {DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSecurityEnableInheritance: async (request: DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiSecurityEnableInheritance', 'request', request)
            const localVarPath = `/api/Security/EnableInheritance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DocsVisionPlatformWebClientModelsSecuritySecurityTarget} target 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSecurityGetDescriptor: async (target: DocsVisionPlatformWebClientModelsSecuritySecurityTarget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'target' is not null or undefined
            assertParamExists('postApiSecurityGetDescriptor', 'target', target)
            const localVarPath = `/api/Security/GetDescriptor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(target, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update security descriptor
         * @param {DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor} descriptor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSecurityUpdateDescriptor: async (descriptor: DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'descriptor' is not null or undefined
            assertParamExists('postApiSecurityUpdateDescriptor', 'descriptor', descriptor)
            const localVarPath = `/api/Security/UpdateDescriptor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(descriptor, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns true whether current user has access rights to the passed object
         * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
         * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
         * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
         * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSecurityCheckAccessRights(checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSecurityCheckAccessRights(checkAccessRightsRequestModelSecureObjectType, checkAccessRightsRequestModelCardDataRights, checkAccessRightsRequestModelObjectId, checkAccessRightsRequestModelParentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns true whether current user has access rights to the passed object
         * @param {string} id 
         * @param {GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
         * @param {GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
         * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
         * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSecurityId(id: string, checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSecurityId(id, checkAccessRightsRequestModelSecureObjectType, checkAccessRightsRequestModelCardDataRights, checkAccessRightsRequestModelObjectId, checkAccessRightsRequestModelParentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update security descriptor
         * @param {DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSecurityEnableInheritance(request: DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSecurityEnableInheritance(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DocsVisionPlatformWebClientModelsSecuritySecurityTarget} target 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSecurityGetDescriptor(target: DocsVisionPlatformWebClientModelsSecuritySecurityTarget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSecurityGetDescriptor(target, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update security descriptor
         * @param {DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor} descriptor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSecurityUpdateDescriptor(descriptor: DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSecurityUpdateDescriptor(descriptor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns true whether current user has access rights to the passed object
         * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
         * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
         * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
         * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSecurityCheckAccessRights(checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiSecurityCheckAccessRights(checkAccessRightsRequestModelSecureObjectType, checkAccessRightsRequestModelCardDataRights, checkAccessRightsRequestModelObjectId, checkAccessRightsRequestModelParentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns true whether current user has access rights to the passed object
         * @param {string} id 
         * @param {GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
         * @param {GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
         * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
         * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSecurityId(id: string, checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiSecurityId(id, checkAccessRightsRequestModelSecureObjectType, checkAccessRightsRequestModelCardDataRights, checkAccessRightsRequestModelObjectId, checkAccessRightsRequestModelParentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update security descriptor
         * @param {DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSecurityEnableInheritance(request: DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient> {
            return localVarFp.postApiSecurityEnableInheritance(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DocsVisionPlatformWebClientModelsSecuritySecurityTarget} target 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSecurityGetDescriptor(target: DocsVisionPlatformWebClientModelsSecuritySecurityTarget, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient> {
            return localVarFp.postApiSecurityGetDescriptor(target, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update security descriptor
         * @param {DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor} descriptor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSecurityUpdateDescriptor(descriptor: DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionPlatformWebClientModelsSecuritySecurityDescriptorDocsVisionPlatformWebClient> {
            return localVarFp.postApiSecurityUpdateDescriptor(descriptor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
    /**
     * 
     * @summary Returns true whether current user has access rights to the passed object
     * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
     * @param {GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
     * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
     * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public getApiSecurityCheckAccessRights(checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).getApiSecurityCheckAccessRights(checkAccessRightsRequestModelSecureObjectType, checkAccessRightsRequestModelCardDataRights, checkAccessRightsRequestModelObjectId, checkAccessRightsRequestModelParentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns true whether current user has access rights to the passed object
     * @param {string} id 
     * @param {GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum} [checkAccessRightsRequestModelSecureObjectType] Gets or sets secure object type
     * @param {GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum} [checkAccessRightsRequestModelCardDataRights] Gets or sets card data rights
     * @param {string} [checkAccessRightsRequestModelObjectId] Gets or sets object id
     * @param {string} [checkAccessRightsRequestModelParentId] Gets or sets parent id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public getApiSecurityId(id: string, checkAccessRightsRequestModelSecureObjectType?: GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum, checkAccessRightsRequestModelCardDataRights?: GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum, checkAccessRightsRequestModelObjectId?: string, checkAccessRightsRequestModelParentId?: string, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).getApiSecurityId(id, checkAccessRightsRequestModelSecureObjectType, checkAccessRightsRequestModelCardDataRights, checkAccessRightsRequestModelObjectId, checkAccessRightsRequestModelParentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update security descriptor
     * @param {DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public postApiSecurityEnableInheritance(request: DocsVisionPlatformWebClientModelsSecurityEnableInheritanceOptions, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).postApiSecurityEnableInheritance(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DocsVisionPlatformWebClientModelsSecuritySecurityTarget} target 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public postApiSecurityGetDescriptor(target: DocsVisionPlatformWebClientModelsSecuritySecurityTarget, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).postApiSecurityGetDescriptor(target, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update security descriptor
     * @param {DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor} descriptor 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public postApiSecurityUpdateDescriptor(descriptor: DocsVisionPlatformWebClientModelsSecuritySecurityDescriptor, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).postApiSecurityUpdateDescriptor(descriptor, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;
export type GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum = typeof GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum[keyof typeof GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelSecureObjectTypeEnum];
/**
 * @export
 */
export const GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_38: 38,
    NUMBER_256: 256,
    NUMBER_319: 319,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983359: 983359,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;
export type GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum = typeof GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum[keyof typeof GetApiSecurityCheckAccessRightsCheckAccessRightsRequestModelCardDataRightsEnum];
/**
 * @export
 */
export const GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;
export type GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum = typeof GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum[keyof typeof GetApiSecurityIdCheckAccessRightsRequestModelSecureObjectTypeEnum];
/**
 * @export
 */
export const GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_4: 4,
    NUMBER_8: 8,
    NUMBER_16: 16,
    NUMBER_32: 32,
    NUMBER_38: 38,
    NUMBER_256: 256,
    NUMBER_319: 319,
    NUMBER_65536: 65536,
    NUMBER_131072: 131072,
    NUMBER_131097: 131097,
    NUMBER_262144: 262144,
    NUMBER_524288: 524288,
    NUMBER_917504: 917504,
    NUMBER_983040: 983040,
    NUMBER_983359: 983359,
    NUMBER_268435456: 268435456,
    NUMBER_536870912: 536870912,
    NUMBER_1073741824: 1073741824,
    NUMBER_MINUS_2147483648: -2147483648
} as const;
export type GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum = typeof GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum[keyof typeof GetApiSecurityIdCheckAccessRightsRequestModelCardDataRightsEnum];


/**
 * SecurityCardsV1Api - axios parameter creator
 * @export
 */
export const SecurityCardsV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityCardsCardId: async (cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1SecurityCardsCardId', 'cardId', cardId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('deleteApiV1SecurityCardsCardId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityCardsCardIdInheritance: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1SecurityCardsCardIdInheritance', 'cardId', cardId)
            const localVarPath = `/api/v1/security/cards/{cardId}/inheritance`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityCardsCardIdInheritancePreserve: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1SecurityCardsCardIdInheritancePreserve', 'cardId', cardId)
            const localVarPath = `/api/v1/security/cards/{cardId}/inheritance/preserve`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityCardsCardId: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1SecurityCardsCardId', 'cardId', cardId)
            const localVarPath = `/api/v1/security/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityCardsCardId: async (cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiV1SecurityCardsCardId', 'cardId', cardId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('postApiV1SecurityCardsCardId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityCardsCardIdInheritance: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiV1SecurityCardsCardIdInheritance', 'cardId', cardId)
            const localVarPath = `/api/v1/security/cards/{cardId}/inheritance`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityCardsCardId: async (cardId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('putApiV1SecurityCardsCardId', 'cardId', cardId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('putApiV1SecurityCardsCardId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/cards/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityCardsV1Api - functional programming interface
 * @export
 */
export const SecurityCardsV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityCardsV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityCardsCardId(cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityCardsCardId(cardId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityCardsCardIdInheritance(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityCardsCardIdInheritance(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityCardsCardIdInheritancePreserve(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityCardsCardIdInheritancePreserve(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SecurityCardsCardId(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataAccessRuleModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SecurityCardsCardId(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SecurityCardsCardId(cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SecurityCardsCardId(cardId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SecurityCardsCardIdInheritance(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SecurityCardsCardIdInheritance(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1SecurityCardsCardId(cardId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1SecurityCardsCardId(cardId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityCardsV1Api - factory interface
 * @export
 */
export const SecurityCardsV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityCardsV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityCardsCardId(cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityCardsCardId(cardId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityCardsCardIdInheritance(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityCardsCardIdInheritance(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityCardsCardIdInheritancePreserve(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityCardsCardIdInheritancePreserve(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityCardsCardId(cardId: string, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataAccessRuleModel>> {
            return localVarFp.getApiV1SecurityCardsCardId(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityCardsCardId(cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1SecurityCardsCardId(cardId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityCardsCardIdInheritance(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1SecurityCardsCardIdInheritance(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityCardsCardId(cardId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1SecurityCardsCardId(cardId, changeParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityCardsV1Api - object-oriented interface
 * @export
 * @class SecurityCardsV1Api
 * @extends {BaseAPI}
 */
export class SecurityCardsV1Api extends BaseAPI {
    /**
     * 
     * @param {string} cardId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityCardsV1Api
     */
    public deleteApiV1SecurityCardsCardId(cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityCardsV1ApiFp(this.configuration).deleteApiV1SecurityCardsCardId(cardId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityCardsV1Api
     */
    public deleteApiV1SecurityCardsCardIdInheritance(cardId: string, options?: AxiosRequestConfig) {
        return SecurityCardsV1ApiFp(this.configuration).deleteApiV1SecurityCardsCardIdInheritance(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityCardsV1Api
     */
    public deleteApiV1SecurityCardsCardIdInheritancePreserve(cardId: string, options?: AxiosRequestConfig) {
        return SecurityCardsV1ApiFp(this.configuration).deleteApiV1SecurityCardsCardIdInheritancePreserve(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityCardsV1Api
     */
    public getApiV1SecurityCardsCardId(cardId: string, options?: AxiosRequestConfig) {
        return SecurityCardsV1ApiFp(this.configuration).getApiV1SecurityCardsCardId(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityCardsV1Api
     */
    public postApiV1SecurityCardsCardId(cardId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityCardsV1ApiFp(this.configuration).postApiV1SecurityCardsCardId(cardId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityCardsV1Api
     */
    public postApiV1SecurityCardsCardIdInheritance(cardId: string, options?: AxiosRequestConfig) {
        return SecurityCardsV1ApiFp(this.configuration).postApiV1SecurityCardsCardIdInheritance(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityCardsV1Api
     */
    public putApiV1SecurityCardsCardId(cardId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: AxiosRequestConfig) {
        return SecurityCardsV1ApiFp(this.configuration).putApiV1SecurityCardsCardId(cardId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SecurityFilesV1Api - axios parameter creator
 * @export
 */
export const SecurityFilesV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFilesFileId: async (fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFilesFileId', 'fileId', fileId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('deleteApiV1SecurityFilesFileId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFilesFileIdInheritance: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFilesFileIdInheritance', 'fileId', fileId)
            const localVarPath = `/api/v1/security/files/{fileId}/inheritance`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFilesFileIdInheritancePreserve: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFilesFileIdInheritancePreserve', 'fileId', fileId)
            const localVarPath = `/api/v1/security/files/{fileId}/inheritance/preserve`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityFilesFileId: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getApiV1SecurityFilesFileId', 'fileId', fileId)
            const localVarPath = `/api/v1/security/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityFilesFileId: async (fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('postApiV1SecurityFilesFileId', 'fileId', fileId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('postApiV1SecurityFilesFileId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityFilesFileIdInheritance: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('postApiV1SecurityFilesFileIdInheritance', 'fileId', fileId)
            const localVarPath = `/api/v1/security/files/{fileId}/inheritance`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileId 
         * @param {DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityFilesFileId: async (fileId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('putApiV1SecurityFilesFileId', 'fileId', fileId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('putApiV1SecurityFilesFileId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityFilesV1Api - functional programming interface
 * @export
 */
export const SecurityFilesV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityFilesV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityFilesFileId(fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityFilesFileId(fileId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityFilesFileIdInheritance(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityFilesFileIdInheritance(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityFilesFileIdInheritancePreserve(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityFilesFileIdInheritancePreserve(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SecurityFilesFileId(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsFileDataAccessRuleModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SecurityFilesFileId(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SecurityFilesFileId(fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SecurityFilesFileId(fileId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SecurityFilesFileIdInheritance(fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SecurityFilesFileIdInheritance(fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} fileId 
         * @param {DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1SecurityFilesFileId(fileId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1SecurityFilesFileId(fileId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityFilesV1Api - factory interface
 * @export
 */
export const SecurityFilesV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityFilesV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFilesFileId(fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityFilesFileId(fileId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFilesFileIdInheritance(fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityFilesFileIdInheritance(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFilesFileIdInheritancePreserve(fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityFilesFileIdInheritancePreserve(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityFilesFileId(fileId: string, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsFileDataAccessRuleModel>> {
            return localVarFp.getApiV1SecurityFilesFileId(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityFilesFileId(fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1SecurityFilesFileId(fileId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityFilesFileIdInheritance(fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1SecurityFilesFileIdInheritance(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileId 
         * @param {DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityFilesFileId(fileId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1SecurityFilesFileId(fileId, changeParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityFilesV1Api - object-oriented interface
 * @export
 * @class SecurityFilesV1Api
 * @extends {BaseAPI}
 */
export class SecurityFilesV1Api extends BaseAPI {
    /**
     * 
     * @param {string} fileId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFilesV1Api
     */
    public deleteApiV1SecurityFilesFileId(fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityFilesV1ApiFp(this.configuration).deleteApiV1SecurityFilesFileId(fileId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFilesV1Api
     */
    public deleteApiV1SecurityFilesFileIdInheritance(fileId: string, options?: AxiosRequestConfig) {
        return SecurityFilesV1ApiFp(this.configuration).deleteApiV1SecurityFilesFileIdInheritance(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFilesV1Api
     */
    public deleteApiV1SecurityFilesFileIdInheritancePreserve(fileId: string, options?: AxiosRequestConfig) {
        return SecurityFilesV1ApiFp(this.configuration).deleteApiV1SecurityFilesFileIdInheritancePreserve(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFilesV1Api
     */
    public getApiV1SecurityFilesFileId(fileId: string, options?: AxiosRequestConfig) {
        return SecurityFilesV1ApiFp(this.configuration).getApiV1SecurityFilesFileId(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFilesV1Api
     */
    public postApiV1SecurityFilesFileId(fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlFileDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityFilesV1ApiFp(this.configuration).postApiV1SecurityFilesFileId(fileId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFilesV1Api
     */
    public postApiV1SecurityFilesFileIdInheritance(fileId: string, options?: AxiosRequestConfig) {
        return SecurityFilesV1ApiFp(this.configuration).postApiV1SecurityFilesFileIdInheritance(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} fileId 
     * @param {DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFilesV1Api
     */
    public putApiV1SecurityFilesFileId(fileId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsFileSecurityReplacements, options?: AxiosRequestConfig) {
        return SecurityFilesV1ApiFp(this.configuration).putApiV1SecurityFilesFileId(fileId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SecurityFoldersV1Api - axios parameter creator
 * @export
 */
export const SecurityFoldersV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFoldersFileId: async (folderId: string, fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFoldersFileId', 'folderId', folderId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFoldersFileId', 'fileId', fileId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('deleteApiV1SecurityFoldersFileId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/folders/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFoldersFileIdInheritance: async (folderId: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFoldersFileIdInheritance', 'folderId', folderId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFoldersFileIdInheritance', 'fileId', fileId)
            const localVarPath = `/api/v1/security/folders/{fileId}/inheritance`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFoldersFolderIdInheritancePreserve: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteApiV1SecurityFoldersFolderIdInheritancePreserve', 'folderId', folderId)
            const localVarPath = `/api/v1/security/folders/{folderId}/inheritance/preserve`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityFoldersFolderId: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getApiV1SecurityFoldersFolderId', 'folderId', folderId)
            const localVarPath = `/api/v1/security/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1SecurityFoldersFolderId: async (folderId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('patchApiV1SecurityFoldersFolderId', 'folderId', folderId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('patchApiV1SecurityFoldersFolderId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityFoldersFileIdInheritance: async (folderId: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('postApiV1SecurityFoldersFileIdInheritance', 'folderId', folderId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('postApiV1SecurityFoldersFileIdInheritance', 'fileId', fileId)
            const localVarPath = `/api/v1/security/folders/{fileId}/inheritance`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (folderId !== undefined) {
                localVarQueryParameter['folderId'] = folderId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityFoldersFolderId: async (folderId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('putApiV1SecurityFoldersFolderId', 'folderId', folderId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('putApiV1SecurityFoldersFolderId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityFoldersV1Api - functional programming interface
 * @export
 */
export const SecurityFoldersV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityFoldersV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityFoldersFileId(folderId: string, fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityFoldersFileId(folderId, fileId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityFoldersFileIdInheritance(folderId: string, fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityFoldersFileIdInheritance(folderId, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityFoldersFolderIdInheritancePreserve(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityFoldersFolderIdInheritancePreserve(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SecurityFoldersFolderId(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataAccessRuleModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SecurityFoldersFolderId(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchApiV1SecurityFoldersFolderId(folderId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchApiV1SecurityFoldersFolderId(folderId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SecurityFoldersFileIdInheritance(folderId: string, fileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SecurityFoldersFileIdInheritance(folderId, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1SecurityFoldersFolderId(folderId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1SecurityFoldersFolderId(folderId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityFoldersV1Api - factory interface
 * @export
 */
export const SecurityFoldersV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityFoldersV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFoldersFileId(folderId: string, fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityFoldersFileId(folderId, fileId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFoldersFileIdInheritance(folderId: string, fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityFoldersFileIdInheritance(folderId, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityFoldersFolderIdInheritancePreserve(folderId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityFoldersFolderIdInheritancePreserve(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityFoldersFolderId(folderId: string, options?: any): AxiosPromise<Array<DocsVisionWebClientWebApiModelsCardDataAccessRuleModel>> {
            return localVarFp.getApiV1SecurityFoldersFolderId(folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchApiV1SecurityFoldersFolderId(folderId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.patchApiV1SecurityFoldersFolderId(folderId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityFoldersFileIdInheritance(folderId: string, fileId: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1SecurityFoldersFileIdInheritance(folderId, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} folderId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityFoldersFolderId(folderId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1SecurityFoldersFolderId(folderId, changeParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityFoldersV1Api - object-oriented interface
 * @export
 * @class SecurityFoldersV1Api
 * @extends {BaseAPI}
 */
export class SecurityFoldersV1Api extends BaseAPI {
    /**
     * 
     * @param {string} folderId 
     * @param {string} fileId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFoldersV1Api
     */
    public deleteApiV1SecurityFoldersFileId(folderId: string, fileId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityFoldersV1ApiFp(this.configuration).deleteApiV1SecurityFoldersFileId(folderId, fileId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFoldersV1Api
     */
    public deleteApiV1SecurityFoldersFileIdInheritance(folderId: string, fileId: string, options?: AxiosRequestConfig) {
        return SecurityFoldersV1ApiFp(this.configuration).deleteApiV1SecurityFoldersFileIdInheritance(folderId, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFoldersV1Api
     */
    public deleteApiV1SecurityFoldersFolderIdInheritancePreserve(folderId: string, options?: AxiosRequestConfig) {
        return SecurityFoldersV1ApiFp(this.configuration).deleteApiV1SecurityFoldersFolderIdInheritancePreserve(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFoldersV1Api
     */
    public getApiV1SecurityFoldersFolderId(folderId: string, options?: AxiosRequestConfig) {
        return SecurityFoldersV1ApiFp(this.configuration).getApiV1SecurityFoldersFolderId(folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFoldersV1Api
     */
    public patchApiV1SecurityFoldersFolderId(folderId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityFoldersV1ApiFp(this.configuration).patchApiV1SecurityFoldersFolderId(folderId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {string} fileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFoldersV1Api
     */
    public postApiV1SecurityFoldersFileIdInheritance(folderId: string, fileId: string, options?: AxiosRequestConfig) {
        return SecurityFoldersV1ApiFp(this.configuration).postApiV1SecurityFoldersFileIdInheritance(folderId, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} folderId 
     * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityFoldersV1Api
     */
    public putApiV1SecurityFoldersFolderId(folderId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: AxiosRequestConfig) {
        return SecurityFoldersV1ApiFp(this.configuration).putApiV1SecurityFoldersFolderId(folderId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SecurityRowV1Api - axios parameter creator
 * @export
 */
export const SecurityRowV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityRowsCardIdSectionIdRowId: async (cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowId', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowId', 'rowId', rowId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/rows/{cardId}/{sectionId}/{rowId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance: async (cardId: string, sectionId: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance', 'rowId', rowId)
            const localVarPath = `/api/v1/security/rows/{cardId}/{sectionId}/{rowId}/inheritance`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve: async (cardId: string, sectionId: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve', 'rowId', rowId)
            const localVarPath = `/api/v1/security/rows/{cardId}/{sectionId}/{rowId}/inheritance/preserve`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityRowsCardIdSectionIdRowId: async (cardId: string, sectionId: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1SecurityRowsCardIdSectionIdRowId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('getApiV1SecurityRowsCardIdSectionIdRowId', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('getApiV1SecurityRowsCardIdSectionIdRowId', 'rowId', rowId)
            const localVarPath = `/api/v1/security/rows/{cardId}/{sectionId}/{rowId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityRowsCardIdSectionIdRowId: async (cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiV1SecurityRowsCardIdSectionIdRowId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('postApiV1SecurityRowsCardIdSectionIdRowId', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('postApiV1SecurityRowsCardIdSectionIdRowId', 'rowId', rowId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('postApiV1SecurityRowsCardIdSectionIdRowId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/rows/{cardId}/{sectionId}/{rowId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityRowsCardIdSectionIdRowIdInheritance: async (cardId: string, sectionId: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiV1SecurityRowsCardIdSectionIdRowIdInheritance', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('postApiV1SecurityRowsCardIdSectionIdRowIdInheritance', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('postApiV1SecurityRowsCardIdSectionIdRowIdInheritance', 'rowId', rowId)
            const localVarPath = `/api/v1/security/rows/{cardId}/{sectionId}/{rowId}/inheritance`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityRowsCardIdSectionIdRowId: async (cardId: string, sectionId: string, rowId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('putApiV1SecurityRowsCardIdSectionIdRowId', 'cardId', cardId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('putApiV1SecurityRowsCardIdSectionIdRowId', 'sectionId', sectionId)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('putApiV1SecurityRowsCardIdSectionIdRowId', 'rowId', rowId)
            // verify required parameter 'changeParameters' is not null or undefined
            assertParamExists('putApiV1SecurityRowsCardIdSectionIdRowId', 'changeParameters', changeParameters)
            const localVarPath = `/api/v1/security/rows/{cardId}/{sectionId}/{rowId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityRowV1Api - functional programming interface
 * @export
 */
export const SecurityRowV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityRowV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId, sectionId, rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve(cardId, sectionId, rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId, sectionId, rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityRowV1Api - factory interface
 * @export
 */
export const SecurityRowV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityRowV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId: string, sectionId: string, rowId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId, sectionId, rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve(cardId: string, sectionId: string, rowId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve(cardId, sectionId, rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId: string, sectionId: string, rowId: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId, sectionId, rowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} cardId 
         * @param {string} sectionId 
         * @param {string} rowId 
         * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: any): AxiosPromise<void> {
            return localVarFp.putApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityRowV1Api - object-oriented interface
 * @export
 * @class SecurityRowV1Api
 * @extends {BaseAPI}
 */
export class SecurityRowV1Api extends BaseAPI {
    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRowV1Api
     */
    public deleteApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityRowV1ApiFp(this.configuration).deleteApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRowV1Api
     */
    public deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig) {
        return SecurityRowV1ApiFp(this.configuration).deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId, sectionId, rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRowV1Api
     */
    public deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig) {
        return SecurityRowV1ApiFp(this.configuration).deleteApiV1SecurityRowsCardIdSectionIdRowIdInheritancePreserve(cardId, sectionId, rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRowV1Api
     */
    public getApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig) {
        return SecurityRowV1ApiFp(this.configuration).getApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRowV1Api
     */
    public postApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: Array<DocsVisionWebClientWebApiModificationModelsAccessRuleParametersDocsVisionPlatformSecurityAccessControlCardDataRightsDocsVisionPlatform>, options?: AxiosRequestConfig) {
        return SecurityRowV1ApiFp(this.configuration).postApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRowV1Api
     */
    public postApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId: string, sectionId: string, rowId: string, options?: AxiosRequestConfig) {
        return SecurityRowV1ApiFp(this.configuration).postApiV1SecurityRowsCardIdSectionIdRowIdInheritance(cardId, sectionId, rowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} cardId 
     * @param {string} sectionId 
     * @param {string} rowId 
     * @param {DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements} changeParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRowV1Api
     */
    public putApiV1SecurityRowsCardIdSectionIdRowId(cardId: string, sectionId: string, rowId: string, changeParameters: DocsVisionWebClientWebApiModificationModelsCardSecurityReplacements, options?: AxiosRequestConfig) {
        return SecurityRowV1ApiFp(this.configuration).putApiV1SecurityRowsCardIdSectionIdRowId(cardId, sectionId, rowId, changeParameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SignatureApi - axios parameter creator
 * @export
 */
export const SignatureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks if document can be signed
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureCanAddSignature: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiSignatureCanAddSignature', 'documentId', documentId)
            const localVarPath = `/api/Signature/CanAddSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Signature/GetSignature
         * @param {string} [signDialogParamsDocumentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignature: async (signDialogParamsDocumentId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Signature/GetSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signDialogParamsDocumentId !== undefined) {
                localVarQueryParameter['signDialogParams.documentId'] = signDialogParamsDocumentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatureVerification
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignatureDetails: async (documentId: string, signatureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiSignatureGetSignatureDetails', 'documentId', documentId)
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('getApiSignatureGetSignatureDetails', 'signatureId', signatureId)
            const localVarPath = `/api/Signature/GetSignatureDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (signatureId !== undefined) {
                localVarQueryParameter['signatureId'] = signatureId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatureVerification
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignatureVerification: async (documentId: string, signatureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiSignatureGetSignatureVerification', 'documentId', documentId)
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('getApiSignatureGetSignatureVerification', 'signatureId', signatureId)
            const localVarPath = `/api/Signature/GetSignatureVerification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (signatureId !== undefined) {
                localVarQueryParameter['signatureId'] = signatureId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatures
         * @param {string} documentId 
         * @param {boolean} [verify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignatures: async (documentId: string, verify?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiSignatureGetSignatures', 'documentId', documentId)
            const localVarPath = `/api/Signature/GetSignatures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (verify !== undefined) {
                localVarQueryParameter['verify'] = verify;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatures
         * @param {string} documentId 
         * @param {string} id 
         * @param {boolean} [verify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureId: async (documentId: string, id: string, verify?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiSignatureId', 'documentId', documentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiSignatureId', 'id', id)
            const localVarPath = `/api/Signature/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (verify !== undefined) {
                localVarQueryParameter['verify'] = verify;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return power of attorney info for signature
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureVerifyPowerOfAttorneyOfSignature: async (documentId: string, signatureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getApiSignatureVerifyPowerOfAttorneyOfSignature', 'documentId', documentId)
            // verify required parameter 'signatureId' is not null or undefined
            assertParamExists('getApiSignatureVerifyPowerOfAttorneyOfSignature', 'signatureId', signatureId)
            const localVarPath = `/api/Signature/VerifyPowerOfAttorneyOfSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentId !== undefined) {
                localVarQueryParameter['documentId'] = documentId;
            }

            if (signatureId !== undefined) {
                localVarQueryParameter['signatureId'] = signatureId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HTTP: /Signature/AttachSignature
         * @param {DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper} signDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureAttachSignature: async (signDataRequest: DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signDataRequest' is not null or undefined
            assertParamExists('postApiSignatureAttachSignature', 'signDataRequest', signDataRequest)
            const localVarPath = `/api/Signature/AttachSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets thumberprints of certificates
         * @param {DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureGetCertificatesThumberprints: async (request: DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiSignatureGetCertificatesThumberprints', 'request', request)
            const localVarPath = `/api/Signature/GetCertificatesThumberprints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets available signature kind depends on certificate, settings, etc
         * @param {string} certEncoded certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureGetSignatureKind: async (certEncoded: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certEncoded' is not null or undefined
            assertParamExists('postApiSignatureGetSignatureKind', 'certEncoded', certEncoded)
            const localVarPath = `/api/Signature/GetSignatureKind`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(certEncoded, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if document has valid signature
         * @param {string} cardId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureHasValidSignature: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiSignatureHasValidSignature', 'cardId', cardId)
            const localVarPath = `/api/Signature/HasValidSignature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cardId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignatureApi - functional programming interface
 * @export
 */
export const SignatureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignatureApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Checks if document can be signed
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureCanAddSignature(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureCanAddSignature(documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Signature/GetSignature
         * @param {string} [signDialogParamsDocumentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureGetSignature(signDialogParamsDocumentId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureGetSignature(signDialogParamsDocumentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatureVerification
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureGetSignatureDetails(documentId: string, signatureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureGetSignatureDetails(documentId, signatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatureVerification
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureGetSignatureVerification(documentId: string, signatureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureGetSignatureVerification(documentId, signatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatures
         * @param {string} documentId 
         * @param {boolean} [verify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureGetSignatures(documentId: string, verify?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureGetSignatures(documentId, verify, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatures
         * @param {string} documentId 
         * @param {string} id 
         * @param {boolean} [verify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureId(documentId: string, id: string, verify?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureId(documentId, id, verify, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return power of attorney info for signature
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureVerifyPowerOfAttorneyOfSignature(documentId: string, signatureId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureVerifyPowerOfAttorneyOfSignature(documentId, signatureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HTTP: /Signature/AttachSignature
         * @param {DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper} signDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSignatureAttachSignature(signDataRequest: DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSignatureAttachSignature(signDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets thumberprints of certificates
         * @param {DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSignatureGetCertificatesThumberprints(request: DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSignatureGetCertificatesThumberprints(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets available signature kind depends on certificate, settings, etc
         * @param {string} certEncoded certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSignatureGetSignatureKind(certEncoded: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSignatureGetSignatureKind(certEncoded, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check if document has valid signature
         * @param {string} cardId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSignatureHasValidSignature(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSignatureHasValidSignature(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignatureApi - factory interface
 * @export
 */
export const SignatureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignatureApiFp(configuration)
    return {
        /**
         * 
         * @summary Checks if document can be signed
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureCanAddSignature(documentId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiSignatureCanAddSignature(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Signature/GetSignature
         * @param {string} [signDialogParamsDocumentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignature(signDialogParamsDocumentId?: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureModel> {
            return localVarFp.getApiSignatureGetSignature(signDialogParamsDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatureVerification
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignatureDetails(documentId: string, signatureId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureDetailsModel> {
            return localVarFp.getApiSignatureGetSignatureDetails(documentId, signatureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatureVerification
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignatureVerification(documentId: string, signatureId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureVerificationModel> {
            return localVarFp.getApiSignatureGetSignatureVerification(documentId, signatureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatures
         * @param {string} documentId 
         * @param {boolean} [verify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureGetSignatures(documentId: string, verify?: boolean, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel> {
            return localVarFp.getApiSignatureGetSignatures(documentId, verify, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /DocumentCard/GetSignatures
         * @param {string} documentId 
         * @param {string} id 
         * @param {boolean} [verify] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureId(documentId: string, id: string, verify?: boolean, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel> {
            return localVarFp.getApiSignatureId(documentId, id, verify, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return power of attorney info for signature
         * @param {string} documentId 
         * @param {string} signatureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureVerifyPowerOfAttorneyOfSignature(documentId: string, signatureId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignaturePowerOfAttorneyVerificationModel> {
            return localVarFp.getApiSignatureVerifyPowerOfAttorneyOfSignature(documentId, signatureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HTTP: /Signature/AttachSignature
         * @param {DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper} signDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureAttachSignature(signDataRequest: DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureAttachSignatureResponse> {
            return localVarFp.postApiSignatureAttachSignature(signDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets thumberprints of certificates
         * @param {DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureGetCertificatesThumberprints(request: DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureCertificateThumberprintResponse> {
            return localVarFp.postApiSignatureGetCertificatesThumberprints(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets available signature kind depends on certificate, settings, etc
         * @param {string} certEncoded certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureGetSignatureKind(certEncoded: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionWebClientServicesSignatureKindSelectionModelDocsVisionWebClient> {
            return localVarFp.postApiSignatureGetSignatureKind(certEncoded, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if document has valid signature
         * @param {string} cardId document id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureHasValidSignature(cardId: string, options?: any): AxiosPromise<object> {
            return localVarFp.postApiSignatureHasValidSignature(cardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignatureApi - object-oriented interface
 * @export
 * @class SignatureApi
 * @extends {BaseAPI}
 */
export class SignatureApi extends BaseAPI {
    /**
     * 
     * @summary Checks if document can be signed
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public getApiSignatureCanAddSignature(documentId: string, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).getApiSignatureCanAddSignature(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Signature/GetSignature
     * @param {string} [signDialogParamsDocumentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public getApiSignatureGetSignature(signDialogParamsDocumentId?: string, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).getApiSignatureGetSignature(signDialogParamsDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /DocumentCard/GetSignatureVerification
     * @param {string} documentId 
     * @param {string} signatureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public getApiSignatureGetSignatureDetails(documentId: string, signatureId: string, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).getApiSignatureGetSignatureDetails(documentId, signatureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /DocumentCard/GetSignatureVerification
     * @param {string} documentId 
     * @param {string} signatureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public getApiSignatureGetSignatureVerification(documentId: string, signatureId: string, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).getApiSignatureGetSignatureVerification(documentId, signatureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /DocumentCard/GetSignatures
     * @param {string} documentId 
     * @param {boolean} [verify] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public getApiSignatureGetSignatures(documentId: string, verify?: boolean, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).getApiSignatureGetSignatures(documentId, verify, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /DocumentCard/GetSignatures
     * @param {string} documentId 
     * @param {string} id 
     * @param {boolean} [verify] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public getApiSignatureId(documentId: string, id: string, verify?: boolean, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).getApiSignatureId(documentId, id, verify, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return power of attorney info for signature
     * @param {string} documentId 
     * @param {string} signatureId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public getApiSignatureVerifyPowerOfAttorneyOfSignature(documentId: string, signatureId: string, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).getApiSignatureVerifyPowerOfAttorneyOfSignature(documentId, signatureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HTTP: /Signature/AttachSignature
     * @param {DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper} signDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public postApiSignatureAttachSignature(signDataRequest: DocsVisionBackOfficeWebClientSignatureSignDataRequestWrapper, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).postApiSignatureAttachSignature(signDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets thumberprints of certificates
     * @param {DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public postApiSignatureGetCertificatesThumberprints(request: DocsVisionBackOfficeWebClientSignatureCertificateThumberprintRequest, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).postApiSignatureGetCertificatesThumberprints(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets available signature kind depends on certificate, settings, etc
     * @param {string} certEncoded certificate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public postApiSignatureGetSignatureKind(certEncoded: string, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).postApiSignatureGetSignatureKind(certEncoded, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if document has valid signature
     * @param {string} cardId document id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureApi
     */
    public postApiSignatureHasValidSignature(cardId: string, options?: AxiosRequestConfig) {
        return SignatureApiFp(this.configuration).postApiSignatureHasValidSignature(cardId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SignatureMethodsApi - axios parameter creator
 * @export
 */
export const SignatureMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Load saved methods.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureMethodsGetSignatureMethods: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SignatureMethods/GetSignatureMethods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load value of cloud storage flag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureMethodsGetUserCertificateCloudIsAvailable: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SignatureMethods/GetUserCertificateCloudIsAvailable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save settings.
         * @param {DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureMethodsSetSignatureMethods: async (request: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiSignatureMethodsSetSignatureMethods', 'request', request)
            const localVarPath = `/api/SignatureMethods/SetSignatureMethods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureMethodsUpdateAccountName: async (accountName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            assertParamExists('postApiSignatureMethodsUpdateAccountName', 'accountName', accountName)
            const localVarPath = `/api/SignatureMethods/UpdateAccountName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountName, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignatureMethodsApi - functional programming interface
 * @export
 */
export const SignatureMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignatureMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Load saved methods.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureMethodsGetSignatureMethods(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureMethodsGetSignatureMethods(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Load value of cloud storage flag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiSignatureMethodsGetUserCertificateCloudIsAvailable(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiSignatureMethodsGetUserCertificateCloudIsAvailable(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save settings.
         * @param {DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSignatureMethodsSetSignatureMethods(request: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSignatureMethodsSetSignatureMethods(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiSignatureMethodsUpdateAccountName(accountName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiSignatureMethodsUpdateAccountName(accountName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignatureMethodsApi - factory interface
 * @export
 */
export const SignatureMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignatureMethodsApiFp(configuration)
    return {
        /**
         * 
         * @summary Load saved methods.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureMethodsGetSignatureMethods(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings> {
            return localVarFp.getApiSignatureMethodsGetSignatureMethods(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load value of cloud storage flag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiSignatureMethodsGetUserCertificateCloudIsAvailable(options?: any): AxiosPromise<object> {
            return localVarFp.getApiSignatureMethodsGetUserCertificateCloudIsAvailable(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save settings.
         * @param {DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureMethodsSetSignatureMethods(request: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiSignatureMethodsSetSignatureMethods(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiSignatureMethodsUpdateAccountName(accountName: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiSignatureMethodsUpdateAccountName(accountName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignatureMethodsApi - object-oriented interface
 * @export
 * @class SignatureMethodsApi
 * @extends {BaseAPI}
 */
export class SignatureMethodsApi extends BaseAPI {
    /**
     * 
     * @summary Load saved methods.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureMethodsApi
     */
    public getApiSignatureMethodsGetSignatureMethods(options?: AxiosRequestConfig) {
        return SignatureMethodsApiFp(this.configuration).getApiSignatureMethodsGetSignatureMethods(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load value of cloud storage flag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureMethodsApi
     */
    public getApiSignatureMethodsGetUserCertificateCloudIsAvailable(options?: AxiosRequestConfig) {
        return SignatureMethodsApiFp(this.configuration).getApiSignatureMethodsGetUserCertificateCloudIsAvailable(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save settings.
     * @param {DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureMethodsApi
     */
    public postApiSignatureMethodsSetSignatureMethods(request: DocsVisionBackOfficeWebClientSignatureSignatureMethodSettingsSignatureMethodSettings, options?: AxiosRequestConfig) {
        return SignatureMethodsApiFp(this.configuration).postApiSignatureMethodsSetSignatureMethods(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} accountName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatureMethodsApi
     */
    public postApiSignatureMethodsUpdateAccountName(accountName: string, options?: AxiosRequestConfig) {
        return SignatureMethodsApiFp(this.configuration).postApiSignatureMethodsUpdateAccountName(accountName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SignaturesV1Api - axios parameter creator
 * @export
 */
export const SignaturesV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SignaturesCardId: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiV1SignaturesCardId', 'cardId', cardId)
            const localVarPath = `/api/v1/signatures/{cardId}`
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignaturesV1Api - functional programming interface
 * @export
 */
export const SignaturesV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignaturesV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1SignaturesCardId(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1SignaturesCardId(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignaturesV1Api - factory interface
 * @export
 */
export const SignaturesV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignaturesV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1SignaturesCardId(cardId: string, options?: any): AxiosPromise<DocsVisionBackOfficeWebClientSignatureDocumentSignatureListModel> {
            return localVarFp.getApiV1SignaturesCardId(cardId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignaturesV1Api - object-oriented interface
 * @export
 * @class SignaturesV1Api
 * @extends {BaseAPI}
 */
export class SignaturesV1Api extends BaseAPI {
    /**
     * 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignaturesV1Api
     */
    public getApiV1SignaturesCardId(cardId: string, options?: AxiosRequestConfig) {
        return SignaturesV1ApiFp(this.configuration).getApiV1SignaturesCardId(cardId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StaffDirectoryItemsApi - axios parameter creator
 * @export
 */
export const StaffDirectoryItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks account name
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsCheckAccountName: async (accountName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            assertParamExists('getApiStaffDirectoryItemsCheckAccountName', 'accountName', accountName)
            const localVarPath = `/api/StaffDirectoryItems/CheckAccountName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountName !== undefined) {
                localVarQueryParameter['accountName'] = accountName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets employee groups
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsGetEmployeeGroups: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiStaffDirectoryItemsGetEmployeeGroups', 'employeeId', employeeId)
            const localVarPath = `/api/StaffDirectoryItems/GetEmployeeGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets first manager for unit hierarchy
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsGetUnitManagerForEmployee: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiStaffDirectoryItemsGetUnitManagerForEmployee', 'employeeId', employeeId)
            const localVarPath = `/api/StaffDirectoryItems/GetUnitManagerForEmployee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks account name
         * @param {string} accountName 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsId: async (accountName: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountName' is not null or undefined
            assertParamExists('getApiStaffDirectoryItemsId', 'accountName', accountName)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiStaffDirectoryItemsId', 'id', id)
            const localVarPath = `/api/StaffDirectoryItems/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountName !== undefined) {
                localVarQueryParameter['accountName'] = accountName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes staff employee from group
         * @param {string} groupId 
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsRemoveEmployeeFromGroup: async (groupId: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getApiStaffDirectoryItemsRemoveEmployeeFromGroup', 'groupId', groupId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getApiStaffDirectoryItemsRemoveEmployeeFromGroup', 'employeeId', employeeId)
            const localVarPath = `/api/StaffDirectoryItems/RemoveEmployeeFromGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupId !== undefined) {
                localVarQueryParameter['groupId'] = groupId;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save favorites
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsAddToFavorites: async (query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsAddToFavorites', 'query', query)
            const localVarPath = `/api/StaffDirectoryItems/AddToFavorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds employees and departments to group
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel} model Instance od the {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.AddToGroupRequestModel}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsAddToGroup: async (model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsAddToGroup', 'model', model)
            const localVarPath = `/api/StaffDirectoryItems/AddToGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Copy group
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsCopyGroup: async (model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsCopyGroup', 'model', model)
            const localVarPath = `/api/StaffDirectoryItems/CopyGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Copy unit
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsCopyUnit: async (model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsCopyUnit', 'model', model)
            const localVarPath = `/api/StaffDirectoryItems/CopyUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary POST: /StaffDirectoryItems/GetStaffData
         * @param {DocsVisionWebClientModelsEmployeeListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsGetStaffData: async (requestModel: DocsVisionWebClientModelsEmployeeListRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsGetStaffData', 'requestModel', requestModel)
            const localVarPath = `/api/StaffDirectoryItems/GetStaffData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsLoadStaffData: async (query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsLoadStaffData', 'query', query)
            const localVarPath = `/api/StaffDirectoryItems/LoadStaffData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(query, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move employee to another unit
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsMoveEmployee: async (model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsMoveEmployee', 'model', model)
            const localVarPath = `/api/StaffDirectoryItems/MoveEmployee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move group to another parent
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsMoveGroup: async (model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsMoveGroup', 'model', model)
            const localVarPath = `/api/StaffDirectoryItems/MoveGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move unit to another parent
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsMoveUnit: async (model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsMoveUnit', 'model', model)
            const localVarPath = `/api/StaffDirectoryItems/MoveUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets employee groups
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery} employeeGroupsQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsSetEmployeeGroups: async (employeeGroupsQuery: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeGroupsQuery' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsSetEmployeeGroups', 'employeeGroupsQuery', employeeGroupsQuery)
            const localVarPath = `/api/StaffDirectoryItems/SetEmployeeGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employeeGroupsQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set groups for all employees in {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesToSet}.   Groups taken from {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesAsGroupsSource}
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsTakeGroupsAndSetGroups: async (request: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postApiStaffDirectoryItemsTakeGroupsAndSetGroups', 'request', request)
            const localVarPath = `/api/StaffDirectoryItems/TakeGroupsAndSetGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffDirectoryItemsApi - functional programming interface
 * @export
 */
export const StaffDirectoryItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffDirectoryItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Checks account name
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStaffDirectoryItemsCheckAccountName(accountName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStaffDirectoryItemsCheckAccountName(accountName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets employee groups
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStaffDirectoryItemsGetEmployeeGroups(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStaffDirectoryItemsGetEmployeeGroups(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets first manager for unit hierarchy
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStaffDirectoryItemsGetUnitManagerForEmployee(employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStaffDirectoryItemsGetUnitManagerForEmployee(employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Checks account name
         * @param {string} accountName 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStaffDirectoryItemsId(accountName: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStaffDirectoryItemsId(accountName, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Removes staff employee from group
         * @param {string} groupId 
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiStaffDirectoryItemsRemoveEmployeeFromGroup(groupId: string, employeeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiStaffDirectoryItemsRemoveEmployeeFromGroup(groupId, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save favorites
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsAddToFavorites(query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsAddToFavorites(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds employees and departments to group
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel} model Instance od the {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.AddToGroupRequestModel}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsAddToGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsAddToGroup(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Copy group
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsCopyGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsCopyGroup(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Copy unit
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsCopyUnit(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsCopyUnit(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary POST: /StaffDirectoryItems/GetStaffData
         * @param {DocsVisionWebClientModelsEmployeeListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsGetStaffData(requestModel: DocsVisionWebClientModelsEmployeeListRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientModelsGridGridViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsGetStaffData(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsLoadStaffData(query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsLoadStaffData(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Move employee to another unit
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsMoveEmployee(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsMoveEmployee(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Move group to another parent
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsMoveGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsMoveGroup(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Move unit to another parent
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsMoveUnit(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsMoveUnit(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets employee groups
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery} employeeGroupsQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsSetEmployeeGroups(employeeGroupsQuery: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsSetEmployeeGroups(employeeGroupsQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set groups for all employees in {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesToSet}.   Groups taken from {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesAsGroupsSource}
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStaffDirectoryItemsTakeGroupsAndSetGroups(request: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStaffDirectoryItemsTakeGroupsAndSetGroups(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StaffDirectoryItemsApi - factory interface
 * @export
 */
export const StaffDirectoryItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffDirectoryItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Checks account name
         * @param {string} accountName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsCheckAccountName(accountName: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult> {
            return localVarFp.getApiStaffDirectoryItemsCheckAccountName(accountName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets employee groups
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsGetEmployeeGroups(employeeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemCollectionsGenericListDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffGroupDataModel> {
            return localVarFp.getApiStaffDirectoryItemsGetEmployeeGroups(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets first manager for unit hierarchy
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsGetUnitManagerForEmployee(employeeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsEmployeeDataModelDocsVisionLayoutWebClient> {
            return localVarFp.getApiStaffDirectoryItemsGetUnitManagerForEmployee(employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Checks account name
         * @param {string} accountName 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsId(accountName: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAccountCheckResult> {
            return localVarFp.getApiStaffDirectoryItemsId(accountName, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes staff employee from group
         * @param {string} groupId 
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiStaffDirectoryItemsRemoveEmployeeFromGroup(groupId: string, employeeId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.getApiStaffDirectoryItemsRemoveEmployeeFromGroup(groupId, employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save favorites
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsAddToFavorites(query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiStaffDirectoryItemsAddToFavorites(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds employees and departments to group
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel} model Instance od the {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.AddToGroupRequestModel}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsAddToGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiStaffDirectoryItemsAddToGroup(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Copy group
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsCopyGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiStaffDirectoryItemsCopyGroup(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Copy unit
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsCopyUnit(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiStaffDirectoryItemsCopyUnit(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary POST: /StaffDirectoryItems/GetStaffData
         * @param {DocsVisionWebClientModelsEmployeeListRequestModel} requestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsGetStaffData(requestModel: DocsVisionWebClientModelsEmployeeListRequestModel, options?: any): AxiosPromise<DocsVisionWebClientModelsGridGridViewModel> {
            return localVarFp.postApiStaffDirectoryItemsGetStaffData(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find department by name
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery} query Search string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsLoadStaffData(query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffLoadResponse> {
            return localVarFp.postApiStaffDirectoryItemsLoadStaffData(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move employee to another unit
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsMoveEmployee(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiStaffDirectoryItemsMoveEmployee(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move group to another parent
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsMoveGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiStaffDirectoryItemsMoveGroup(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move unit to another parent
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsMoveUnit(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiStaffDirectoryItemsMoveUnit(model, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets employee groups
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery} employeeGroupsQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsSetEmployeeGroups(employeeGroupsQuery: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsResult> {
            return localVarFp.postApiStaffDirectoryItemsSetEmployeeGroups(employeeGroupsQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set groups for all employees in {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesToSet}.   Groups taken from {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesAsGroupsSource}
         * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStaffDirectoryItemsTakeGroupsAndSetGroups(request: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsResult> {
            return localVarFp.postApiStaffDirectoryItemsTakeGroupsAndSetGroups(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaffDirectoryItemsApi - object-oriented interface
 * @export
 * @class StaffDirectoryItemsApi
 * @extends {BaseAPI}
 */
export class StaffDirectoryItemsApi extends BaseAPI {
    /**
     * 
     * @summary Checks account name
     * @param {string} accountName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public getApiStaffDirectoryItemsCheckAccountName(accountName: string, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).getApiStaffDirectoryItemsCheckAccountName(accountName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets employee groups
     * @param {string} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public getApiStaffDirectoryItemsGetEmployeeGroups(employeeId: string, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).getApiStaffDirectoryItemsGetEmployeeGroups(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets first manager for unit hierarchy
     * @param {string} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public getApiStaffDirectoryItemsGetUnitManagerForEmployee(employeeId: string, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).getApiStaffDirectoryItemsGetUnitManagerForEmployee(employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Checks account name
     * @param {string} accountName 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public getApiStaffDirectoryItemsId(accountName: string, id: string, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).getApiStaffDirectoryItemsId(accountName, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes staff employee from group
     * @param {string} groupId 
     * @param {string} employeeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public getApiStaffDirectoryItemsRemoveEmployeeFromGroup(groupId: string, employeeId: string, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).getApiStaffDirectoryItemsRemoveEmployeeFromGroup(groupId, employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save favorites
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsAddToFavorites(query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToFavoritesQuery, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsAddToFavorites(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds employees and departments to group
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel} model Instance od the {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.AddToGroupRequestModel}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsAddToGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsAddToGroupRequestModel, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsAddToGroup(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Copy group
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsCopyGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsCopyGroup(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Copy unit
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsCopyUnit(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsCopyUnit(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary POST: /StaffDirectoryItems/GetStaffData
     * @param {DocsVisionWebClientModelsEmployeeListRequestModel} requestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsGetStaffData(requestModel: DocsVisionWebClientModelsEmployeeListRequestModel, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsGetStaffData(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find department by name
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery} query Search string
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsLoadStaffData(query: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffQuery, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsLoadStaffData(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move employee to another unit
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsMoveEmployee(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsEmployeeMoveModel, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsMoveEmployee(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move group to another parent
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsMoveGroup(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsMoveGroup(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move unit to another parent
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel} model 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsMoveUnit(model: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsStaffDirectoryItemsMoveModel, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsMoveUnit(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets employee groups
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery} employeeGroupsQuery 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsSetEmployeeGroups(employeeGroupsQuery: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsSetEmployeeGroupsQuery, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsSetEmployeeGroups(employeeGroupsQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set groups for all employees in {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesToSet}.   Groups taken from {DocsVision.BackOffice.WebClient.StaffDirectoryItems.Models.TakeAndSetGroupsRequest.EmployeesAsGroupsSource}
     * @param {DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffDirectoryItemsApi
     */
    public postApiStaffDirectoryItemsTakeGroupsAndSetGroups(request: DocsVisionBackOfficeWebClientStaffDirectoryItemsModelsTakeAndSetGroupsRequest, options?: AxiosRequestConfig) {
        return StaffDirectoryItemsApiFp(this.configuration).postApiStaffDirectoryItemsTakeGroupsAndSetGroups(request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StateButtonsApi - axios parameter creator
 * @export
 */
export const StateButtonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStateButtonsGetOperationParameter: async (operation: DocsVisionWebClientModelsOperationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('postApiStateButtonsGetOperationParameter', 'operation', operation)
            const localVarPath = `/api/StateButtons/GetOperationParameter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(operation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStateButtonsId: async (id: string, operation: DocsVisionWebClientModelsOperationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiStateButtonsId', 'id', id)
            // verify required parameter 'operation' is not null or undefined
            assertParamExists('postApiStateButtonsId', 'operation', operation)
            const localVarPath = `/api/StateButtons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(operation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StateButtonsApi - functional programming interface
 * @export
 */
export const StateButtonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StateButtonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStateButtonsGetOperationParameter(operation: DocsVisionWebClientModelsOperationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStateButtonsGetOperationParameter(operation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiStateButtonsId(id: string, operation: DocsVisionWebClientModelsOperationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiStateButtonsId(id, operation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StateButtonsApi - factory interface
 * @export
 */
export const StateButtonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StateButtonsApiFp(configuration)
    return {
        /**
         * 
         * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStateButtonsGetOperationParameter(operation: DocsVisionWebClientModelsOperationRequestModel, options?: any): AxiosPromise<object> {
            return localVarFp.postApiStateButtonsGetOperationParameter(operation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiStateButtonsId(id: string, operation: DocsVisionWebClientModelsOperationRequestModel, options?: any): AxiosPromise<object> {
            return localVarFp.postApiStateButtonsId(id, operation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StateButtonsApi - object-oriented interface
 * @export
 * @class StateButtonsApi
 * @extends {BaseAPI}
 */
export class StateButtonsApi extends BaseAPI {
    /**
     * 
     * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateButtonsApi
     */
    public postApiStateButtonsGetOperationParameter(operation: DocsVisionWebClientModelsOperationRequestModel, options?: AxiosRequestConfig) {
        return StateButtonsApiFp(this.configuration).postApiStateButtonsGetOperationParameter(operation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DocsVisionWebClientModelsOperationRequestModel} operation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateButtonsApi
     */
    public postApiStateButtonsId(id: string, operation: DocsVisionWebClientModelsOperationRequestModel, options?: AxiosRequestConfig) {
        return StateButtonsApiFp(this.configuration).postApiStateButtonsId(id, operation, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskCardApi - axios parameter creator
 * @export
 */
export const TaskCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /api/TaskCard/GetMergeGroupModels
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskCardGetMergeGroupModels: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiTaskCardGetMergeGroupModels', 'cardId', cardId)
            const localVarPath = `/api/TaskCard/GetMergeGroupModels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/TaskCard/GetMergeGroupModels
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskCardId: async (cardId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getApiTaskCardId', 'cardId', cardId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiTaskCardId', 'id', id)
            const localVarPath = `/api/TaskCard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/TaskCard/SetMergedFileAsync
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskCardId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiTaskCardId', 'id', id)
            const localVarPath = `/api/TaskCard/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/TaskCard/MergeDone
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskCardMergeDone: async (cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('postApiTaskCardMergeDone', 'cardId', cardId)
            const localVarPath = `/api/TaskCard/MergeDone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cardId !== undefined) {
                localVarQueryParameter['cardId'] = cardId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /api/TaskCard/SetMergedFileAsync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskCardSetMergedFile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TaskCard/SetMergedFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskCardApi - functional programming interface
 * @export
 */
export const TaskCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskCardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary /api/TaskCard/GetMergeGroupModels
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTaskCardGetMergeGroupModels(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionApprovalWebClientMergeMergeGroupModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTaskCardGetMergeGroupModels(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/TaskCard/GetMergeGroupModels
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTaskCardId(cardId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionApprovalWebClientMergeMergeGroupModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTaskCardId(cardId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/TaskCard/SetMergedFileAsync
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTaskCardId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTaskCardId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/TaskCard/MergeDone
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTaskCardMergeDone(cardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTaskCardMergeDone(cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary /api/TaskCard/SetMergedFileAsync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTaskCardSetMergedFile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTaskCardSetMergedFile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskCardApi - factory interface
 * @export
 */
export const TaskCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskCardApiFp(configuration)
    return {
        /**
         * 
         * @summary /api/TaskCard/GetMergeGroupModels
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskCardGetMergeGroupModels(cardId: string, options?: any): AxiosPromise<Array<DocsVisionApprovalWebClientMergeMergeGroupModel>> {
            return localVarFp.getApiTaskCardGetMergeGroupModels(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/TaskCard/GetMergeGroupModels
         * @param {string} cardId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskCardId(cardId: string, id: string, options?: any): AxiosPromise<Array<DocsVisionApprovalWebClientMergeMergeGroupModel>> {
            return localVarFp.getApiTaskCardId(cardId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/TaskCard/SetMergedFileAsync
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskCardId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiTaskCardId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/TaskCard/MergeDone
         * @param {string} cardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskCardMergeDone(cardId: string, options?: any): AxiosPromise<void> {
            return localVarFp.postApiTaskCardMergeDone(cardId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /api/TaskCard/SetMergedFileAsync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskCardSetMergedFile(options?: any): AxiosPromise<void> {
            return localVarFp.postApiTaskCardSetMergedFile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskCardApi - object-oriented interface
 * @export
 * @class TaskCardApi
 * @extends {BaseAPI}
 */
export class TaskCardApi extends BaseAPI {
    /**
     * 
     * @summary /api/TaskCard/GetMergeGroupModels
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCardApi
     */
    public getApiTaskCardGetMergeGroupModels(cardId: string, options?: AxiosRequestConfig) {
        return TaskCardApiFp(this.configuration).getApiTaskCardGetMergeGroupModels(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/TaskCard/GetMergeGroupModels
     * @param {string} cardId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCardApi
     */
    public getApiTaskCardId(cardId: string, id: string, options?: AxiosRequestConfig) {
        return TaskCardApiFp(this.configuration).getApiTaskCardId(cardId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/TaskCard/SetMergedFileAsync
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCardApi
     */
    public postApiTaskCardId(id: string, options?: AxiosRequestConfig) {
        return TaskCardApiFp(this.configuration).postApiTaskCardId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/TaskCard/MergeDone
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCardApi
     */
    public postApiTaskCardMergeDone(cardId: string, options?: AxiosRequestConfig) {
        return TaskCardApiFp(this.configuration).postApiTaskCardMergeDone(cardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /api/TaskCard/SetMergedFileAsync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskCardApi
     */
    public postApiTaskCardSetMergedFile(options?: AxiosRequestConfig) {
        return TaskCardApiFp(this.configuration).postApiTaskCardSetMergedFile(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskGroupApi - axios parameter creator
 * @export
 */
export const TaskGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
         * @param {string} groupTaskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskGroupGetParentCardTasksDataModel: async (groupTaskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupTaskId' is not null or undefined
            assertParamExists('getApiTaskGroupGetParentCardTasksDataModel', 'groupTaskId', groupTaskId)
            const localVarPath = `/api/TaskGroup/GetParentCardTasksDataModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupTaskId !== undefined) {
                localVarQueryParameter['groupTaskId'] = groupTaskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
         * @param {string} groupTaskId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskGroupId: async (groupTaskId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupTaskId' is not null or undefined
            assertParamExists('getApiTaskGroupId', 'groupTaskId', groupTaskId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiTaskGroupId', 'id', id)
            const localVarPath = `/api/TaskGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupTaskId !== undefined) {
                localVarQueryParameter['groupTaskId'] = groupTaskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskGroupApi - functional programming interface
 * @export
 */
export const TaskGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
         * @param {string} groupTaskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTaskGroupGetParentCardTasksDataModel(groupTaskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTaskGroupGetParentCardTasksDataModel(groupTaskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
         * @param {string} groupTaskId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTaskGroupId(groupTaskId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTaskGroupId(groupTaskId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskGroupApi - factory interface
 * @export
 */
export const TaskGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
         * @param {string} groupTaskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskGroupGetParentCardTasksDataModel(groupTaskId: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient> {
            return localVarFp.getApiTaskGroupGetParentCardTasksDataModel(groupTaskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
         * @param {string} groupTaskId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTaskGroupId(groupTaskId: string, id: string, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseDocsVisionLayoutWebClientModelsTasksDataModelDocsVisionLayoutWebClient> {
            return localVarFp.getApiTaskGroupId(groupTaskId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskGroupApi - object-oriented interface
 * @export
 * @class TaskGroupApi
 * @extends {BaseAPI}
 */
export class TaskGroupApi extends BaseAPI {
    /**
     * 
     * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
     * @param {string} groupTaskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public getApiTaskGroupGetParentCardTasksDataModel(groupTaskId: string, options?: AxiosRequestConfig) {
        return TaskGroupApiFp(this.configuration).getApiTaskGroupGetParentCardTasksDataModel(groupTaskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return {DocsVision.Layout.WebClient.Models.TasksDataModel} of a parent card for Tasks control placed in TaskGroup card   /api/TaskGroup/GetParentCardTasksDataModel
     * @param {string} groupTaskId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupApi
     */
    public getApiTaskGroupId(groupTaskId: string, id: string, options?: AxiosRequestConfig) {
        return TaskGroupApiFp(this.configuration).getApiTaskGroupId(groupTaskId, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskGroupPerformersApi - axios parameter creator
 * @export
 */
export const TaskGroupPerformersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskGroupPerformersCalculatePerformanceIntervalsDates: async (requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiTaskGroupPerformersCalculatePerformanceIntervalsDates', 'requestModel', requestModel)
            const localVarPath = `/api/TaskGroupPerformers/CalculatePerformanceIntervalsDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {string} id 
         * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskGroupPerformersId: async (id: string, requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiTaskGroupPerformersId', 'id', id)
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiTaskGroupPerformersId', 'requestModel', requestModel)
            const localVarPath = `/api/TaskGroupPerformers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskGroupPerformersApi - functional programming interface
 * @export
 */
export const TaskGroupPerformersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskGroupPerformersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTaskGroupPerformersCalculatePerformanceIntervalsDates(requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTaskGroupPerformersCalculatePerformanceIntervalsDates(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {string} id 
         * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTaskGroupPerformersId(id: string, requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTaskGroupPerformersId(id, requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskGroupPerformersApi - factory interface
 * @export
 */
export const TaskGroupPerformersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskGroupPerformersApiFp(configuration)
    return {
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskGroupPerformersCalculatePerformanceIntervalsDates(requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options?: any): AxiosPromise<Array<DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo>> {
            return localVarFp.postApiTaskGroupPerformersCalculatePerformanceIntervalsDates(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Calculate start/end dates of task group intervals, based on the specified durations.
         * @param {string} id 
         * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTaskGroupPerformersId(id: string, requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options?: any): AxiosPromise<Array<DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalInfo>> {
            return localVarFp.postApiTaskGroupPerformersId(id, requestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskGroupPerformersApi - object-oriented interface
 * @export
 * @class TaskGroupPerformersApi
 * @extends {BaseAPI}
 */
export class TaskGroupPerformersApi extends BaseAPI {
    /**
     * 
     * @summary Calculate start/end dates of task group intervals, based on the specified durations.
     * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupPerformersApi
     */
    public postApiTaskGroupPerformersCalculatePerformanceIntervalsDates(requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options?: AxiosRequestConfig) {
        return TaskGroupPerformersApiFp(this.configuration).postApiTaskGroupPerformersCalculatePerformanceIntervalsDates(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Calculate start/end dates of task group intervals, based on the specified durations.
     * @param {string} id 
     * @param {DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskGroupPerformersApi
     */
    public postApiTaskGroupPerformersId(id: string, requestModel: DocsVisionBackOfficeWebClientTaskGroupPerformersModelsTaskGroupIntervalsCalculationRequestModel, options?: AxiosRequestConfig) {
        return TaskGroupPerformersApiFp(this.configuration).postApiTaskGroupPerformersId(id, requestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TasksTreeApi - axios parameter creator
 * @export
 */
export const TasksTreeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get tasks tree
         * @param {DocsVisionWebClientModelsTasksTreeRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTasksTreeGet: async (requestModel: DocsVisionWebClientModelsTasksTreeRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiTasksTreeGet', 'requestModel', requestModel)
            const localVarPath = `/api/TasksTree/Get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get help model for node
         * @param {DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTasksTreeGetNodeHelpModel: async (requestModel: DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiTasksTreeGetNodeHelpModel', 'requestModel', requestModel)
            const localVarPath = `/api/TasksTree/GetNodeHelpModel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get tasks tree
         * @param {DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTasksTreeGetTasksTable: async (requestModel: DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestModel' is not null or undefined
            assertParamExists('postApiTasksTreeGetTasksTable', 'requestModel', requestModel)
            const localVarPath = `/api/TasksTree/GetTasksTable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksTreeApi - functional programming interface
 * @export
 */
export const TasksTreeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksTreeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get tasks tree
         * @param {DocsVisionWebClientModelsTasksTreeRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTasksTreeGet(requestModel: DocsVisionWebClientModelsTasksTreeRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionBackOfficeWebClientTasksTreeTasksTreeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTasksTreeGet(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get help model for node
         * @param {DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTasksTreeGetNodeHelpModel(requestModel: DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTasksTreeGetNodeHelpModel(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get tasks tree
         * @param {DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTasksTreeGetTasksTable(requestModel: DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionBackOfficeWebClientTasksTreeTasksTableModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTasksTreeGetTasksTable(requestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksTreeApi - factory interface
 * @export
 */
export const TasksTreeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksTreeApiFp(configuration)
    return {
        /**
         * 
         * @summary Get tasks tree
         * @param {DocsVisionWebClientModelsTasksTreeRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTasksTreeGet(requestModel: DocsVisionWebClientModelsTasksTreeRequestModel, options?: any): AxiosPromise<DocsVisionBackOfficeWebClientTasksTreeTasksTreeModel> {
            return localVarFp.postApiTasksTreeGet(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get help model for node
         * @param {DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTasksTreeGetNodeHelpModel(requestModel: DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel, options?: any): AxiosPromise<DocsVisionBackOfficeWebClientTasksTreeTreeNodeHelpModel> {
            return localVarFp.postApiTasksTreeGetNodeHelpModel(requestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get tasks tree
         * @param {DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions} requestModel Request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTasksTreeGetTasksTable(requestModel: DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions, options?: any): AxiosPromise<DocsVisionBackOfficeWebClientTasksTreeTasksTableModel> {
            return localVarFp.postApiTasksTreeGetTasksTable(requestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksTreeApi - object-oriented interface
 * @export
 * @class TasksTreeApi
 * @extends {BaseAPI}
 */
export class TasksTreeApi extends BaseAPI {
    /**
     * 
     * @summary Get tasks tree
     * @param {DocsVisionWebClientModelsTasksTreeRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksTreeApi
     */
    public postApiTasksTreeGet(requestModel: DocsVisionWebClientModelsTasksTreeRequestModel, options?: AxiosRequestConfig) {
        return TasksTreeApiFp(this.configuration).postApiTasksTreeGet(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get help model for node
     * @param {DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksTreeApi
     */
    public postApiTasksTreeGetNodeHelpModel(requestModel: DocsVisionWebClientModelsTasksTreeNodeHelpRequestModel, options?: AxiosRequestConfig) {
        return TasksTreeApiFp(this.configuration).postApiTasksTreeGetNodeHelpModel(requestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get tasks tree
     * @param {DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions} requestModel Request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksTreeApi
     */
    public postApiTasksTreeGetTasksTable(requestModel: DocsVisionBackOfficeWebClientTasksTreeTasksTableLoadOptions, options?: AxiosRequestConfig) {
        return TasksTreeApiFp(this.configuration).postApiTasksTreeGetTasksTable(requestModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestCardApi - axios parameter creator
 * @export
 */
export const TestCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestCardCreateDocument: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TestCard/CreateDocument`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestCardCreateDocumentWithOptions: async (_options: WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter '_options' is not null or undefined
            assertParamExists('postApiTestCardCreateDocumentWithOptions', '_options', _options)
            const localVarPath = `/api/TestCard/CreateDocumentWithOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(_options, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestCardApi - functional programming interface
 * @export
 */
export const TestCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestCardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTestCardCreateDocument(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTestCardCreateDocument(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTestCardCreateDocumentWithOptions(_options: WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTestCardCreateDocumentWithOptions(_options, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestCardApi - factory interface
 * @export
 */
export const TestCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestCardApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestCardCreateDocument(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.postApiTestCardCreateDocument(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestCardCreateDocumentWithOptions(_options: WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsGenericCommonResponseSystemGuid> {
            return localVarFp.postApiTestCardCreateDocumentWithOptions(_options, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestCardApi - object-oriented interface
 * @export
 * @class TestCardApi
 * @extends {BaseAPI}
 */
export class TestCardApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCardApi
     */
    public postApiTestCardCreateDocument(options?: AxiosRequestConfig) {
        return TestCardApiFp(this.configuration).postApiTestCardCreateDocument(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions} _options 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCardApi
     */
    public postApiTestCardCreateDocumentWithOptions(_options: WebClientIntegrationTestHelpersTestCardModelsCreateDocumentOptions, options?: AxiosRequestConfig) {
        return TestCardApiFp(this.configuration).postApiTestCardCreateDocumentWithOptions(_options, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestDirectoryApi - axios parameter creator
 * @export
 */
export const TestDirectoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestDirectoryFillPowersDirectory: async (_options: WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter '_options' is not null or undefined
            assertParamExists('postApiTestDirectoryFillPowersDirectory', '_options', _options)
            const localVarPath = `/api/TestDirectory/FillPowersDirectory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(_options, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestDirectoryFillStaffDirecotry: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TestDirectory/FillStaffDirecotry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestDirectoryApi - functional programming interface
 * @export
 */
export const TestDirectoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestDirectoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTestDirectoryFillPowersDirectory(_options: WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTestDirectoryFillPowersDirectory(_options, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTestDirectoryFillStaffDirecotry(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTestDirectoryFillStaffDirecotry(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestDirectoryApi - factory interface
 * @export
 */
export const TestDirectoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestDirectoryApiFp(configuration)
    return {
        /**
         * 
         * @param {WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestDirectoryFillPowersDirectory(_options: WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions, options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiTestDirectoryFillPowersDirectory(_options, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestDirectoryFillStaffDirecotry(options?: any): AxiosPromise<DocsVisionPlatformWebClientModelsCommonResponse> {
            return localVarFp.postApiTestDirectoryFillStaffDirecotry(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestDirectoryApi - object-oriented interface
 * @export
 * @class TestDirectoryApi
 * @extends {BaseAPI}
 */
export class TestDirectoryApi extends BaseAPI {
    /**
     * 
     * @param {WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions} _options 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestDirectoryApi
     */
    public postApiTestDirectoryFillPowersDirectory(_options: WebClientIntegrationTestHelpersDirectoryRequestsPowersDirectoryOptions, options?: AxiosRequestConfig) {
        return TestDirectoryApiFp(this.configuration).postApiTestDirectoryFillPowersDirectory(_options, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestDirectoryApi
     */
    public postApiTestDirectoryFillStaffDirecotry(options?: AxiosRequestConfig) {
        return TestDirectoryApiFp(this.configuration).postApiTestDirectoryFillStaffDirecotry(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestLayoutApi - axios parameter creator
 * @export
 */
export const TestLayoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestLayoutCreateLayout: async (_options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter '_options' is not null or undefined
            assertParamExists('postApiTestLayoutCreateLayout', '_options', _options)
            const localVarPath = `/api/TestLayout/CreateLayout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(_options, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestLayoutId: async (id: string, _options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postApiTestLayoutId', 'id', id)
            // verify required parameter '_options' is not null or undefined
            assertParamExists('postApiTestLayoutId', '_options', _options)
            const localVarPath = `/api/TestLayout/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(_options, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestLayoutApi - functional programming interface
 * @export
 */
export const TestLayoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestLayoutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTestLayoutCreateLayout(_options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTestLayoutCreateLayout(_options, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiTestLayoutId(id: string, _options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiTestLayoutId(id, _options, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestLayoutApi - factory interface
 * @export
 */
export const TestLayoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestLayoutApiFp(configuration)
    return {
        /**
         * 
         * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestLayoutCreateLayout(_options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options?: any): AxiosPromise<object> {
            return localVarFp.postApiTestLayoutCreateLayout(_options, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiTestLayoutId(id: string, _options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options?: any): AxiosPromise<object> {
            return localVarFp.postApiTestLayoutId(id, _options, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestLayoutApi - object-oriented interface
 * @export
 * @class TestLayoutApi
 * @extends {BaseAPI}
 */
export class TestLayoutApi extends BaseAPI {
    /**
     * 
     * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestLayoutApi
     */
    public postApiTestLayoutCreateLayout(_options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options?: AxiosRequestConfig) {
        return TestLayoutApiFp(this.configuration).postApiTestLayoutCreateLayout(_options, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions} _options 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestLayoutApi
     */
    public postApiTestLayoutId(id: string, _options: WebClientIntegrationTestHelpersTestLayoutModelsCreateLayoutOptions, options?: AxiosRequestConfig) {
        return TestLayoutApiFp(this.configuration).postApiTestLayoutId(id, _options, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ViewsV1Api - axios parameter creator
 * @export
 */
export const ViewsV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {number} pageNum 
         * @param {number} pageSize 
         * @param {DocsVisionWebClientWebApiModelsViewParameters} viewParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1ViewsFolderIdPageNumPageSize: async (folderId: string, pageNum: number, pageSize: number, viewParameters: DocsVisionWebClientWebApiModelsViewParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('postApiV1ViewsFolderIdPageNumPageSize', 'folderId', folderId)
            // verify required parameter 'pageNum' is not null or undefined
            assertParamExists('postApiV1ViewsFolderIdPageNumPageSize', 'pageNum', pageNum)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('postApiV1ViewsFolderIdPageNumPageSize', 'pageSize', pageSize)
            // verify required parameter 'viewParameters' is not null or undefined
            assertParamExists('postApiV1ViewsFolderIdPageNumPageSize', 'viewParameters', viewParameters)
            const localVarPath = `/api/v1/views/{folderId}/{pageNum}/{pageSize}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"pageNum"}}`, encodeURIComponent(String(pageNum)))
                .replace(`{${"pageSize"}}`, encodeURIComponent(String(pageSize)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viewParameters, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewsV1Api - functional programming interface
 * @export
 */
export const ViewsV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewsV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {number} pageNum 
         * @param {number} pageSize 
         * @param {DocsVisionWebClientWebApiModelsViewParameters} viewParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1ViewsFolderIdPageNumPageSize(folderId: string, pageNum: number, pageSize: number, viewParameters: DocsVisionWebClientWebApiModelsViewParameters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocsVisionWebClientWebApiModelsInfoRowCollectionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1ViewsFolderIdPageNumPageSize(folderId, pageNum, pageSize, viewParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ViewsV1Api - factory interface
 * @export
 */
export const ViewsV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewsV1ApiFp(configuration)
    return {
        /**
         * 
         * @param {string} folderId 
         * @param {number} pageNum 
         * @param {number} pageSize 
         * @param {DocsVisionWebClientWebApiModelsViewParameters} viewParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1ViewsFolderIdPageNumPageSize(folderId: string, pageNum: number, pageSize: number, viewParameters: DocsVisionWebClientWebApiModelsViewParameters, options?: any): AxiosPromise<DocsVisionWebClientWebApiModelsInfoRowCollectionModel> {
            return localVarFp.postApiV1ViewsFolderIdPageNumPageSize(folderId, pageNum, pageSize, viewParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViewsV1Api - object-oriented interface
 * @export
 * @class ViewsV1Api
 * @extends {BaseAPI}
 */
export class ViewsV1Api extends BaseAPI {
    /**
     * 
     * @param {string} folderId 
     * @param {number} pageNum 
     * @param {number} pageSize 
     * @param {DocsVisionWebClientWebApiModelsViewParameters} viewParameters 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsV1Api
     */
    public postApiV1ViewsFolderIdPageNumPageSize(folderId: string, pageNum: number, pageSize: number, viewParameters: DocsVisionWebClientWebApiModelsViewParameters, options?: AxiosRequestConfig) {
        return ViewsV1ApiFp(this.configuration).postApiV1ViewsFolderIdPageNumPageSize(folderId, pageNum, pageSize, viewParameters, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebDavApi - axios parameter creator
 * @export
 */
export const WebDavApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Getting file
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiWebdavIdIdext: async (id: string, idext: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiWebdavIdIdext', 'id', id)
            // verify required parameter 'idext' is not null or undefined
            assertParamExists('getApiWebdavIdIdext', 'idext', idext)
            const localVarPath = `/api/webdav/{id}/{idext}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idext"}}`, encodeURIComponent(String(idext)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request for resource existence
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headApiWebdavIdIdext: async (id: string, idext: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('headApiWebdavIdIdext', 'id', id)
            // verify required parameter 'idext' is not null or undefined
            assertParamExists('headApiWebdavIdIdext', 'idext', idext)
            const localVarPath = `/api/webdav/{id}/{idext}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idext"}}`, encodeURIComponent(String(idext)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request for root resource
         * @param {string} id File card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsApiWebdavId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('optionsApiWebdavId', 'id', id)
            const localVarPath = `/api/webdav/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Changing file card content (adding file version)
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiWebdavIdIdext: async (id: string, idext: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putApiWebdavIdIdext', 'id', id)
            // verify required parameter 'idext' is not null or undefined
            assertParamExists('putApiWebdavIdIdext', 'idext', idext)
            const localVarPath = `/api/webdav/{id}/{idext}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"idext"}}`, encodeURIComponent(String(idext)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebDavApi - functional programming interface
 * @export
 */
export const WebDavApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebDavApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Getting file
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiWebdavIdIdext(id: string, idext: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiWebdavIdIdext(id, idext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request for resource existence
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headApiWebdavIdIdext(id: string, idext: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.headApiWebdavIdIdext(id, idext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request for root resource
         * @param {string} id File card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async optionsApiWebdavId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.optionsApiWebdavId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Changing file card content (adding file version)
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiWebdavIdIdext(id: string, idext: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiWebdavIdIdext(id, idext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebDavApi - factory interface
 * @export
 */
export const WebDavApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebDavApiFp(configuration)
    return {
        /**
         * 
         * @summary Getting file
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiWebdavIdIdext(id: string, idext: string, options?: any): AxiosPromise<object> {
            return localVarFp.getApiWebdavIdIdext(id, idext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request for resource existence
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headApiWebdavIdIdext(id: string, idext: string, options?: any): AxiosPromise<object> {
            return localVarFp.headApiWebdavIdIdext(id, idext, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request for root resource
         * @param {string} id File card identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        optionsApiWebdavId(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.optionsApiWebdavId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Changing file card content (adding file version)
         * @param {string} id File card identifier
         * @param {string} idext File name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiWebdavIdIdext(id: string, idext: string, options?: any): AxiosPromise<object> {
            return localVarFp.putApiWebdavIdIdext(id, idext, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebDavApi - object-oriented interface
 * @export
 * @class WebDavApi
 * @extends {BaseAPI}
 */
export class WebDavApi extends BaseAPI {
    /**
     * 
     * @summary Getting file
     * @param {string} id File card identifier
     * @param {string} idext File name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebDavApi
     */
    public getApiWebdavIdIdext(id: string, idext: string, options?: AxiosRequestConfig) {
        return WebDavApiFp(this.configuration).getApiWebdavIdIdext(id, idext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request for resource existence
     * @param {string} id File card identifier
     * @param {string} idext File name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebDavApi
     */
    public headApiWebdavIdIdext(id: string, idext: string, options?: AxiosRequestConfig) {
        return WebDavApiFp(this.configuration).headApiWebdavIdIdext(id, idext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request for root resource
     * @param {string} id File card identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebDavApi
     */
    public optionsApiWebdavId(id: string, options?: AxiosRequestConfig) {
        return WebDavApiFp(this.configuration).optionsApiWebdavId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Changing file card content (adding file version)
     * @param {string} id File card identifier
     * @param {string} idext File name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebDavApi
     */
    public putApiWebdavIdIdext(id: string, idext: string, options?: AxiosRequestConfig) {
        return WebDavApiFp(this.configuration).putApiWebdavIdIdext(id, idext, options).then((request) => request(this.axios, this.basePath));
    }
}



